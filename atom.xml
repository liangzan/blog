<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Liang Zan - Blog]]></title>
  <link href="http://liangzan.github.com/blog/atom.xml" rel="self"/>
  <link href="http://liangzan.github.com/blog/"/>
  <updated>2016-05-29T07:49:33+08:00</updated>
  <id>http://liangzan.github.com/blog/</id>
  <author>
    <name><![CDATA[Wong Liang Zan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How does FreedomVPN work]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/05/29/how-does-freedomvpn-work/"/>
    <updated>2016-05-29T05:54:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/05/29/how-does-freedomvpn-work</id>
    <content type="html"><![CDATA[<p>I just watched the Champion&#8217;s League Final streamed live on my laptop. I watched it on <a href="http://www.pptv.com/">PPTV</a> in Singapore. This is made possible by FreedomVPN(Which amazingly, does not have a landing page of its own where I can link to). Recently, I switched my ISP(Internet Service Provider) to <a href="http://www.viewqwest.com/">Viewqwest</a>. This far, so good. Their product FreedomVPN, has opened the door to enjoying Internet TV from most of the popular content sites of the world. To many, it is like voodoo. Let me try to explain in broad strokes how they did it. Disclaimer: these are my conjectures and has not been validated with Viewqwest.</p>

<!-- more -->


<h2>Just watch it</h2>

<p>We didn&#8217;t realise we had Freedom VPN at the start. How we discover it was amusing. I realised that we suddenly had more titles to choose from Netflix. We thought the Singapore catalogue has been beefed up. Only after discovering those new titles can only be seen when we are at home, we then realised it was Freedom VPN.</p>

<p>There is no need to configure anything. Just watch it. It works across your smart phones, media players and the web browser. It is indeed convenient. It quickly won us over. We now access titles available from the US catalogue of Netflix. We can view BBC, the Chinese media sites and so many more.</p>

<p>With the new content that is now available to my family, we ended our cable TV subscription. It is obvious that media content delivered over the Internet is going to be the norm. My children will never experience catering their own schedules around the TV&#8217;s programme schedule, or the frustration of being restricted to watching it on the TV.</p>

<h2>When you press &#8220;Sherlock&#8221;</h2>

<p>I had described what the user experience is like. Let me lay out the requirements.</p>

<ul>
<li>No configuration needed</li>
<li>Connects to multiple content providers, each serving different countries</li>
<li>Works on all devices</li>
</ul>


<p><a href="http://www.imdb.com/title/tt1475582/">Sherlock</a> is a brilliant TV show that is not available in the Singapore Netflix catalogue but is, on the US one. When I select <strong>Sherlock</strong>, what really happens?</p>

<p>My web browser asks Netflix for <strong>Sherlock</strong>. The request has a problem. Where is Netflix? The expression <strong>www.netflix.com</strong> does not say where it is. It needs an address, an IP address. To translate <strong>www.netflix.com</strong> to an IP address, it asks a <a href="https://en.wikipedia.org/wiki/Domain_Name_System">DNS</a> server. When you&#8217;re on FreedomVPN, you are asking Viewqwest&#8217;s DNS server.</p>

<p>On my laptop which is served by Viewqwest,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nslookup www.netflix.com
</span><span class='line'>
</span><span class='line'>Non-authoritative answer:
</span><span class='line'>Name:   www.netflix.com
</span><span class='line'>Address: some.ip.address
</span><span class='line'>Name:   www.netflix.com
</span><span class='line'>Address: some.ip.address
</span><span class='line'>Name:   www.netflix.com
</span><span class='line'>Address: some.ip.address</span></code></pre></td></tr></table></div></figure>


<p>I can&#8217;t divulge what the IP addresses are, but I can tell you where they point at: somewhere from Viewqwest&#8217;s office, in Singapore.</p>

<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/singapore_netflix_lookup.png" title="Where Netflix is from FreedomVPN" ></p>

<p>On a non-Viewqwest network,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Non-authoritative answer:
</span><span class='line'>www.netflix.com canonical name = www.geo.netflix.com.
</span><span class='line'>www.geo.netflix.com     canonical name = www.us-west-2.prodaa.netflix.com.
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.34.178
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.37.191
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.40.137
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.4.148
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.15.237
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.22.153
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.23.124
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.28.210</span></code></pre></td></tr></table></div></figure>


<p>It is pointing unmistakably to Netflix servers. What does this mean?</p>

<blockquote><p>Masquerading: figurative sense of &#8220;false outward show&#8221; is from 1670s.</p></blockquote>


<p>Requests are inherently gullible. They are led to believe that Netflix is really at Viewwqwest&#8217;s offices. Off they went. Does anyone really believe that the files of <strong>Sherlock</strong> are kept at Viewqwest&#8217;s office? It isn&#8217;t. Now, our request needs to be satisfied with <strong>Sherlock</strong>. Where do we get <strong>Sherlock</strong>? From Netflix obviously.</p>

<p>Why would Netflix give it to the request? Remember, the request came from Singapore. <strong>Sherlock</strong> is <em>not</em> available for Singapore viewers. That is why we got to tell Netflix that the request did not come from Singapore, but from the US.</p>

<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/netflix-access-activity.png" title="Netflix activity" ></p>

<p>Look at my screenshot. This came from my activity logs in Netflix. I watched Netflix from US without me physically in the US. Where do the IP addresses point to?</p>

<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/viewqwest-us-ip.png" title="Viewqwest US IPs" ></p>

<p>Coming back to our request, what happens is our original request is routed to Viewqwest offices in the US. It then <em>pretends</em> that the source is from the US, sends to Netflix, gets <strong>Sherlock</strong>, routes back to the Singapore office, and then finally back to the end user, me, happily watching Sherlock duel with Moriarty. FreedomVPN listens actively for requests to their list of supported content websites. It then performs this form of masquerading to geo-unblock content for you. This is FreedomVPN.</p>

<h2>Cat and Mouse</h2>

<p>With Netflix clamping down on proxies, Viewqwest through Freedom VPN is the only vendor that I know of, that is able to circumvent content geo-blocking. They are treading a thin line.</p>

<p>Does it infringe terms of use? I don&#8217;t know. Content providers won&#8217;t be happy knowing that their content can be accessed in areas where it is not supposed to. Knowing is one thing, <strong>enforcing</strong> is another. Is it worth Netflix&#8217;s time to spend time and resources to go after FreedomVPN? Maybe not, since Viewqwest subscribers are not many enough to warrant spending the energy. I&#8217;m sure they have better things to do. As long as FreedomVPN continues to be a niche player, it should continue to stay under the radar. Perhaps that is why it never got its own landing page.</p>

<p>I see some Viewqwest customers complain that FreedomVPN is not stable. It will never be. Accept that this is a cat and mouse game. This solution is a workaround, and will never work cleanly unless geo-blocking is abolished. But for the convenience of watching <strong>Sherlock</strong> with one click, I&#8217;m wiling to accept that good enough is <em>good enough</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up a remote VPN using Sophos UTM]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/04/10/how-to-set-up-a-remote-vpn-using-sophos-utm/"/>
    <updated>2016-04-10T06:49:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/04/10/how-to-set-up-a-remote-vpn-using-sophos-utm</id>
    <content type="html"><![CDATA[<p>My office has a Sophos UTM. It acts as a firewall for the office network. We also use it as a VPN server. It allows us to access the machines in the office network. More importantly, it allows remote users to access the servers. Our servers have access restricted to a white listed list of IP addresses. This way, we only open up the white list to the office network. This allows our people to work from anywhere. We don&#8217;t have to keep updating the white list of IP addresses. When I tried setting it up, I could not find articles documenting how to do it. Hopefully it will point you in the right direction.</p>

<!-- more -->


<h2>Setting up the Remote VPN</h2>

<p>To set it up, I referred to the manual from Sophos. Their <a href="https://www.sophos.com/en-us/support/knowledgebase/119209.aspx">knowledge base</a> contains the administrative guide. Download the administrative guide for your version of UTM.</p>

<p>The relevant chapter is <strong>Remote Access > SSL</strong>. There also plenty of articles and videos on the web on how to set that up. I won&#8217;t repeat them so as not to bore the reader.</p>

<h2>Masquerading traffic from the office</h2>

<p>My aim is when I log into the VPN from a remote location, my traffic should masquerade as coming from the office. To the outside world, my requests comes from the office network&#8217;s IP address. To do that, I need to add a Masquerade rule. Go to <strong>Network Protection > NAT</strong>, create a new Masquerading rule by clicking on the button <strong>Create Masquerading Rule</strong>.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/sophos-utm-create-new-masquerading-rule.png" title="Sophos UTM Create New Masquerading Rule" ></p>

<p>Select the network definition which represents the remote SSL users(you would have defined them when setting up the remove VPN). Select <strong>WAN</strong> as your interface, as you would like the traffic to go out. Click <strong>Save</strong>. Enable the rule by turning on the rule in the toggle button. Your rule should look like the screenshot below. You&#8217;re done. Hope this helps.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/sophos-utm-masquerading-rule.png" title="Sophos UTM Masquerading Rule" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons learned when working with a remote team]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/04/01/lessons-learned-when-working-with-a-remote-team/"/>
    <updated>2016-04-01T06:42:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/04/01/lessons-learned-when-working-with-a-remote-team</id>
    <content type="html"><![CDATA[<p>I have both worked and managed remotely. I would like to share what works when managing a remote engineering team. Remote working is different from outsourcing. I would consider a remote team part of the company.</p>

<!-- more -->


<h2>Remote vs Local</h2>

<p>As a former remote worker, I like working remotely. I understand the draw of working remotely. Less distractions. Flexible time. Work life balance. Access to larger pool of candidates. There are also advantages to working together in an office. There is no better form of communication than speaking in person.</p>

<p>Both forms of working have their strengths and weaknesses. Use whichever that fits your situation.</p>

<h2>Hire experienced workers</h2>

<p>In a perfect world, everybody would like to hire experienced workers. For remote work, I&#8217;d see it as critical. The candidate should have the skills to perform the work needed. Not learn on the job. Why so? Learning is handicapped when a person is remote. He or she will not be able to learn as effectively because communication is degraded. Relying on instant messaging, emails or phone calls is not as effective. It takes up more of both the mentor&#8217;s time and the worker&#8217;s time.</p>

<h2>Define clear tasks</h2>

<p>In a perfect world you would like to know in advance the work needed to be done. That doesn&#8217;t happen in the real world. For remote workers, I&#8217;d entrust tasks which have been done before. Not open-ended projects. Why so? Because you need to be fair to the remote worker. Deny it or not, there is a mistrust of workers you don&#8217;t see at the desk. Is he working or watching Youtube at home? It helps immensely when you assign a task that you know how to do it. You would know how long it should take. If it takes too long, you know it is time to come in. If it is faster, congratulations, you have someone contributing effectively. Another factor is how independent the work is. The more independent, the better. It cuts down the need for communication. Communication is always the bottleneck for remote work.</p>

<h2>Communication is a necessity</h2>

<p>Communication should happen regularly at defined times. It is up to the team&#8217;s preference. I feel that there should happen at least once every 2 days or so. I find that most developers I know, don&#8217;t have the inclination to update their progress regularly without prompting. It should be the manager&#8217;s responsibility to ask for it.</p>

<p>Remote working goes against many culture norms especially in Asia. If the management is not open to new ideas, it may be an uphill cause. Company culture matters when deciding if you want to do it. In conclusion, if the work is well defined and the worker have experience doing it, no harm going remote. If not, better not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prefer lifting to destructuring in Scala]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/03/13/prefer-lifting-to-destructuring-in-scala/"/>
    <updated>2016-03-13T15:56:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/03/13/prefer-lifting-to-destructuring-in-scala</id>
    <content type="html"><![CDATA[<p>This is one of the few things which I discovered along the way as I was learning Scala. Always prefer lifting a function than destructuring.</p>

<!-- more -->


<p>For example, I have a function which returns the capital given the two letter country code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">countryCapital</span><span class="o">(</span><span class="n">countryCode</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function returns an <code>Option[String]</code> type. If the capital exists, it returns the capital as a <code>String</code> contained in the <code>Option</code> monad. If not, it returns a <code>None</code>.</p>

<p>I want to upper case the results returned. This was what I was doing in my early days.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">capital</span> <span class="k">=</span> <span class="n">countryCapital</span><span class="o">(</span><span class="n">countryCode</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">upcasedCapital</span> <span class="k">=</span> <span class="n">capital</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">toUpperCase</span>
</span><span class='line'>   <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I realised lifting the <code>Option</code> type is a more idiomatic way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">capital</span> <span class="k">=</span> <span class="n">countryCapital</span><span class="o">(</span><span class="n">countryCode</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">upcasedCapital</span> <span class="k">=</span> <span class="n">capital</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">c</span> <span class="k">=&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">toUpperCase</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is not necessary to destructure the type only to put it back again. Look how short it is, and clear its intention is. It did exactly the same things the earlier code snippet did.</p>

<p>When you see a lot of destructuring using pattern matching in a Scala code, it is almost always a code smell. Always prefer lifting over destructuring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the tyranny of billing]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/01/12/the-tyranny-of-billing/"/>
    <updated>2016-01-12T03:45:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/01/12/the-tyranny-of-billing</id>
    <content type="html"><![CDATA[<p>Billing is a critical function of any business. It is more than just collection of money. What better way than to tell a story.</p>

<!-- more -->


<p>We use the product of a fictitious company, ABC Widgets. The product is critical to our business. If the product fails to run properly, it causes a cascading effect to the company. We are happy with the product. It solves our problems. The price is reasonable. ABC Widgets bills us using the pre-paid model. In short, pay before you use. No payment, the service is cut. That is fair. We did not disagree.</p>

<p>Things were fine for months. One day, we received complaints from our customers that something was wrong. We investigated. It turned out that ABC Widget&#8217;s service stopped running. We reached their support. Our pre-paid account ran out of money. And our business critical service was cut. Our account was usually charged automatically when credits run low. This time it failed to charge.</p>

<p>We topped up our accounts manually. It did charge. Why wasn&#8217;t we notified? ABC Widgets replied they did email us. Twice. Sent automatically to our placeholder email: admin@so-and-so.com. They even pasted the email contents. It is our fault. We did not pay. They warned us. Not once, but twice. So, they were morally right to cut off our business critical service.</p>

<p>We were unhappy. But things has been going well this far. Besides, it did look like our fault. We let things past. A few months later, we received complaints from our customers. The account ran out of credits again. Our service was terminated. We are very unhappy. How can our accounts fail to top up again? We demand to know why. They replied it happens from time to time. And they apologized. We changed our notification email to point to a real person this time. We need to be actively monitoring our emails in case it happened again.</p>

<p>A sharp reader will see that the point of failure was the auto-charging of the accounts. It failed which led to the series of unfortunate events. Correct. So, it is a technical problem. Wrong. It is not simply a technical problem. It is a failure to understand the needs of the customer. This is how customers are lost.</p>

<p>The same incident happened for the third time. This time, we did not even receive the notification email. We decided to switch vendors. Our trust in them was lost. ABC Widgets lost a customer not because the product was no good, but because of they failed to understand their needs.</p>

<p>When you sell a business critical service, it has to run. In the case of ABC Widgets, the product is running fine. However their billing did not cater to the needs of their customers. You should never lightly cut the service of a customer especially when it is business critical. Repeat that. You should never <strong>lightly</strong> cut the service when it is business critical. How much effort did ABC Widget take to build a stellar product? A lot. How much effort did ABC Widgets take to reach their customers when there are problems in billing? 2 automated emails. Is that the best they can do? They don&#8217;t understand that it is critical, and it cannot be cut off like that.</p>

<p>If I were them, I would have customer service call the customer asking in person if they would like to cut the service. One phone call is enough. Is that a lot of effort? A switch to post-paid model would solve it as well. We would have continued with ABC Widgets. Please don&#8217;t subject your customers to the tyranny of your billing system. They would be grateful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to deploy a standalone server app]]></title>
    <link href="http://liangzan.github.com/blog/blog/2015/12/27/how-to-deploy-a-standalone-server-app/"/>
    <updated>2015-12-27T16:34:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2015/12/27/how-to-deploy-a-standalone-server-app</id>
    <content type="html"><![CDATA[<p>This post shares my experiences deploying a standalone application on a remote Linux server. By standalone application, I mean that the application is packaged as a single file. It could be a jar file or an executable packaged from Java/Scala/C/Haskell/etc. In my case, it was a jar file. My server is Ubuntu 14.04. My automation tool is <a href="http://www.ansible.com/">Ansible</a> and a dash of shell scripts. The process is very much influenced by <a href="http://capistranorb.com/">Capistrano</a>, a tool that is very popular for deploying Ruby web applications. There are three aims. One, I want to deploy in one step. Two, I want to version my deployment. Three, it should cater for easy rolling back.</p>

<!-- more -->


<h2>Deploying in one step</h2>

<p>I want to run one command to deploy my application on a remote server. It would have to be a script that can run a series of commands on a remote server. There are plenty of tools available. I chose Ansible. I like Ansible as it is easy to understand. It is like C, close enough to the metal, but gives a light enough abstraction to make it productive.</p>

<p>What the script does is, it transfers the file over(assuming you built it locally). A symbolic link to the new file is created. And then the application is started.</p>

<p>Here is the Ansible script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="c1"># connector deployment</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploys the application</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ubuntu</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">timestamp</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">copies the jar file over</span>
</span><span class='line'>      <span class="l-Scalar-Plain">copy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=../build/app.jar dest=/home/ubuntu/app-.jar</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unlink the current app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">path=/home/ubuntu/app.jar state=absent</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">link to the newly deployed app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">path=/home/ubuntu/app.jar src=/home/ubuntu/app-.jar state=link</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">stops running app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>      <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=app state=stopped</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">starts the app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>      <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=app state=started</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">send notification message via slack</span>
</span><span class='line'>      <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">module</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack</span>
</span><span class='line'>        <span class="l-Scalar-Plain">token</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;your slack token&gt;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">msg</span><span class="p-Indicator">:</span> <span class="s">&quot;app</span><span class="nv"> </span><span class="s">completed</span><span class="nv"> </span><span class="s">deployment.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Versioning your deployments</h2>

<p>I want a way to version my deployments. Versioning gives you the option to roll back. There are 2 mechanism which I used. The symbolic link and the timestamp. I stole the ideas unashamedly from Capistrano.</p>

<p><a href="https://en.wikipedia.org/wiki/Symbolic_link">Symbolic links</a> is used to point to the desired version of the app to run. This allows you to run whichever version of the app. Timestamp tells you when this file is deployed. I find it good enough for differentiating.</p>

<p>The relevant commands are all found in the Ansible script above. The <code>timestamp</code> variable captures the time of the deployment. We then append the timestamp to the newly deployed file. The symbolic linking are done using Ansible.</p>

<p>As you deploy more often, you need to clear the old files which are unused. For that, I wrote a shell script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># leaves 5 copies of the standalone app</span>
</span><span class='line'><span class="nv">total_files</span><span class="o">=</span><span class="k">$(</span>find -name <span class="s1">&#39;*.jar&#39;</span> -type f -print0 | xargs -0 ls -t | wc -l<span class="k">)</span>
</span><span class='line'><span class="nv">file_num_to_remove</span><span class="o">=</span><span class="sb">`</span>expr <span class="nv">$total_files</span> - 5<span class="sb">`</span>
</span><span class='line'>find -name <span class="s1">&#39;*.jar&#39;</span> -type f -print0 | xargs -0 ls -t | tail -n <span class="nv">$file_num_to_remove</span> | xargs rm
</span></code></pre></td></tr></table></div></figure>


<p>It first finds all the jar files in the current directory. Next it sorts them by date modified with the most recent first. We want to keep the last five deployments. So it finds how many files it should remove by subtracting the total by five. Once we know how many files to remove, we can find them using <code>tail</code> and remove them by passing the file name into <code>xargs</code>. 5 is an arbitrary number that you can change.</p>

<p>After deployment, the application is deployed as an <a href="http://upstart.ubuntu.com/">Upstart</a> service and monitored via <a href="https://www.librato.com/">Librato</a>.</p>

<h2>Room for improvement</h2>

<p>I see a few ways it can be improved.</p>

<p>The versioning makes use of timestamp. It can be richer. If there is semantic tagging, we could also use that in addition to timestamps. We will be able to tell which version this file contains.</p>

<p>The transfer time over the network is the bottleneck of the process. If you have a build server like <a href="https://jenkins-ci.org/">Jenkins</a>, it would be faster to deploy from it.</p>

<p>I do hope this is helpful to whoever who reads this. Do share your thoughts on how this can be improved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The randomness idea filter]]></title>
    <link href="http://liangzan.github.com/blog/blog/2015/12/19/the-randomness-idea-filter/"/>
    <updated>2015-12-19T06:38:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2015/12/19/the-randomness-idea-filter</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://farm3.staticflickr.com/2808/10546083363_0d4bfb56cf.jpg" title="Ikea Lamp. By John Twohig" ></p>

<p>I use this filter to decide whether a product or feature is worth pursuing. I call it the randomness idea filter. How badly is this product or feature affected by randomness?</p>

<!-- more -->


<h2>Works vs somewhat works</h2>

<p>Take the lamp for example. It has one switch. Flick it, and it fills the room with light. It works. It works well and it works all the time. Observe, it has one input(that is the switch) and one expected output.</p>

<p>Now, let&#8217;s take the other extreme: Siri.</p>

<p>My one year old: <em>dah blu bum</em></p>

<p>Siri: Calling Uncle Tom now.</p>

<p>Not to say that Siri does not work. It works, some of the time. It works if you speak clearly, with a clear intention like call someone plus a multitude of other conditions. Under limited kinds of inputs, Siri will work well. Like the lamp.</p>

<p>The more variety the input has, the harder it is to get the outcome right.</p>

<h2>Is it random or not</h2>

<p>Even if there are lots of different input, as long as you can predict those input, you can be reasonably sure you can get the result right. The tricky part is, is your input predictable?</p>

<p>For example, your product does database migration from MySQL to PostgresSQL. That is a hard problem to solve. There are lots of cases to cater for. But they are predictable. There are only that many data types and that many ways it can change to. With effort, it is possible to cater for more than 95% of the cases.</p>

<p>Siri can&#8217;t. Even for a universal language like English, people speak it in so many tongues. Worse, spoken languages keep evolving. The inputs are random. How much effort is needed to cover all the bases? Such products are not going to be expected to work very well.</p>

<p>Unless, your users don&#8217;t expect a straight result. Like a Google search. It is OK to give a somewhat good result. But for Siri, it is not OK to call the wrong person.</p>

<p>When there is randomness in the input and the expected result is a straight yes no result, throw away the idea. There are many other better things you can work on. When thinking if I should pursue an idea, I always do this check. I hope it helps you too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entering the logistics industry]]></title>
    <link href="http://liangzan.github.com/blog/blog/2015/12/11/entering-the-logistics-industry/"/>
    <updated>2015-12-11T16:49:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2015/12/11/entering-the-logistics-industry</id>
    <content type="html"><![CDATA[<p>Early this year, I joined a logistics company. I&#8217;ve been working in technology for the whole of my professional life. This was a welcomed change. I was eager to see how different a conventional industry, such as Logistics, is like. The company is <a href="https:///www.courex.com.sg">Courex</a>. It does ecommerce logistics in Singapore.</p>

<!-- more -->


<p>Logistics is an old industry. It is huge. It is a trillion dollar industry. The number of publications on logistics is close to hundreds. Every region has its own publications. Publications is a good barometer as they mean readership. If you&#8217;re interested to read, I can recommend <a href="http://www.joc.com/">Journal of Commerce</a>. There are many different types of logistics. Fundamentally, logistics solves the problem of getting a thing from one place to another.</p>

<p>Logistics is a service business. It is also a capital and labour intensive business. The margins are low. Often in single digits. Why? Because logistics is a <a href="https://en.wikipedia.org/wiki/Commoditization">commodity</a>. There isn&#8217;t much difference from one service from the next. The result is the same. Your thing gets delivered from one point to another. Or gets stored at a place. The difference is consistency of service. A good provider delivers at a high consistency. When the result is the same, you can only compete on price. That is why you have low margins.</p>

<p>When the price is the same, you compete on relationships. I had a chat with my friend who works in the chemicals industry. It is the same. They sell the same products and can only compete on price. It is possible for the sales person to jump off with your customers to start his own company, selling the same products. It doesn&#8217;t affect the customer. They get the same result. That is usually unthinkable for a technology product. Even something as simple as online chat, there are multiple variants. No sales person can jump off with the customers as it is non-trivial to replicate a technology product.</p>

<p>Which is why there is little transparency in the logistics industry. Holding on to these information(ie, customer&#8217;s contacts, shipping contacts) is their only barrier to entry. Low margins with high capital expenditure leaves in little room for innovation. It makes it difficult for new entrants to come in. I think the same applies for other conventional industries.</p>

<p>It is easier for a service to differentiate when the subject is a human. It can become an experience which can be delightful or frustrating, depending on how good you are. When the subject is an object, what room is there for differentiation? A parcel cannot experience the more gentler handling of your workers. Logistics companies end up competing on consistency and efficiency. Which is why eventually, it will consolidate. Economies of scale allows the company to compete on price.</p>

<p>Strictly speaking, you do not need technology to fulfil a logistics service. It can be done on pen and paper. Technology&#8217;s role in logistics is to help maintain consistency and improve efficiency. It helps to enforce people follow processes. Every step in the process is recorded. If a step is not followed, the system sounds out. That is how consistency is maintained. A lot of work in logistics is repetitive and boring. Humans are not good at performing repetitive tasks. Machines are.</p>

<p>It is a breath of fresh air to get out of the echo chamber of technology. We&#8217;re often building technology solutions for technology problems. I got to see how technology can amplify what a worker can do. It make a worker more productive. So why isn&#8217;t technology more widely adopted in the industry? It is a human problem. There is a learning curve for people. I&#8217;ve witnessed one company who refuse to use a modern inventory management system. They opted to use plain spreadsheets. Why? Because they don&#8217;t want to learn to use the product, despite the advantages it brings. People in the conventional industries are definitely not the early adopters when it comes to technology. Human problems are much harder to solve than technical problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to configure WebDAV using Apache on Ubuntu]]></title>
    <link href="http://liangzan.github.com/blog/blog/2014/09/04/how-to-configure-webdav-using-apache-on-ubuntu/"/>
    <updated>2014-09-04T23:18:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2014/09/04/how-to-configure-webdav-using-apache-on-ubuntu</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/WebDAV">WebDAV</a> is an extension of the HTTP protocol that allows users to manage files on servers. There are many ways to manage files on a remote server. WebDAV has several benefits over other solutions such as <a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol">FTP</a> or <a href="https://en.wikipedia.org/wiki/Samba_(software">Samba</a>). In this article, we will go through how to configure your Apache server on Ubuntu 14.04 to allow native WebDAV access from Windows, Mac and Linux with authentication.</p>

<!-- more -->


<h2>Why WebDAV?</h2>

<p>WebDAV offers several advantages.</p>

<ul>
<li><p>Native integration on all major OSes(Windows, Mac, Linux). There is no need to install third party software to use WebDAV.</p></li>
<li><p>Supports partial transfers.</p></li>
<li><p>More choices for authentication. Being on HTTP means <a href="https://en.wikipedia.org/wiki/NT_LAN_Manager">NTLM</a>, <a href="https://en.wikipedia.org/wiki/Kerberos_(protocol">Kerberos</a>), <a href="https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol">LDAP</a>, etc are possible.</p></li>
</ul>


<p>Depending on your situation, WebDAV may be the best solution for your needs.</p>

<h2>Why Apache?</h2>

<p>There are many web servers around that supports WebDAV on Linux. However, Apache has the most compliant implementation of the WebDAV protocol out there. At the time in writing, WebDAV on <a href="http://nginx.org/">Nginx</a> and <a href="http://www.lighttpd.net/">Lighttpd</a> work but only partially.</p>

<h2>Install Apache</h2>

<p>Let us get <a href="https://httpd.apache.org/">Apache</a> installed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install apache2</span></code></pre></td></tr></table></div></figure>


<p>The Apache web server should be installed and running.</p>

<h2>Setting up WebDAV</h2>

<p>There are 3 steps to set up WebDAV. We designate a location, enable the necessary modules and configure it.</p>

<h3>Step 1: Preparing the directories</h3>

<p>We need to designate a folder for serving WebDAV. We are creating a new directory in <code>/var/www</code> for that. You will also need to change the owner to <code>www-data</code>(or whichever your Apache user is) in order to allow Apache to write to it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir /var/www/webdav
</span><span class='line'>sudo chown www-data:www-data /var/www/</span></code></pre></td></tr></table></div></figure>


<h3>Step 2: Enabling modules</h3>

<p>Next we enable the modules using <a href="http://man.he.net/man8/a2enmod">a2enmod</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2enmod dav
</span><span class='line'>sudo a2enmod dav_fs</span></code></pre></td></tr></table></div></figure>


<p>The Apache modules are found under <code>/etc/apache2/modules-available</code>. This creates a symbolic link from <code>/etc/apache2/modules-available</code> to <code>/etc/apache2/modules-enabled</code>.</p>

<h3>Configuration</h3>

<p>We open the configuration file at <code>/etc/apache2/sites-available/000-default.conf</code> using your favorite text editor. Add the following configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DavLockDB /var/www/DavLock
</span><span class='line'>
</span><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    Alias /webdav /var/www/webdav
</span><span class='line'>
</span><span class='line'>    &lt;Directory /var/www/webdav&gt;
</span><span class='line'>        DAV On
</span><span class='line'>    &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://httpd.apache.org/docs/2.4/mod/mod_dav_fs.html">DavLockDB</a> directive designates the name of the DAV Lock database. It should be a path to a file. The file does not need to be created. The directory should be writeable by the Apache server.</p>

<p>The <a href="https://httpd.apache.org/docs/2.4/mod/mod_alias.html">Alias</a> directive maps requests to <code>http://your.server/webdav</code> to the <code>/var/www/webdav</code> folder.</p>

<p>The <a href="https://httpd.apache.org/docs/current/mod/core.html#directory">Directory</a> directive tells Apache to enable WebDAV for the <code>/var/www/webdav</code> folder. You can find out more about <a href="https://httpd.apache.org/docs/2.4/mod/mod_dav.html">mod_dav</a> from the Apache docs.</p>

<p>If you restart the Apache server, you will have a working WebDAV server without authentication.</p>

<p>Restart the Apache server like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>The WebDAV server should be found at <strong>http://&lt;your.server.com>/webdav</strong>. Try logging in without any credentials.</p>

<h2>Adding authentication</h2>

<p>A WebDAV server without authentication is not secure. In this section we&#8217;ll add authentication to your WebDAV server. There are many authentication schemes available. We are only going to touch on the 2 simplest schemes: Basic and Digest authentication.</p>

<h3>Which to use? Basic or Digest authentication?</h3>

<p>Take a look at this table which illustrates the compatibility of the various authentication schemes on different operating systems. Note that if you are serving HTTPS, we are assuming your ssl cert is valid(not self-signed).</p>

<p><img src="http://i.imgur.com/Q01EN3F.png" alt="WebDAV compatibility" /></p>

<p>If you are using <strong>HTTP</strong>, use <a href="https://en.wikipedia.org/wiki/Digest_access_authentication">Digest authentication</a> as it will work on all operating systems. If you are using <strong>HTTPS</strong>, you have the option of using <a href="https://en.wikipedia.org/wiki/Basic_access_authentication">Basic authentication</a>.</p>

<p>We&#8217;re going to cover the <strong>Digest</strong> authentication version since it works on all the operating systems without the need for a SSL cert.</p>

<h3>Digest authentication</h3>

<p>Let us generate the file(called <strong>users.password</strong>) that stores the password for the users. In Digest authentication, there is the <strong>realm</strong> field which acts as a namespace for the users. We will use <strong>webdav</strong> as our <strong>realm</strong>. Our first user will be called <strong>alex</strong>.</p>

<p>To generate the digest file, we have to install the dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install apache2-utils</span></code></pre></td></tr></table></div></figure>


<p>After that, we generate the file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo htdigest -c /etc/apache2/users.password webdav alex</span></code></pre></td></tr></table></div></figure>


<p>There should be a password prompt for the password of <strong>alex</strong>.</p>

<p>For subsequent addition of users, you should remove the <strong>c</strong> flag. Another example adding a user called <strong>bob</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo htdigest /etc/apache2/users.password webdav bob</span></code></pre></td></tr></table></div></figure>


<p>We also need to allow Apache to read it. So we change the owner of the file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chown www-data:www-data /etc/apache2/users.password</span></code></pre></td></tr></table></div></figure>


<p>After the password file is created, we should make changes to the configuration at <code>/etc/apache2/sites-available/000-default.conf</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DavLockDB /var/www/DavLock
</span><span class='line'>
</span><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    Alias /webdav /var/www/webdav
</span><span class='line'>
</span><span class='line'>    &lt;Directory /var/www/webdav&gt;
</span><span class='line'>        DAV On
</span><span class='line'>        AuthType Digest
</span><span class='line'>        AuthName "webdav"
</span><span class='line'>        AuthUserFile /etc/apache2/users.password
</span><span class='line'>  Require valid-user
</span><span class='line'>    &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://httpd.apache.org/docs/current/mod/mod_authn_core.html">mod_authn</a> module contains the definitions for the authentication directives. In essence, we instruct Apache that for the <code>/var/www/webdav</code> directory, there should be authentication using the <strong>Digest</strong> scheme. The realm should be called <strong>webdav</strong>. Find the password from the file at <strong>/etc/apache2/users.password</strong>. Only valid users who authenticate themselves is able to acess that directory.</p>

<p>Finally, enable the digest module and restart the server for the settings to take effect.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2enmod auth_digest
</span><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<h2>Testing it</h2>

<p>We&#8217;ll demonstrate how to access your WebDAV server from the native file browsers of Mac, Windows and Linux(Ubuntu).</p>

<h3>Mac</h3>

<p>On Mac, open <strong>Finder</strong>. On the menu bar, find <strong>Go</strong> and select the option <strong>Connect to Server</strong>.</p>

<p><img src="http://i.imgur.com/q6rsU9q.png" alt="WebDAV Mac Step 1" /></p>

<p>Enter the server address. It should be <strong>http://&lt;your.server>/webdav</strong>. Press <strong>Connect</strong>.</p>

<p><img src="http://i.imgur.com/h4mFZoK.png" alt="WebDAV Mac Step 2" /></p>

<p>You will be prompted for a username and pssword. Enter them and press <strong>Connect</strong>.</p>

<p><img src="http://i.imgur.com/BkhcR7I.png" alt="WebDAV Mac Step 3" /></p>

<p>Once you have connected, the directory should appear in <strong>Finder</strong>.</p>

<p><img src="http://i.imgur.com/HcuBGmq.png" alt="WebDAV Mac Step 4" /></p>

<h3>Windows</h3>

<p>On Windows, open <strong>File Explorer</strong>. On the left sidebar, you should find the <strong>Network</strong> icon.</p>

<p><img src="http://i.imgur.com/KhKCetD.png" alt="WebDAV Windows Step 1" /></p>

<p>Right click on the <strong>Network</strong> icon. It should show the context menu with the option <strong>Map network drive</strong>. Click on that.</p>

<p><img src="http://i.imgur.com/KYLEwSv.png" alt="WebDAV Windows Step 2" /></p>

<p>Enter the server address in the folder field. It should be <strong>http://&lt;your.server>/webdav</strong>. Select the <strong>Connect using different credentials</strong> if your login is different. Press <strong>Finish</strong>.</p>

<p><img src="http://i.imgur.com/PbYhFXr.png" alt="WebDAV Windows Step 3" /></p>

<p>You will be prompted for a username and password. Enter them and press <strong>OK</strong>.</p>

<p><img src="http://i.imgur.com/d57Cul7.png" alt="WebDAV Windows Step 4" /></p>

<p>Once you have connected, it should appear as a network drive on the left sidebar of your <strong>File Explorer</strong>.</p>

<p><img src="http://i.imgur.com/CTPOwvI.png" alt="WebDAV Windows Step 5" /></p>

<h3>Linux(Ubuntu)</h3>

<p>We are using Ubuntu 14.04 as our Linux desktop operating system. On Ubuntu, open <strong>Files</strong>. THere is a <strong>Connect to Server</strong> option on the left sidebar. Click on that.</p>

<p><img src="http://i.imgur.com/XqbJm4t.png" alt="WebDAV Linux Step 1" /></p>

<p>Enter the server address. It should be <strong>dav://&lt;your.server>/webdav</strong>. Press <strong>Connect</strong>.</p>

<p><img src="http://i.imgur.com/M3VuEE5.png" alt="WebDAV Linux Step 2" /></p>

<p>You will be prompted for a username and password. Enter them and press <strong>Connect</strong>.</p>

<p><img src="http://i.imgur.com/Sa5037A.png" alt="WebDAV Linux Step 3" /></p>

<p>Once you have connected, the directory should appear under the <strong>Network</strong> listing.</p>

<p><img src="http://i.imgur.com/FQtteVI.png" alt="WebDAV Linux Step 4" /></p>

<h2>Conclusion</h2>

<p>In this article, we have gone through how to set up a WebDAV server using Apache on Ubuntu 14.04. We have also discussed how to configure Digest authentication to secure the server. Lastly, we have shown you how to connect to the WebDAV server from all 3 major operating systems using their native file browsers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a security disclosure program]]></title>
    <link href="http://liangzan.github.com/blog/blog/2014/03/25/running-a-security-disclosure-program/"/>
    <updated>2014-03-25T05:59:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2014/03/25/running-a-security-disclosure-program</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://farm8.staticflickr.com/7308/11406985424_457c44045f_m.jpg" title="Security. By perspec_photo88" ></p>

<p>A few months ago, I started a security disclosure program for my <a href="https://www.dropmyemail.com">employer</a>. It is definitely beneficial for us. I&#8217;d like to share some of our experiences running a security disclosure program.</p>

<!-- more -->


<h2>What is a security disclosure program</h2>

<p>A security disclosure program is a program is an open invitation for security researchers to find vulnerabilities in your application. If they find something, they are encouraged to disclose to us and allow us time to fix it before going public. Your company may choose to offer a reward. It could be monetary or an acknowledgment on the Hall of Fame. Many companies run such programs. Good examples include Google, Facebook and Github.</p>

<p>To the companies running such a program, it gains a group of enthusiastic volunteers who will scrutinize their apps for vulnerabilities. It is far more cost effective than having in-house employees do the same. For the security researchers, it is a form of marketing or income for them. It is a win-win scenario for both parties.</p>

<h2>The influx</h2>

<p>We first posted the security page detailing our disclosure program. Within days, security researchers found our program without us telling anybody about it. That is our first surprise. Very quickly, more and more security researchers came without prompting. There was a visible spike in our traffic. <a href="https://bugcrowd.com">BugCrowd</a> knew about our program and added us to their <a href="https://bugcrowd.com/list-of-bug-bounty-programs">list</a> of bounty programs. The security researchers come from all over the world. The quality of the reports varies widely. Through their reports we managed to uncover no less than 5-6 serious vulnerabilities. That alone was worth it.</p>

<p>After the initial rush, things will begin to quiet down. You will feel more confident about the security of your app.</p>

<h2>The cons</h2>

<p>There are <em>a lot</em> of reports to respond to. It is very similar to handling support. It creates an additional load on the team. Every report has to be investigated and judged if it is a real vulnerability or not. Most of the time the reports cover fairly trivial vulnerabilities. Some may not agree with you on whether it is a real vulnerability or not. You definitely need someone in your team to be able to judge the vulnerabilities.</p>

<p>During this period expect various parts of the app to break. We have researchers running automated tools against our apps. There was a huge spike in errors. No doubt it caused some inconveniences.</p>

<p>I think rewards are a good motivator. Think carefully what reward you want to give. Not all rewards are the same. A Hall of Fame only requires a page update. Whereas a T-shirt costs you money to print, time to package and money for postage. Does your team have the time to send out dozens of shirts every week? Do you have enough shirts to give out? If it is a monetary reward, expect arguments with you on your judgment.</p>

<h2>In retrospect</h2>

<p>Security disclosure programs are definitely worth the cost of running it. But don&#8217;t take for granted that having such a program in place means your app is secure. Most of the security researchers only do a shallow dive. They don&#8217;t spend too much time since the payoff is not there. You should still get a professional security consultant to perform an audit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaker 101: the experience so far]]></title>
    <link href="http://liangzan.github.com/blog/blog/2013/10/23/breaker-101-the-experience-so-far/"/>
    <updated>2013-10-23T05:39:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2013/10/23/breaker-101-the-experience-so-far</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://farm8.staticflickr.com/7129/7712545428_8615dcb6d8_m.jpg" title="Lock. By Alexandre Dulaunoy" ></p>

<p><a href="http://daeken.com/2013-06-11.1_Breaker_101__An_intensive_online_web_security_course.html">Breaker 101</a> is a course conducted by <a href="http://en.wikipedia.org/wiki/Cody_Brocious">Cody Brocious</a>. It aims to teach you the basics to <a href="http://en.wikipedia.org/wiki/Internet_security">web security</a>. I&#8217;ve always been curious about security. When the opportunity arose, I signed up without hesitation. It is not cheap though. But I thought the course would benefit me. It already did.</p>

<!-- more -->


<p>It has fundamentally transformed the way I code. I view things differently. When I code, I am security conscious. I&#8217;m spotting security vulnerabilities in my old code after taking the course. That alone is worth the price of the course. I&#8217;m now confident my apps aren&#8217;t easy to break.</p>

<h2>The course</h2>

<p>The course is conducted via a live video stream each week. Cody would go through the material. We ask questions after the class. We have an IRC channel and a forum. Those serve as additional aveneues to ask questions. We also have study groups that are formed organically. I have a small group for those located in Asia. We would discuss coursework.</p>

<p>The bulk of the learning is done through the practicals. These are &#8216;capture the flag&#8217; style practicals. Each practical would focus on a class of vulnerabilities. There are about 5 vulerabilities in each practical. The practicals are web apps with vulnerabilities hidden in them. Our job is to find them, break them and write them in a report to be submitted. Most of the time, we can find most of the vulerabilities. There is a myth that good builders cannot be good breakers. I don&#8217;t think that is true. Most of the class are coders in their day jobs. And we were all able to find the vulnerabilities. The key approach is to understand how an app works. Then make use of hidden assumptions to break the app. Being coders give us an advantage. We can easily guess how it works.</p>

<p>The course can be hectic. Personally, I had to take one to two days off to catch up. Going through the coursework does not feel like work. It is fun! Every time I spot a vulnerability, I get a quick endorphin rush. The sense of satisfaction is similar to that of building. The coursework is not easy but not impossibly difficult. There is a light amount of outside reading that you have to do. I never knew about <a href="https://www.owasp.org">OWASP</a> before this. Now I regard OWASP as the wikipedia of security. The exams is similar to the practical. Except it is time limited. The most boring part of the course is the report writing.</p>

<p>Security cannot be covered in a mere 12 weeks. Breaker 101 did show us the way forward. Like any skill it needs practice to hone it. Reading books alone is not effective. You got to go out there and break things(legally of course). There are plenty of security courses around. But I prefer to be taught by real hackers. If you want to get into security, take Breaker 101. You won&#8217;t regret it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three tips for managing complexity in Node.js projects]]></title>
    <link href="http://liangzan.github.com/blog/blog/2013/08/12/three-tips-for-managing-complexity-in-node-dot-js-projects/"/>
    <updated>2013-08-12T05:33:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2013/08/12/three-tips-for-managing-complexity-in-node-dot-js-projects</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://farm7.staticflickr.com/6045/6310508350_8deb30151d_n.jpg" title="Complexity. By DigitalMums" ></p>

<p>After working on various Node.js projects, I want to share three simple tips which helps to reduce complexity. If you are building an <a href="http://expressjs.com">Express</a> or <a href="https://github.com/mcavage/node-restify">Restify</a> project, ususally the framework does not tell you how to structure your application. You can put everything in one mega file, or you can(and should) extract different functionalities out.</p>

<!-- more -->


<h2>Folder structure</h2>

<p>A clear folder structure helps you to find code. It is a form of documentation. There is no right or wrong. Do what suits your project best. I find the suggestions from <a href="https://gist.github.com/viatropos/1398757">this discussion</a> worth applying. In general I like to separate the main parts of the app:</p>

<ul>
<li>application logic</li>
<li>assets</li>
<li>view templates</li>
<li>configuration</li>
<li>tests</li>
<li>logging</li>
<li>third party vendor code</li>
</ul>


<p>As long as your folder structure separates these functions, it is good enough.</p>

<h2>Index method</h2>

<p>For example, when you are writing an API application, your controllers will increase as you add more functionality. You can break the controllers into their own file and place them all in a folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- controllers
</span><span class='line'>|   |-- threads.js
</span><span class='line'>|   |-- posts.coffee
</span><span class='line'>|   |-- users.coffee
</span><span class='line'>|   |-- polls.coffee</span></code></pre></td></tr></table></div></figure>


<p>Now you need to make them available to the server. You can make use of <strong>index.js</strong>. Place an <strong>index.js</strong> in your controller folder</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-- controllers
</span><span class='line'>|   |-- index.js
</span><span class='line'>|   |-- threads.js
</span><span class='line'>|   |-- posts.coffee
</span><span class='line'>|   |-- users.coffee
</span><span class='line'>|   |-- polls.coffee</span></code></pre></td></tr></table></div></figure>


<p>Write something like this. It finds all the files in the folder and adds them to the exports namespace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Modules are automatically loaded once they are declared</span>
</span><span class='line'><span class="cm"> * in the controller directory.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">readdirSync</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">file</span> <span class="o">!=</span> <span class="s1">&#39;index.js&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">moduleName</span> <span class="o">=</span> <span class="nx">file</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">file</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">exports</span><span class="p">[</span><span class="nx">moduleName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./&#39;</span> <span class="o">+</span> <span class="nx">moduleName</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can get all the controllers in one variable. Which allows you to hook it to the server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">controllers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./app/controllers&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/v1/accounts&#39;</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">.</span><span class="nx">accounts</span><span class="p">.</span><span class="nx">index</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This technique helps to reduce the number of requires you need to write. Plus, making use of <strong>index.js</strong> makes it look cleaner as you only need to write the folder name. In general, when you face a situation where you have many similar functions, extract them into separate files, and use an index file to bind them together.</p>

<h2>Passing the reference to an external file</h2>

<p>If you haven&#8217;t noticed in Express already, there are several <a href="http://expressjs.com/api.html#middleware">middleware</a> initialization function calls when you initialize an Express server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">multipart</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>It quickly gets unwieldy as your projects grow. My ideal case is to initialize all the middleware configurations in a separate file. To do that, I pass the server reference over.</p>

<p>On your former app file, use a single require for the external file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../config/middleware&#39;</span><span class="p">)(</span><span class="nx">app</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Export a single function which initializes all the middleware.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">multipart</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, your app file will be much cleaner. It is a useful technique for extracting out large code blocks. Hope these three tips helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The library shopping checklist]]></title>
    <link href="http://liangzan.github.com/blog/blog/2013/07/13/the-library-shopping-checklist/"/>
    <updated>2013-07-13T05:59:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2013/07/13/the-library-shopping-checklist</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://farm6.staticflickr.com/5062/5652699228_68587eb26c.jpg" title="Shopping. By Epsos.de" ></p>

<p>Library shopping is like second nature to developers. A library refers to packaged code like <a href="http://rubygems.org">Ruby gems</a>, <a href="http://npmjs.org">NPM packages</a> or <a href="https://pypi.python.org/pypi">Python packages</a>. Along the years, I do these evaluations unconsciously. I thought it&#8217;d be good to put this mental checklist down in writing.</p>

<!-- more -->


<h2>Does the library fulfil your requirements?</h2>

<p>My first filter is to look for libraries that fulfil what I need to do. Different libraries have different features. The clearer you are on what you need to do, the easier it will be to filter which library is more suitable.</p>

<h2>Is the library maintained?</h2>

<p>Is the last commit recent? If the last commit is less than 6 months old, I would view it as recent.</p>

<p>Does the documentation or website say that the library is not maintained anymore? Sometimes authors do put up notices that a project is abandoned. Sometimes if the official library is not maintained, there may be forks that may have patches. You could use those instead.</p>

<p>Are the issues fixed promptly? Take a look at how fast issues gets fixed. It is an indicator of how well maintained the library is.</p>

<h2>Will the library be maintained?</h2>

<p>Are there more than one contributor? If there are more than one, it is a good sign. A solo contributor is less preferable, as no peer pressure makes it easy to abandon a project.</p>

<h2>Is the library compatible with your platform?</h2>

<p>Are you on the JVM, on Windows or on Ruby 1.8.7? The library may not support your platform, so you must check.</p>

<h2>Is the library well documented?</h2>

<p>The documentation has to address these concerns before I would see it as well documented</p>

<ul>
<li>Does it have an API reference?</li>
<li>Does it address how to install?</li>
<li>Does it address how to uninstall?</li>
<li>Does it address how to use it?</li>
<li>Does it address how to update older versions?</li>
<li>Does it explain how it works?</li>
<li>Does it explain all the features?</li>
<li>Does it have examples?</li>
<li>Does it have a change log?</li>
</ul>


<p>You have to take into account the quality of the writing. Clarity and succintness is what I look for.</p>

<p>You also have to take note if the documentation is out of touch with the changes in the code. Check for the commit dates of the documentation.</p>

<h2>Is the library well written?</h2>

<p>Read the code. Is it clean? Is this the quality of code you would like to have in your project?</p>

<h2>Is the library well versioned?</h2>

<p>Check the history of versioning. Does the library adhere to <a href="http://semver.org">Semantic Versioning</a>?</p>

<p>Some libraries don&#8217;t. If they don&#8217;t, it makes updates harder.</p>

<h2>Does the API help more than hinder?</h2>

<p>Take a closer look at the usage of the library.</p>

<p>Do you need to do a lot of configuration work to get it working? Or does it work out of the box?</p>

<p>Does the API force you to change your existing code? Or does it fits in beautifully?</p>

<p>Is the API intuitive?</p>

<p>And there is a matter of taste. Does the API feel enjoyable to write in?</p>

<h2>Does the library have tests?</h2>

<p>Never choose a library that have no tests. You will end up as a guinea pig.</p>

<h2>Is the library&#8217;s license permissive enough?</h2>

<p>There are a variety of <a href="http://en.wikipedia.org/wiki/Software_license">software licenses</a>. Note which license the library is using. Can your project use a library that uses that particular license?</p>

<h2>Is the library mature?</h2>

<p>How long has the library existed? Is it years, months or weeks? Prefer the long-lived ones to the young ones.</p>

<p>How many users are using the library?
How many downloads, watchers does the library have?
Are there blog posts covering the library?
Does it have many contributors?
Does it have many people reporting issues?</p>

<p>Of course, the more mature the library is, the better.</p>

<h2>Does the library have dependencies?</h2>

<p>Certain libraries have heavy dependencies. Take for example, <a href="http://docs.opscode.com/chef_overview_server.html">Chef server</a> has <a href="http://couchdb.apache.org">Couchdb</a>, <a href="http://www.rabbitmq.com">RabbitMQ</a> and <a href="http://www.merbivore.com">Merb</a> as its dependencies. Generally, prefer libraries who install minimal extra dependencies.</p>

<h2>Does the library break existing code?</h2>

<p>Take a close look at how the library works. In the case of Ruby, a library may monkey patch common classes. It may break your code. So do be careful. If you have a comprehensive test suite, it is time to put it in use.</p>

<h2>Is the library stable?</h2>

<p>If the library has reached stability, and the API don&#8217;t change much, that is good. It means you don&#8217;t have much of a maintenance cost. There is no need to keep updating your code to keep up with the library.</p>

<h2>Does the library have alternatives?</h2>

<p>This is the cost of switching. Over the long term, there is always a chance that a library may get abandoned. What are the other alternatives? It is always good to have <em>competition</em> serving the same function.</p>

<h2>Do you understand how it works?</h2>

<p>You should always strive to understand how it works below the hood. This will help immensely when problems occur, or when you need to further customize it. Prefer libraries that does one thing well, than those who do many things.</p>

<h2>Is the performance good?</h2>

<p>If the function that the library is serving may be intensive, it would be good to pay attention to its performance. Libraries such as <a href="https://github.com/resque/resque">Resque</a> and <a href="http://sidekiq.org/">Sidekiq</a> serves similar functions. The only perceptible difference is their performance.</p>

<h2>Is it simpler to use it or write it yourself?</h2>

<p>If the functionality is simple enough, it might be a better choice to implement it yourself. Implementing yourself has the advantage that you understand how it works. And you&#8217;ll be free from hassle of keeping the library up to date.</p>

<p>I hope this checklist helps to you to do your library shopping.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Kinesis Freestyle 2]]></title>
    <link href="http://liangzan.github.com/blog/blog/2013/05/21/thoughts-on-kinesis-freestyle-2/"/>
    <updated>2013-05-21T05:53:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2013/05/21/thoughts-on-kinesis-freestyle-2</id>
    <content type="html"><![CDATA[<p><img src="http://www.kinesis-ergo.com/images/kb820pb-648x204.jpg" title="Kinesis Freestyle 2 with VIP3" ></p>

<p>I recently purchased a <a href="http://www.kinesis-ergo.com/freestyle2.htm">Kinesis Freestyle 2</a>. I usually type in a text editor. I bought it because it is <a href="https://en.wikipedia.org/wiki/Human_factors_and_ergonomics">ergonomic</a>. As my primary editor is the infamous <a href="http://www.gnu.org/s/emacs">Emacs</a>, I&#8217;m wary of contracting the dreaded <a href="http://en.wikipedia.org/wiki/repetitive_strain_injury">RSI</a>. Emacs users <a href="http://www.emacswiki.org/emacs/RepeatedStrainInjury">tend to be susceptible</a> to it. In the months before this, I was conscious of the strain in my fingers and wrist after a long typing session. Disclaimer: I am not a RSI sufferer though.</p>

<!-- more -->


<p>The Freestyle is not my first ergonomic keyboard. My first ergonomic keyboard is the <a href="http://www.microsoft.com/hardware/en-us/p/natural-ergonomic-keyboard-4000">Microsoft Natural 4000</a>. Unfortunately I find the keys are too stiff. My impression is that typing on the Natural keyboard feels like twice the force needed for a Macbook keyboard. Not only did it added more strain, it cuts my typing speed. No complaints with the key layout though. In the end I kept the Natural mouse but ditched the keyboard. I wouldn&#8217;t recommend buying the Microsoft Natural keyboard.</p>

<h2>Getting used to it</h2>

<p>After 2 weeks of using the Kinesis Freestyle, I realised that I don&#8217;t feel the strain in my fingers anymore. Not even in my left <a href="http://en.wikipedia.org/wiki/Little_finger">pinky</a>. That is remarkable. For this benefit alone, it is worth the purchase. I think there are a few factors that contribute to it.</p>

<p>First the activation force is smaller. Compared to the Macbook, the Freestyle feels softer. My fingers don&#8217;t need to strain themselves as much. I won&#8217;t deny that the tactile feel of the keyboard feels better. Second, the split allowed my shoulders to be more relaxed. It made me notice that my shoulder muscles gets slightly tensed up when I&#8217;m using the conventional keyboards. Splitting it allows my hands to be wide apart, which in turn eases my shoulders. Third, the slope allowed me to type at a 15 degree angle. My arm feels relaxed in the angled position. The setup makes your arm and shoulders more relaxed, which released the strain in my fingers and wrists. On the typing noise, it is louder than the typical Macbook keyboard, but less noisy than a mechanical keyboard. It is not so loud that your co-workers will notice.</p>

<h2>Gripes with the layout</h2>

<p><img src="http://www.kinesis-ergo.com/images/freestyle2-mac-layout-800x307.jpg" title="Kinesis Freestyle Mac Layout" ></p>

<p>I took about 2 weeks to get back to my former typing speed. At first I wasn&#8217;t used to the new layout. My biggest gripe is the <strong>B</strong> key. It was found on the left half of the Freestyle keyboard. I&#8217;m used to typing <strong>B</strong> with my right hand. I&#8217;d often try to type the phantom <strong>B</strong> with the right hand. It took some getting used to, but I&#8217;m now typing <strong>B</strong> with my left hand. The position of the <strong>Command</strong> and <strong>Option</strong> key is different too. The <strong>Command</strong> key was directly below <strong>X</strong> and the <strong>Option</strong> key is directly below <strong>Z</strong> on the Macbook. On the Freestyle, it is shifted a little to the left. I&#8217;m using the <strong>Option</strong> and <strong>Command</strong> key for many of my keyboard shortcuts. My hands had to stretch further to the left. The <strong>Escape</strong> key is rather unconventional too. I feel that it was placed too far to the top left. I guess all these can be overcame as I get used to the layout.</p>

<p>There is a whole bunch of keys which I hardly use. The 2 rows of cut, copy, paste keys on the left. And the single row of page up/down. Unfortunately, I cannot attach custom macros to those keys.</p>

<h2>Conclusion</h2>

<p>I don&#8217;t think using the Freestyle significantly improved my typing speed. But my hands and shoulders did feel much better when typing on it. Given that I spend long hours typing almost everyday, it is a worthwhile purchase.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A quiet desktop]]></title>
    <link href="http://liangzan.github.com/blog/blog/2013/04/25/a-quiet-desktop/"/>
    <updated>2013-04-25T05:51:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2013/04/25/a-quiet-desktop</id>
    <content type="html"><![CDATA[<p>Can you work in a noisy room? No. Noise distracts. When you are working, your are mentally juggling multiple objects all at once. Just one slight noise and everything drops. Luckily all the companies I worked at had quiet working places. Quiet working places are usually the norm. It is item number 8 in the famous <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Test</a>. External noise is easy to identify. We even have laws against <a href="http://en.wikipedia.org/wiki/Noise_pollution">noise pollution</a>. Everyone agrees that it is harmful. What I find that we often allow noise to pollute our desktop without second thoughts. What do I mean by noise?</p>

<!-- more -->


<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/growl-notifications.png"></p>

<p>Noise on the desktop is any <a href="http://en.wikipedia.org/wiki/Sensory_cue">visual or audio cues</a> that distracts you. Noise are generated by attention seeking apps. One example of an attention seeking app is <a href="http://growl.info/">Growl</a>. Growl is a centralised notification system for Mac. Notifications come in the form of a translucent box on your top right corner with text. I find it distracting. Ask yourself, how many of those notifications are worthy of your <em>immediate</em> attention? I don&#8217;t need to be informed when Bob came online on Skype, or Itunes is playing Justin Bieber, or when my download has finished. That is too much information. I think Growl notifications are useful and looks good too. It helps you to stay on top of things. But you need to restrict it to essential notifications. I have since removed Growl. It does not seem to hurt my responsiveness.</p>

<p><img class="left" src="https://s3.amazonaws.com/static.liangzan.net/blog/campfire-tab.png"></p>

<p>Another example of attention seeking apps are online group chats like <a href="http://campfirenow.com/">Campfire</a> or <a href="https://www.hipchat.com/">Hipchat</a>. When messages come, a bell goes off, the tab title shows the number of unread messages. Implicitly, it make me feel guilty for not reading everything. The larger the number grew, the worse I felt. I&#8217;d much prefer to hide the unread count, replacing it with a simple asterisk which indicates there is activity since I last read. Sounds should be turned off. In my experiences with group chats, most of the messages are <em>not important</em>. I don&#8217;t need to know them immediately. If everyone is in the same office, I don&#8217;t think it is necessary to use online group chats. Much better to talk in person.</p>

<p><img src="http://farm1.staticflickr.com/142/388879822_f9bc08517a_o.jpg" title="Street with Neon lights. Photo by AndyCunningham." ></p>

<p>The same goes for menu bar applets or shell status bars. Take control of them. Remove audio notifications. Prefer greyscale menu bar icons to colored ones so they fade to the background gracefully. Better still, remove them. Information for the sake of information is counter productive. To have a sense of how noisy your desktop really is, turn on your volume to the max, step away and observe from a distance. Note down which apps are trying to catch your attention by visual or audio cues. Then think, are those information important most of the time? If not, I can safely assure you your life would be more peaceful without them. Less is more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First impressions of Leap Motion]]></title>
    <link href="http://liangzan.github.com/blog/blog/2013/02/06/first-impressions-of-leap-motion/"/>
    <updated>2013-02-06T17:10:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2013/02/06/first-impressions-of-leap-motion</id>
    <content type="html"><![CDATA[<p>For those who don&#8217;t know what <a href="http://www.leapmotion.com">Leap Motion</a> is, take a look at this youtube video.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/_d6KuiuteIA" frameborder="0" allowfullscreen></iframe>


<p>I got the Leap Motion hardware and SDK by participating in their <a href="https://leapmotion.com/developers">developer program</a>. I was the lucky few that was selected. They informed me through email. A few weeks later, the Leap motion device is mailed to me, free of charge. It came in a dull black cardbox box. Within the box lies the device, a cable, and a card bearing a message from the founders.</p>

<!-- more -->


<h2>First impressions of Leap</h2>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/leap-motion-box.jpg" title="Leap Motion box" ></p>

<p>It is very small and light. One side etched the Leap logo. The other lies the sensors. When you power the device, three red bulbs reveal themselves. That is where the magic happens. Powering the device will does nothing, you need to install the software. There is a SDK provided for Mac and Windows platforms. It comes with a set of examples and documentation to help you get started. Once you connect the device up, run the Leap app and you&#8217;ll be ready to go.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/leap-motion-unboxed.jpg" title="Leap Motion unboxed" ></p>

<p>The Leap SDK gives you several debugging tools. There is a visualizer which displays a trace of your fingers as you move.</p>

<iframe src="http://player.vimeo.com/video/57635349" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/57635349">Leap Motion Visualizer</a> from <a href="http://vimeo.com/user14137242">Graham Gaylor</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>

<p>It is backed by a grid, so you can literally trace little grids with your finger. Accuracy is touted as Leap Motion&#8217;s strength. That is no lie. I can easily trace the small grid with my clumsy finger. It is nothing short of amazing. Besides your fingers, Leap traces anything that resembles a stick. I don&#8217;t sense a lag. Even if I move quickly, Leap is able to capture it. I could tell Leap is computationally intensive. My computer fans are always in ovedrive when I use Leap.</p>

<p>You could play with the sample apps. They are mostly simple <em>hello world</em> style apps that shows you how to call the APIs. Sadly, there are no fruit ninja apps for you to play with. The Leap Motion team built an input emulator to interface with games like fruit ninja. They promised to open source it though. The Leap SDK provides bindings for Java, C++, C#, Obj-C, Python and Javascript. I believe more will come. The API itself is fairly primitive. It gives you access to the raw data. You will get data on the position of each pointer, the orientation and the movement. There are no gestures or other abstract APIs.</p>

<h2>Development experience</h2>

<p>Like a kid with a new toy, I was eager to build applications with it. I chose to try the Javascript API first. The Leap SDK runs a web socket server which allows the Javascript bindings to access the data. Usage of the API is boringly simple. It is an infinite loop which gives you a frame every iteration. The frame is a JSON object which contains the data on the pointers.</p>

<p>The <a href="https://github.com/liangzan/leap-demo/tree/master/particles">first leap experiment</a> I did was to replicate Mike Bostock&#8217;s D3.js <a href="http://bl.ocks.org/1062544">particles</a>. I got a trail of particles to follow each pointer.</p>

<p>Gestures naturally come to my mind. The SDK has no provision for gestues yet. I have to recognize it. And that is an <em>Articifial Intelligence</em> problem. I looked for gestures related libraries to build on. And I found the <a href="http://depts.washington.edu/aimgroup/proj/dollar/">$1 unistroke recognizer</a>. They had a Javascript implementation. I used it to recognize gestures in my <a href="https://github.com/liangzan/leap-demo/tree/master/gestures">next leap experiment</a>. It worked. But it has caveats.</p>

<p>A gesture has a start and an end. Leap runs in an infinite loop. I had to define a start and end. In my gesture experiment, I defined 2 states: fist and point. The fist state literally means clenching into a fist. It acts as a blank state which I use to define the end points of the gesture movement. The point state means an extended finger. In that state, movement is captured. While my experiment is able to recognize gestures, it did not do so cleanly. When I change between a clenched fist to a pointing finger, there are some jitters unavoidably. That polluted my gesture shape. It is very hard to form a clean shape. There should be a better way to define the end point of a gesture.</p>

<h2>Conclusion</h2>

<p>As I presented my demo to the local javascript meetup group, everybody was visibly excited by Leap Motion. Leap Motion is an amazing product. Invariably, we wondered what potential applications could be built on Leap Motion. Games are an obvious application. Minority report styled navigation is another. For a long time we have been stuck with the keyboard and mouse. Then touch devices exploded onto the scene. After playing with Leap Motion, I firmly believe it is the dawn of another era of gestures styled devices. I&#8217;m living in exciting times.</p>

<h2>Update</h2>

<p>Follow the discussion on <a href="http://news.ycombinator.com/item?id=5179335">Hacker News</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to learn enough web design to not look scammy]]></title>
    <link href="http://liangzan.github.com/blog/blog/2013/01/07/how-to-learn-enough-web-design-to-not-look-scammy/"/>
    <updated>2013-01-07T16:07:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2013/01/07/how-to-learn-enough-web-design-to-not-look-scammy</id>
    <content type="html"><![CDATA[<p>I am a web developer by trade. I am not a designer. Like most backend engineers, I make things work. I don&#8217;t usually bother with making things pretty. Many people commented that I cannot design. I agree. I never had a penchant for design.</p>

<!-- more -->


<p>Today I have managed to learn enough design that my sites don&#8217;t look scammy. Some evidence at <a href="http://octopressthemes.com">Octopress Themes</a>. A year ago, I never entertained the thought that I can design a half decent looking site. I was always led to believe that I am not a creative. Therefore I should not do design at all. It is a good example of <a href="http://en.wikipedia.org/wiki/Learned_helplessness">learned helplessness</a>. Not being talented means you probably cannot become a top notch designer. It doesn&#8217;t mean you cannot design at all. If I can design half decent looking sites, so can you.</p>

<h2>Plenty of resources</h2>

<p>There are plenty of resources out there on how to learn design. Here are the ones which I find most relevant to engineers learning design.</p>

<h3>Books</h3>

<ul>
<li><a href="http://www.amazon.com/Non-Designers-Design-Book-Robin-Williams/dp/0321193857/ref=sr_1_6?s=books&amp;ie=UTF8&amp;qid=1357551933&amp;sr=1-6">The Non-Designer&#8217;s Design book by Robin Williams</a></li>
<li><a href="http://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/0465067107/">The Design of Everyday Things by Donald Norman</a></li>
<li><a href="http://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1357552162&amp;sr=1-1&amp;keywords=dont+make+me+think">Don&#8217;t make me think by Steve Krug</a></li>
</ul>


<h3>Hacker news discussions</h3>

<ul>
<li><a href="http://news.ycombinator.com/item?id=1768358">Where to learn design</a></li>
<li><a href="http://news.ycombinator.com/item?id=1839022">Visual design for hackers</a></li>
<li><a href="http://news.ycombinator.com/item?id=66863">Best sources to learn design and usability</a></li>
</ul>


<h3>Newsletters</h3>

<ul>
<li><a href="http://seriffed.com/">Seriffed</a></li>
<li><a href="http://sachagreif.com/">Sacha Grief</a></li>
<li><a href="http://www.robertwilliamsdesign.com/newsletter/">Robert Williams</a></li>
</ul>


<h2>Learn by Copying</h2>

<p>My next tip is: copy good designs. Choose a design which you like, and copy it. Copy does not mean cloning. Copying means stealing the ideas and incorporating in your design. Copying may sound dirty but designers in the fashion industry <a href="http://www.npr.org/2012/09/10/160746195/why-knockoffs-are-good-for-the-fashion-industry">does that</a> too. Take a few designs which you like, and improve them.</p>

<h2>Copy from the best</h2>

<p>Which brings me to the next tip. When you copy, copy from the best. If you copy homework from your friends, you copy from the top student correct? Similar logic applies. I often look(<em>steal</em>) for ideas from these sites. You could too.</p>

<h3>Ideas</h3>

<ul>
<li><a href="http://dribbble.com">Dribbble</a></li>
<li><a href="http://www.webcreme.com/">Web Creme</a></li>
<li><a href="http://www.siteinspire.com/">Site Inspire</a></li>
</ul>


<h2>Be proficient in an image editor</h2>

<p>An image editor to a designer is like the piano to a pianist. You cannot do without it. You often have to edit images to fit into the design. Being proficient won&#8217;t make you a good designer. It adds options to you. My suggestion is to pick up either one of these depending on your platform.</p>

<ul>
<li><a href="http://www.adobe.com/products/photoshop.html">Photoshop</a></li>
<li><a href="http://www.pixelmator.com/">Pixelmator</a></li>
<li><a href="http://www.gimp.org">Gimp</a></li>
</ul>


<h2>Do</h2>

<p>My last tip is: do. There is no substitute for doing. The more you do the better you get. I hope my story can inspire you to believe that you can become half decent in design. I am still far from being decent in design though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing your Emacs Eshell prompt]]></title>
    <link href="http://liangzan.github.com/blog/blog/2012/12/12/customizing-your-emacs-eshell-prompt/"/>
    <updated>2012-12-12T05:38:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2012/12/12/customizing-your-emacs-eshell-prompt</id>
    <content type="html"><![CDATA[<p>If you use the shell in Emacs and you are not already using <a href="http://emacswiki.org/emacs/CategoryEshell">eshell</a>, convert to eshell now! Eshell is the best terminal emulator available in Emacs. If you need convincing, please read <a href="http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/">this article from Mastering Emacs</a>. Using <strong>grep</strong> in eshell is the killer feature for me. What the Master Emacs article didn&#8217;t elaborate is how to customize your eshell prompt. I&#8217;m going to share how to add colors and show the Git branch on your eshell prompt. This is how my prompt look like currently.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/eshell-prompt.png" title="Eshell prompt" ></p>

<!-- more -->


<h2>Adding colors</h2>

<p>To add colors we need to change the property of the text. We make use of the <strong>propertize</strong> function. The snippet below changes the string to be green.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">propertize</span> <span class="s">&quot;some-string&quot;</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nf">:foreground</span> <span class="s">&quot;green&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can take a look at the available styles you can apply to text by simply running <strong>M-x list-faces-display</strong>.</p>

<h2>Showing the Git branch name</h2>

<p>To get the current branch name from your Git repository, we make use of the function below. I copied this from <a href="http://www.jimmenard.com/">Jim Mernard&#8217;s</a> emacs <a href="https://github.com/jimm/elisp/blob/master/eshell-customize.el">configuration</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">curr-dir-git-branch-string</span> <span class="p">(</span><span class="nf">pwd</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Returns current git branch as a string, or the empty string if</span>
</span><span class='line'><span class="s">PWD is not in a git repo (or the git command is not found).&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nf">eshell-search-path</span> <span class="s">&quot;git&quot;</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">locate-dominating-file</span> <span class="nv">pwd</span> <span class="s">&quot;.git&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">git-output</span> <span class="p">(</span><span class="nf">shell-command-to-string</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;cd &quot;</span> <span class="nv">pwd</span> <span class="s">&quot; &amp;&amp; git branch | grep &#39;\\*&#39; | sed -e &#39;s/^\\* //&#39;&quot;</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;[&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">length </span><span class="nv">git-output</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">substring </span><span class="nv">git-output</span> <span class="mi">0</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class='line'>                <span class="s">&quot;(no branch)&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="s">&quot;]&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Installing</h2>

<p>I customized Jim&#8217;s code to add colors. The end result look like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">setq</span> <span class="nv">eshell-history-size</span> <span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">setq</span> <span class="nv">eshell-prompt-regexp</span> <span class="s">&quot;^[^#$]*[#$] &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">load </span><span class="s">&quot;em-hist&quot;</span><span class="p">)</span>           <span class="c1">; So the history vars are defined</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">boundp</span> <span class="ss">&#39;eshell-save-history-on-exit</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">setq</span> <span class="nv">eshell-save-history-on-exit</span> <span class="nv">t</span><span class="p">))</span> <span class="c1">; Don&#39;t ask, just save</span>
</span><span class='line'><span class="c1">;(message &quot;eshell-ask-to-save-history is %s&quot; eshell-ask-to-save-history)</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">boundp</span> <span class="ss">&#39;eshell-ask-to-save-history</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">setq</span> <span class="nv">eshell-ask-to-save-history</span> <span class="ss">&#39;always</span><span class="p">))</span> <span class="c1">; For older(?) version</span>
</span><span class='line'><span class="c1">;(message &quot;eshell-ask-to-save-history is %s&quot; eshell-ask-to-save-history)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">eshell/ef</span> <span class="p">(</span><span class="nf">fname-regexp</span> <span class="nv">&amp;rest</span> <span class="nv">dir</span><span class="p">)</span> <span class="p">(</span><span class="nf">ef</span> <span class="nv">fname-regexp</span> <span class="nv">default-directory</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; ---- path manipulation</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">pwd-repl-home</span> <span class="p">(</span><span class="nf">pwd</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">home</span> <span class="p">(</span><span class="nf">expand-file-name</span> <span class="p">(</span><span class="nf">getenv</span> <span class="s">&quot;HOME&quot;</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">home-len</span> <span class="p">(</span><span class="nb">length </span><span class="nv">home</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">and</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">&gt;= </span><span class="p">(</span><span class="nb">length </span><span class="nv">pwd</span><span class="p">)</span> <span class="nv">home-len</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">equal</span> <span class="nv">home</span> <span class="p">(</span><span class="nb">substring </span><span class="nv">pwd</span> <span class="mi">0</span> <span class="nv">home-len</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;~&quot;</span> <span class="p">(</span><span class="nb">substring </span><span class="nv">pwd</span> <span class="nv">home-len</span><span class="p">))</span>
</span><span class='line'>      <span class="nv">pwd</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">curr-dir-git-branch-string</span> <span class="p">(</span><span class="nf">pwd</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Returns current git branch as a string, or the empty string if</span>
</span><span class='line'><span class="s">PWD is not in a git repo (or the git command is not found).&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nf">eshell-search-path</span> <span class="s">&quot;git&quot;</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">locate-dominating-file</span> <span class="nv">pwd</span> <span class="s">&quot;.git&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">git-output</span> <span class="p">(</span><span class="nf">shell-command-to-string</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;cd &quot;</span> <span class="nv">pwd</span> <span class="s">&quot; &amp;&amp; git branch | grep &#39;\\*&#39; | sed -e &#39;s/^\\* //&#39;&quot;</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">propertize</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;[&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">length </span><span class="nv">git-output</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">substring </span><span class="nv">git-output</span> <span class="mi">0</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class='line'>                <span class="s">&quot;(no branch)&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="s">&quot;]&quot;</span><span class="p">)</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nf">:foreground</span> <span class="s">&quot;green&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">setq</span> <span class="nv">eshell-prompt-function</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">concat</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">propertize</span> <span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p-lst</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">length </span><span class="nv">p-lst</span><span class="p">)</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">concat</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">mapconcat</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">elm</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">zerop</span> <span class="p">(</span><span class="nb">length </span><span class="nv">elm</span><span class="p">))</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>                                            <span class="p">(</span><span class="nb">substring </span><span class="nv">elm</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">butlast</span> <span class="nv">p-lst</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                            <span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>                 <span class="s">&quot;/&quot;</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">mapconcat</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">elm</span><span class="p">)</span> <span class="nv">elm</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">last</span> <span class="nv">p-lst</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                            <span class="s">&quot;/&quot;</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">mapconcat</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">elm</span><span class="p">)</span> <span class="nv">elm</span><span class="p">)</span>
</span><span class='line'>                         <span class="nv">p-lst</span>
</span><span class='line'>                         <span class="s">&quot;/&quot;</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">split-string</span> <span class="p">(</span><span class="nf">pwd-repl-home</span> <span class="p">(</span><span class="nf">eshell/pwd</span><span class="p">))</span> <span class="s">&quot;/&quot;</span><span class="p">))</span> <span class="ss">&#39;face</span> <span class="o">`</span><span class="p">(</span><span class="nf">:foreground</span> <span class="s">&quot;yellow&quot;</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nf">curr-dir-git-branch-string</span> <span class="p">(</span><span class="nf">eshell/pwd</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">propertize</span> <span class="s">&quot;# &quot;</span> <span class="ss">&#39;face</span> <span class="ss">&#39;default</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">setq</span> <span class="nv">eshell-highlight-prompt</span> <span class="nv">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To install, I put the code above in a new file called <strong>eshell_customizations.el</strong>. Then I loaded the script from my <strong>init.el</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nb">load </span><span class="s">&quot;~/.emacs.d/scripts/eshell-customizations.el&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart your emacs and your eshell should look better now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First impressions of the Ansible configuration management tool]]></title>
    <link href="http://liangzan.github.com/blog/blog/2012/11/05/first-impressions-of-the-ansible-configuration-management-tool/"/>
    <updated>2012-11-05T06:56:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2012/11/05/first-impressions-of-the-ansible-configuration-management-tool</id>
    <content type="html"><![CDATA[<p>While working at <a href="http://www.action.io">Action.io</a>, we decided to use <a href="http://ansible.cc">Ansible</a> for managing our deployments. Previously we were using <a href="http://www.opscode.com/chef/">Opscode Chef</a>. We felt that Ansible suited our needs better. Let me illustrate why.</p>

<!-- more -->


<h2>What is Ansible?</h2>

<p>Ansible is a <a href="http://en.wikipedia.org/wiki/Configuration_management">configuration management</a> tool. Like Opscode Chef or <a href="http://puppetlabs.com">PuppetLabs Puppet</a>, Ansible helps you to manage the configuration on your servers. Without a configuration tool, system administrators would install, configure and update server software by hand. Configuration management tools help to automate that.</p>

<p>At the start, since all of us at Action.io were fluent in <a href="http://www.ruby-lang.org/">Ruby</a> and Chef, our natural choice was Chef. We written <a href="http://wiki.opscode.com/display/chef/Cookbooks">cookbooks</a> and <a href="http://wiki.opscode.com/display/chef/Recipes">recipes</a>, got hosted Chef running and were deploying with <a href="http://wiki.opscode.com/display/chef/Knife">Knife</a>. Happy days! But something didn&#8217;t feel right.</p>

<h2>Chef did not suit us</h2>

<p>Perhaps I am a Chef noob. I was never convinced on the pull workflow. After an update to the cookbooks on the Chef server, we had to wait for the Chef clients to poll for updates, to <em>pull</em> changes from the Chef server and update itself. It is The Wait that feels wrong. Why do I have to wait? I want my servers to get updated <em>now</em>. Not 5 minutes later. What I did everytime is to ssh in to the servers and run <code>sudo chef-client</code> to make the server pull changes immediately. I asked some of my peers who also use Chef. Remarkably, they did the same too.</p>

<p>If me and my friends did that, it does not mean everyone does that. My point is the pull workflow does not feel intuitive. I&#8217;m not a veteran with 10 years of experience running hundreds of servers. Maybe there is a good reason to adopt a pull workflow. But for a small setup with less than 20 servers, it felt out of place.</p>

<p>Our next pain point is: Chef is resource hungry. Running a chef client process takes up precious memory and CPU cycles. For Action.io&#8217;s case, those memory and CPU cycles could be better utilized for the users. Not waiting for an update that arrives Once In A While.</p>

<h2>Arrives Ansible</h2>

<p>Here is my sales pitch for Ansible. Ansible pushes updates(like <a href="https://github.com/capistrano/capistrano">Capistrano</a>). You need not wait for updates to happen. It cuts total deployment time. Especially in misson critical situations like An Outage. You&#8217;d prefer to be up in 5 minutes rather than 50 where 45 is spent waiting for the Chef client to poll(exaggeration of course). Sold?</p>

<p>Ansible installs <em>nothing</em> on your servers. No idle client that does nothing but sit there and polls every hour. Think of the memory that Nginx could have used for serving requests. How about those CPU cycles that could be available for Postgresql to do indexing? Why keep that lazy bum around? Nginx and Postgresql will harbour resentment over time. Keep your star workers happy. Ansible keeps no such lazy bums. Sold?</p>

<p>Ansible is easy to grasp. Reading an Ansible playbook is like reading your Bash history. Your playbooks are completely written in <a href="www.yaml.org">YAML</a>. YAML comes with less markup noise. It is a wise choice. The choice of using YAML allows Ansible to be language agnostic. Ansible does not need fluency in a particular programming language. Which means the learning curve is low and it is easy to get proficient quickly. Furthermore, the Ansible paradigm is &#8220;I ssh in and run command Foo&#8221;. That is exactly the same as hand building a server. Which means it should be dead easy to grasp. Another Big Plus is you know exactly what is going on. Ansible is running shell commands over ssh. The commands are not hidden under some abstract concept of knifes and puppets and flying saucers. Error messages will be clearer(hint: easy to debug -> less downtime -> more money). Being easy to learn means anybody could learn to deploy(hint: no need to hire a dedicated sys admin -> make your existing engineers work harder -> more money). Sold?</p>

<h2>Being young is not always good</h2>

<p>A sales pitch had to make you believe elephants could fly, wash your laundry and perhaps deploy your server as well. Being that I am not actually doing Sales, I can be honest with Ansible&#8217;s warts. And so the anti-sales pitch. Being a young project Ansible suffers from the common ailments of Poor Documentation and Non Existent Eco System. If I were using Chef, there are usually cookbooks available for common software. Not for Ansible. At Action.io, we hand wrote all of them. The mailing list is still the best chance where you can get your questions answered. Let&#8217;s be fair, it&#8217;s all part of growing pain. The Ansible eco system is not mature yet.</p>

<p>So what do you think of Ansible? Would you use it? Ansible as a tool is mature, but the eco system is not. It wasn&#8217;t hard to hand write our playbooks. Nor did it take much time. A better eco system may bring ready made playbooks. We still have to customise it. To us, it is the other advantages that Ansible brought that made us decide to use it. I hope you are sold.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post mortem of Notifymode]]></title>
    <link href="http://liangzan.github.com/blog/blog/2012/10/15/post-mortem-of-notifymode/"/>
    <updated>2012-10-15T06:31:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2012/10/15/post-mortem-of-notifymode</id>
    <content type="html"><![CDATA[<p>In early 2012, I started Notifymode. Notifymode does application monitoring for <a href="http://nodejs.org">Node.js</a> apps. Notifymode could profile the functions and track CPU and memory usage. It provides a high level overview of how the Node.js app is doing. It was a bootstrapped project. I didn&#8217;t take any money. So why did I choose to build Notifymode?</p>

<!-- more -->


<h2>Motivation behind Notifymode</h2>

<p>I had a Node.js app: <a href="http://smugftp.com">SmugFTP</a>. I had performance problems. There were few tools to help me diagnose where the problem was. The best I could find was the V8 profiler. V8 profiler gave me a <a href="https://gist.github.com/833370">profiled report</a> which made no sense to me. I wanted a tool like <a href="http://newrelic.com">New Relic</a> for my Node.js apps. New Relic did not support Node.js. Why not build it for fun and profit?</p>

<h2>I was <em>sure</em> it would be useful</h2>

<p>How could analytics not be useful? How could Node.js not be gaining traction? In fact Node.js is gaining traction at a frightening pace. <a href="http://google.com/trends">Google Trends</a> shows the number of searches for Node.js outpacing <a href="http://rubyonrails.org">Rails</a>.</p>

<script type="text/javascript" src="http://www.google.com.sg/trends/embed.js?hl=en-US&q=node.js,+ruby+on+rails&cmpt=q&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=500&h=330"></script>


<p>I&#8217;m sure there would be more Node.js apps released to production in time to come. Analytics for an up-and-coming platform? How could this idea be wrong?</p>

<p>I was confident that I am right. I don&#8217;t need to do any of that <a href="http://steveblank.com/category/customer-development/">customer development mumbo jumbo</a>. I should just build it. For the next 3 months, I poured time and energy into building Notifymode.</p>

<p>You just need to add one line to your existing Node.js module to hook up to Notifymode&#8217;s agent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">profiler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;notifymode-client&#39;</span><span class="p">).</span><span class="nx">Profiler</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// one line here to hook up</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">profiledSocketIO</span> <span class="o">=</span> <span class="nx">profiler</span><span class="p">.</span><span class="nx">profile</span><span class="p">(</span><span class="nx">io</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The agent pushes data to the server. Notifymode then shows the time each function took, memory and cpu load.</p>

<h2>Build it and they will come</h2>

<p>I submitted to <a href="http://news.ycombinator.com">Hacker News</a> and <a href="http://reddit.com">Reddit</a>, though it did not make either&#8217;s front page. I tweeted about it. My friends retweeted about it. I gave talks about it at the local Javascript meetup not once, but a few times. I wrote blog posts about using it with <a href="http://socket.io">Socket.io</a> and <a href="http://expressjs.com">Express</a>.</p>

<p>The first few months was bad. I thought Notifymode was useful. I&#8217;m sure once people know about it, they will sign up. That was my first conjecture. So I started a <a href="http://node.jsreadme.com">technical blog</a> on Node.js. Ideally that will funnel users in. In the process I realized putting out quality articles regularly demands significant effort. Blogging is very hard. I could not capture enough organic traffic. It was discouraging.</p>

<p>My next conjecture was: Notifymode is too general. Users probably wanted a specific agent which can push out app specific information. For example, Express users want to know the request time. Running times for individual functions is too granular to be useful. So I wrote customized agents for Express. I released it, blogged about it, and talked about it at the local Javascript meetup. Submitted to Hacker News and Reddit, and did not make either&#8217;s front page again. And I waited for the flood of users to wash me away.</p>

<p>I kept Notifymode running for 6 months. At the last count, Notifymode had 20++ users. Some of them were spam bots(I did not put up a captcha). Some of them were friends. I couldn&#8217;t bear to count how many real users there were. It was discouraging.</p>

<h2>Experience is merely the name men gave to their mistakes</h2>

<blockquote><p>Tell me again was it love at first sight.<br/>When I walked by and you caught my eye.<br/>Didn&#8217;t you know love could shine this bright?</p><footer><strong>Owl City</strong> <cite><a href='http://en.wikipedia.org/wiki/Owl_City'>en.wikipedia.org/wiki/Owl_City/&hellip;</a></cite></footer></blockquote>


<p><img class="right" src="http://farm4.staticflickr.com/3254/2408535634_f9953a5dbf_m.jpg" title="By Millzero Photography" ></p>

<p>Do you believe in love at first sight? We fall so deep in love with our ideas that we have this unwavering faith that it will work out. Despite numerous warnings from <a href="http://www.startuplessonslearned.com">Dear Aunt Agony</a> that you should go out on a <a href="http://theleanstartup.com">few dates</a> first, you insist that this is The Idea that you are going to marry. Well if you don&#8217;t listen to Auntie Agony, you are most likely to end up in agony. Like me.</p>

<p>I was lazy to arrange first dates with my Idea. We got married too hastily. Now I&#8217;m divorced. At least I don&#8217;t have to pay alimony. Don&#8217;t be like me. Here are some <a href="http://blog.asmartbear.com/">links</a> for <a href="http://www.bothsidesofthetable.com/">marriage</a> <a href="http://www.avc.com/a_vc/">advice</a>.</p>

<p>Another thing I realized is: marketing is harder than coding. We geeks tend to view a product as 90% coding. The other 10% is the mumbo jumbo <a href="http://en.wikipedia.org/wiki/Search_engine_optimization">marketing</a> <a href="http://en.wikipedia.org/wiki/Search_engine_marketing">stuff</a>. In reality, coding is the 10% while the other mumbo jumbo stuff takes 90%. Why? Coding yet another <a href="http://pinterest.com">Pinterest</a> clone is easy. You know if you write this code in that logic, it will work. Getting 100 users? Where do you start finding them? It is hard because it is not definite. We geeks tend to dismiss anything non-intellectually stimulating as easy. Marketing, though technically easy, in reality is a lot of grunt work. No matter how useful your product is, nobody is going to use it if they have not heard of it. Notifymode taught me that I should have put in <a href="http://www.kalzumeus.com/2009/12/31/engineering-your-way-to-marketing-success/">more effort on marketing</a> early on.</p>

<p>Granted, I&#8217;ve read this advice so many times from other <a href="http://blog.asmartbear.com/quotes-startup-founders.html">experienced</a> <a href="http://brooklynhacker.com/post/29901112213/what-a-hacker-learns-after-a-year-in-marketing">people</a>. Why do people still make the same mistakes? It&#8217;s like asking <a href="en.wikipedia.org/wiki/Marco_Polo">Marco Polo</a>, &#8220;How does Beijing looked like?&#8221;. Marco Polo could tell you stories about festivals or paint you nice pictures of the palace. It is an approximation. You have to experience the real thing to get it.</p>

<h2>You&#8217;re supposed to fail sometimes</h2>

<p>At least I tried. I picked up a host <a href="http://www.opscode.com/chef/">of</a> <a href="http://backbonejs.org/">technologies</a> along the way. I made mistakes, and I learned. The only thing which I thought I did right was not to seek funding. I&#8217;m not sure if I closed Notifymode too early. Could things have turned out better if I persisted? You never know.</p>
]]></content>
  </entry>
  
</feed>
