<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Liang Zan - Blog]]></title>
  <link href="http://liangzan.github.com/blog/atom.xml" rel="self"/>
  <link href="http://liangzan.github.com/blog/"/>
  <updated>2017-03-02T07:26:40+08:00</updated>
  <id>http://liangzan.github.com/blog/</id>
  <author>
    <name><![CDATA[Wong Liang Zan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Communication skills > Technical skills]]></title>
    <link href="http://liangzan.github.com/blog/blog/2017/02/19/communication-skills-%3E-technical-skills/"/>
    <updated>2017-02-19T11:38:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2017/02/19/communication-skills->-technical-skills</id>
    <content type="html"><![CDATA[<p>Speaking or writing, is something I thought was basic, something anyone with a basic education can do. I felt that I was done with honing my language skills after I&#8217;ve left school. If the school thinks it was good enough to graduate, it was good enough.</p>

<!-- more -->


<p>Early in my career, I was more interested in building my technical skills. Companies would ask if you knew X language, mastered the Y framework or wrote apps that did Z. Those skills were measurable. Either you wrote something with it or you didn&#8217;t. It is much harder to measure communication skills.</p>

<p>Communication is the act of transferring information to another person. There are large variance in effectiveness. Imagine you have this fantastic idea of <strong>Uber for Sailing boats</strong> in absolute clarity in your head. You want to pitch this idea to a group of tourists, hoping they would try sailing. Communication is like drawing a mental picture of what you see in another person&#8217;s head. A skillful communicator would paint something like this in anothers mind:</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Rembrandt_Christ_in_the_Storm_on_the_Lake_of_Galilee.jpg/482px-Rembrandt_Christ_in_the_Storm_on_the_Lake_of_Galilee.jpg" title="Rembrandt's Church in the store on the lake of Galilee" ></p>

<p>While an average one may only let the tourists think of this:</p>

<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/6407942619_fe539a1580_m.jpg"></p>

<p>Your writing bridges the gap to your thoughts. The better you are, the more details they see, the easier they can understand you.</p>

<p>The technical world is awash with difficult concepts that needs better explanations. Take for example the <code>RAM</code>, how do you explain that to a five year old? I had difficulty understanding it when I was in my teens. My teachers calls it the <code>memory</code>. The word <code>memory</code> had connotations with storing information, which I naturally associated with our own memory. So what was the difference between the hard disks and the memory? Both store information correct? Why have two in a computer? This lingering question was never cleared up until after I wrote my first programs years later. The ability to pare down a foreign concept to something digestible is invaluable.</p>

<h2>Brevity in code and in documentation</h2>

<p>There are bad technical writing everywhere. The biggest problem is they are often too brief. Preference for brevity in code has diffused into documentation. Let&#8217;s take a look at how the official Scala docs attempts to explain <a href="http://docs.scala-lang.org/tutorials/tour/currying.html">currying</a>:</p>

<blockquote><p>Methods may define multiple parameter lists. When a method is called with a fewer number of parameter lists, then this will yield a function taking the missing parameter lists as its arguments.</p></blockquote>


<p>The definition is correct. The example demonstrates its usage. But do you <em>understand</em> when to use currying? Code should be brief as you are writing for the computer. But documentation are written for humans. Authors should strive to explain not only the how, but also why and when to use it. More horrors to come.</p>

<h2>Jargon-filled wishy washy</h2>

<p>From <a href="https://www.thoughtworks.com/radar">thoughtworks radar</a>:</p>

<blockquote><p>The microservices style of architecture highlights rising abstractions in the developer world because of containerization and the emphasis on low coupling, offering a high level of operational isolation. Developers can think of a container as a self-contained process and the PaaS as the common deployment target, using the microservices architecture as the common style. Decoupling the architecture allows the same for teams, cutting down on coordination cost among silos. Its attractiveness to both developers and DevOps has made this the de facto standard for new development in organizations.</p></blockquote>


<p>Do you know what the author is trying to say? Let me attempt to simplify it.</p>

<blockquote><p>Containers and Microservice complements each other naturally, yielding advantages. Low-coupling helps your infrastructure become more resilient. In the event of failure, the failure is isolated and does not bring down the entire infratructure. Being isolated allows teams to work independently, cutting down wasted time coordinating deployments. Its advantages has made it the standard for new projects in companies.</p></blockquote>


<p>Start with the topic sentence and cut down on the jargon. Your readers will thank you for it. I learned that from <em>Style</em>. Similar to <a href="https://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758">good user interfaces</a>, clear writing don&#8217;t make the user think.</p>

<h2>The mythical self-documenting code</h2>

<p>Every developer I met likes to write APIs but hates to write documentation. They will spend herculean effort, meticulously designing an intuitive RESTFUL API that scales, but they will put in the least amount of effort necessary to write documentation for it. Even resorting to <a href="http://swagger.io/">auto-generating documentation</a>. They would claim their API is so well designed, the endpoints and parameters so well named, that it is self-documented.</p>

<p>Have you heard of Haskell?</p>

<p>I was looking for a XML library. I found one and wanted to learn how to use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fromContent</span> <span class="ow">::</span> <span class="kt">Content</span> <span class="ow">-&gt;</span> <span class="kt">Cursor</span> <span class="kt">Source</span>
</span><span class='line'>
</span><span class='line'><span class="kt">A</span> <span class="n">cursor</span> <span class="n">for</span> <span class="n">the</span> <span class="n">given</span> <span class="n">content</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes I&#8217;m lucky - there is one sentence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fromTag</span> <span class="ow">::</span> <span class="kt">Tag</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Content</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Element</span> <span class="kt">Source</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most times I get a type signature.</p>

<p>Haskellers would often argue that the signature is good enough. Do you believe that, or do you think it is just excuses made to hide their disdain for writing documentation? Granted, this malady is widespread across all communities, but Haskell is in a plague that is.</p>

<p>Inevitably when emails start appearing asking what does that endpoint do, what does that parameter mean, you will realise that the time spent answering those emails could be better spent writing documentation in the first place. Perhaps it is because that employers look first for technical skills, and second on how well you communicate, that communication became a second citizen.</p>

<h2>Becoming the 10x multiplier</h2>

<p>If you are good at communication, you naturally become a 10x multiplier of others. It is more valuable than being <a href="http://antirez.com/news/112">the mythical 10x engineer</a>. It is a skill that should be valued, which sadly I don&#8217;t see. Things like onboarding new engineers to a new codebase, technical support overheads, all these go away with someone in your team who is a good teacher and patient enough to write. It is not hard to understand why as communication skill is impossible to quantify. Engineers when given a choice to work on their side projects or writing, would gravitate towards coding. It is what brings them to this profession. That is why we must insist that good engineers must not only build well, they must also communicate well.</p>

<p>How do you be better? Like every skill, you practice. Writing and speaking are but conduits to your thoughts. <a href="https://www.goodreads.com/">Read</a> voraciously, read widely, and think for yourself if what they say is correct. For writing, I recommend <a href="https://www.amazon.com/Style-Basics-Clarity-Grace-5th/dp/0321953304">Style: The Basics of Clarity and Grace </a> by Joseph Williams. This book distils the process of writing well into easy to understand steps. Compared to <a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548">On Writing Well</a>, <em>Style</em> is better. The easy way is to dish out rule-of-thumbs, but he did not. There is a widely held misconception that passive voice is bad. In the right context, the sentence flows better with the passive voice. <em>Style</em> shows you that. You should read both books nonetheless.</p>

<p>I usually write on Emacs, and there are tools which I use and would recommend. I use <a href="https://www.gnu.org/software/ispell/ispell.html">ispell</a> to check my spelling. I use the <a href="https://github.com/bnbeckwith/writegood-mode">writegood mode</a> to catch passive voices and weasel words. There are readability tests like <a href="https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests">Flesch-Kincaid</a> included in writegood mode which scores your writing. I also use <a href="http://www.thesaurus.com/">thesaurus.com</a> to find the exact words for conveying my thoughts.</p>

<p>To hone your speaking skills, practice. Find a <a href="https://www.toastmasters.org/">Toastmasters</a> chapter nearby, attend it and seek chances to speak. Toastmasters have impromptu sessions where you are given a topic to speak on the spot. Those are great exercises for thinking on your feet. In less than 10 sessions, you will lose the fear of public speaking. What is most valuable is you get feedback from others after every session.</p>

<p>There is this verse from <a href="https://en.wikipedia.org/wiki/Tao_Te_Ching">Tao Te Ching</a>:</p>

<blockquote><p>知不知，尚矣；不知知，病也</p></blockquote>


<p>Which means there are knowledge you know you don&#8217;t know(like I know I don&#8217;t know nuclear physics), and knowledge you don&#8217;t know you don&#8217;t know(like that missing breakthrough for robotics, if it exists). We should strive to know what we don&#8217;t know, because it makes you aware of how little you know, and so you will find the reason to keep learning. I certainly hope I have planted enough seeds of doubt in your mind, enough to question if your communication skills is <em>good enough</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being an early employee at startup that exited]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/12/30/being-an-early-employee-at-startup-that-exited/"/>
    <updated>2016-12-30T20:22:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/12/30/being-an-early-employee-at-startup-that-exited</id>
    <content type="html"><![CDATA[<p>I am one of the early employees at Dropsuite, previously known as Dropmysite. Today, I was informed that <a href="https://www.google.com/finance?q=ASX%3ADSE&amp;ei=YOl6WPjdJ8XEuATl-YHwCA">Dropsuite</a> has IPOed in the Australian Stock Exchange. Technically, it is a <a href="https://en.wikipedia.org/wiki/Reverse_takeover">reverse IPO</a>. The whole process took one year. The Australian Stock Exchange, or Australian investors, is known to welcome technology companies, which is why local technology companies choose to list there. Another local example is <a href="http://mig.me/home">mig.me</a>.</p>

<p>It&#8217;s rare to have worked in a startup that exited. Rarer still, in Singapore. I&#8217;ve worked with 6 startups where only 2 of them exited. One(Dropsuite) IPOed, the other(Courex) got acquired. The rest closed down when the money ran out. If you are considering making a move to a startup, you can use my experience as a data point.</p>

<!-- more -->


<h2>Financially, is it worth the move?</h2>

<p>Most startups will offer below market salary and make it up using stock options. Stock options gives you the right to buy X number of stock of the company at X price at X time. Usually you only receive stock options after you&#8217;ve worked after a year or more. Every month, you continue to receive options, until the your allotment runs out. As an early employee, you share in the ownership of the company via owning the options. You partake in shaping the future of the company.</p>

<p>I was one of the early employees. I wasn&#8217;t senior management, but I was in Engineering as one of the lead engineers, leading one of the key products: Dropmyemail. There were about 10 people when I joined. At that time, we were still using a shared office, and the CEO was one table across me.</p>

<p>My options are only a few month&#8217;s worth of salary at the current price. Considering I earned a good chunk of the option pool, this shows that unless you are one of the founders or the investors, you won&#8217;t get rich through stock options.</p>

<h2>Is it worth it at all?</h2>

<p>It depends on which stage you are at your career. If you are young, and weighing between a startup or a corporation, go with the startup. You will learn how to make do with less resources, learn how other functions of the business worked, more importantly learn how to get things done. That experience is priceless and will prove an asset in your later years. If you are not young anymore, either start a company as a founder, or join as the senior management. Otherwise the opportunity cost does not justify the move.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running an ecommerce logistics business is hard]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/12/24/running-an-ecommerce-logistics-business-is-hard/"/>
    <updated>2016-12-24T06:05:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/12/24/running-an-ecommerce-logistics-business-is-hard</id>
    <content type="html"><![CDATA[<p>I came into the logistics industry knowing nothing about it. Along the way I&#8217;ve witnessed competitors going bust(Zyllem), new entrants, competitors switching from logistics to technology(Anchanto), and more. It is a hyper competitive industry. I hope to offer an insider view of the industry, to show why it is so challenging, which hopefully will discourage new entrants, in turn making my job easier.</p>

<!-- more -->


<h2>Challenge 1: Consistency</h2>

<p>It is not how well you do yesterday, but how well you do every day that matters. Consistency is what separates the wheat from the chaff. All logistics companies can perform one delivery successfully on a single day. But to do it at scale, to do it consistently everyday, over a sustained period of time, is very difficult. Customers are paying precisely for that - reliability.</p>

<p>In technology, your product or service is delivered over a controlled environment. For machines, consistency is a natural state. You can change software at will, or expect results to always be the same, barring the same inputs. Not logistics. Where do you find a willing and able person to deliver a parcel? Finding one is trivial, how do you find people for one thousand, ten thousand, one hundred thousand parcels? How do you ensure that the person would deliver the parcel punctually? How do you know the person will perform the deliveries? What happens when the delivery person don&#8217;t turn up? Can you imagine your database server telling you one morning that he don&#8217;t feel like working that day? There are many human variables that can ruin a delivery. Many uncontrollable. As long as last mile deliveries are done by people, there will be that element of uncertainty.</p>

<p>Logistics needs people to perform repetitive tasks consistently over a sustained period. People are not machines. It is a constant battle to make people perform like machines. Eventually it wears you out mentally. That is why companies give up, and transit from a logistics company to a technology company, providing software for other logistics companies.</p>

<h2>Challenge 2: Coping with surges</h2>

<p>Singles day on November 11 is a online shopping day created out of nothing by Alibaba. On that day, we saw sales double or triple. Then there is Black Friday, double twelve, etc. Such is the might of marketing, that they can conjure record breaking sales on any day they choose. Digitally there is no problem coping - just order more servers. Machines don&#8217;t sleep, don&#8217;t complain of overtime and they don&#8217;t quit.</p>

<p>Assuming the sellers stocked up properly, how do you get the product into the hands of the buyer? How do you double your capacity just for that one day? Wait, this is a one day phenomenon and after that all the capacity we built up is going to be thrown away? Worse, do you believe sellers will pay more for delivery during surges? No. They will also insist that delivery standards remain as fast as usual. Because for consumers, it is common to cancel if they don&#8217;t receive their parcels within 2-3 days. When sales are lost due to cancellations, it is logical to shift the blame to the logistics company who cannot fulfill their orders in time. That is why Alibaba invested so heavily in logistics.</p>

<p>Let&#8217;s simplify the problem. Delivering at its current state(before self-driving cars that is), depends on finding three things: a willing person, a transport, or better - a willing person with his own transport.</p>

<h2>Challenge 3: Finance</h2>

<p>Let&#8217;s look at the problem of transport. Scaling transportation assets is simple - buy more vehicles. You buy enough to cope during the high season. Don&#8217;t forget, those vehicle assets are going to be idling during the low season. Depreciation will be glaring at you on your balance sheet. Alright, since it is short term, let&#8217;s rent. Unfortunately, short term rental are more expensive. Costs associated with fixed fleets can spiral out of control very easily. Do you have the money to be in the game? Don&#8217;t forget the margin for logistics is razor thin. Do you even make money after all these investments?</p>

<h2>Challenge 4: People</h2>

<p>Next, the problem of people. Where do you find the people to drive those vehicles? Let&#8217;s put up job ads. To cope with surges, we have to ramp up way before it comes. In practice, you build up your pool of inactive drivers, and call them up during surges. People can be found. The problem with people is not in finding them, but managing them. There are numerous people problems. People not showing up, which creates urgent reschedules. People stealing money collected. People stealing parcels. People being lazy, and not finishing their load. Worse, if they are driving company vehicles, there are even more problems. You have to foot for their petrol when they use the vehicle for personal use(of course they won&#8217;t admit). When there are accidents, you have to pay for fixing the damage. When there are traffic violations, you pay the fines. They won&#8217;t go away. As long as people are part of the equation, you have to deal with such problems. Are you sure you want to deal with such problems every day?</p>

<h2>Challenge 4: Competition</h2>

<p>Last mile delivery is something that anybody can perform. It is a commodity with little differentiation. There are perfect substitutes everywhere. There will always be the price pressure downwards. Margins are razor thin. It is a hyper competitive industry. Are you sure you want to enter this market, given much better alternatives available?</p>

<p>Of course I&#8217;m simplifying the picture. Even for a simple service like delivering, there are differentiators. Certain customers will want finer tracking as their parcels are high value items. If you have invested in technology, you win. Certain customers prefer API integration when creating orders and updating of tracking statuses. If you invested to build the technology, you win. Or if you can perform the delivery faster, at the same price, you win.</p>

<p>It is not impossible to build a thriving ecommerce logistics business, but it is difficult. From the outside, it looks antiquated, inefficient, and ripe for a rethink of the current obsolete ways. That is true 2-3 years ago. Now the landscape is different. New entrants with technology focus came, and has brought the state of logistics to a different level. It has advanced. The market should be consolidating in the next couple of years. I hope I have done my part in dispelling any thought of entering the logistics industry. There are numerous ways to make money, please don&#8217;t choose logistics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should you learn more programming languages?]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/11/13/should-you-learn-more-programming-languages/"/>
    <updated>2016-11-13T15:49:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/11/13/should-you-learn-more-programming-languages</id>
    <content type="html"><![CDATA[<p>In the book <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1479025939&amp;sr=8-1&amp;keywords=pragmatic+programmer">Pragmatic Programmers</a>, the authors made a sensible recommendation: learn a new programming language every year. Each new programming language is a new perspective of solving problems. Adding more under your toolbox helps you gain different perspectives. It sharpens your technical judgment. But is it the best use of your time?</p>

<!-- more -->


<p>Our time is limited. We can only learn a limited amount of things. I feel that we should not be learning any new programming language every year. It is far better to learn a programming language from a different family every year. The more different they are, the better. One should aim to master an object-oriented language such as Java or C#, a dynamic scripting language such as Python, Javascript or Ruby, and a functional language, like Haskell, Scala or F#. You can&#8217;t go wrong with C or Golang either.</p>

<p>Once you have mastered the few common families, adding more and more languages marginally adds to your technical capabilities. Knowing one more way of reading a CSV file does not add much value to you.  On the contrary, I feel that one should master other areas in computer science once you have those languages in your toolbox. Areas like machine learning, computer vision and security. These multiplies your capabilities. Machine learning allows you to solve non-linear problems. Security gives a mindset of how to break things; helping you to build your product correctly from the start.</p>

<p>Definitely, learning is good. There are a lot of things I want to learn. Knowing that we only have limited time, means that we have to say no more often than not. My opinion is one should not invest time in learning more programming languages once you have mastered a few from different paradigm families. Instead, one should venture into other areas of computer science. Do share if you think otherwise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deliberate Constraints]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/10/16/deliberate-constraints/"/>
    <updated>2016-10-16T15:36:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/10/16/deliberate-constraints</id>
    <content type="html"><![CDATA[<p>Two weeks ago, we removed the television in the house. The television, one of the staple appliance in every family where planners assumed that it was present in every house. It was the center of the living room. My children was spending too much time on the television for their parent&#8217;s liking. It has been 2 weeks. In the past during meal times, I see two zombies with eyes transfixed on the television; now they play with each other. Does having more <em>things</em>, means we lead a better quality of life?</p>

<!-- more -->


<p>My current <a href="https://www.courex.com.sg/">employer</a> is a bootstrapped company. It has never seen copious amounts of money. Therefore every decision was made with sustainability in mind. Rule number 1: Don&#8217;t lose money. Without money, the company was forced to do things differently.</p>

<p>To give the reader some context, one of the things we do is <a href="https://en.wikipedia.org/wiki/Last_mile_(transportation">last mile delivery</a>. We used to own a fleet of vehicles and hired full time drivers. Surely that must work because that was what everyone did - We thought. It didn&#8217;t. Owning a vehicle and having full time drivers on payroll was expensive. We didn&#8217;t have the money. We never had enough capacity to cater for the high season, and had vehicles idling during low season. We were forced to switch to the <a href="https://en.wikipedia.org/wiki/Crowdsourcing">crowd sourced</a> model. If we had the money, we would have bought more vehicles. We often wonder, was having no money the thing that saved us?</p>

<p><a href="https://en.wikipedia.org/wiki/Brunei">Brunei</a>, a small country, but blessed with plentiful oil resources. There is no income tax, free education and cushy jobs awaiting in the government. Hard work is optional. When oil prices began to tumble, <a href="http://www.economist.com/news/asia/21661040-autocratic-sultanate-turns-more-devout-oil-money-declines-all-pray-and-no-work">Brunei&#8217;s GDP contracted</a>. Her oil resources are estimated to last for another 24 years. More than half of her economy is linked to oil. When the oil tap dries, I wonder what would happen. Not far away from Brunei, lies another small <a href="https://en.wikipedia.org/wiki/Singapore">country</a>, cursed with no natural resources. When they went independent, even they themselves thought they couldn&#8217;t make it. Having no resources made them do things differently. I&#8217;m sure Brunei must have thought: was the oil a blessing or a curse?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaching the great firewall of china]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/20/breaching-the-great-firewall-of-china/"/>
    <updated>2016-09-20T06:15:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/20/breaching-the-great-firewall-of-china</id>
    <content type="html"><![CDATA[<p>It has been some time since I stepped into China. The great firewall has since advanced. This is a short guide to how to breach the <a href="https://en.wikipedia.org/wiki/Great_Firewall">great firewall</a> meant for the technically inclined. This guide is accurate as of 2016.</p>

<!-- more -->


<h2>Use OpenConnect</h2>

<p>In short, <a href="http://www.infradead.org/ocserv/index.html">OpenConnect</a> works. I&#8217;ve tried OpenVPN and ShadowSocks. Only OpenConnect works.</p>

<p>I used an open source project, <a href="https://github.com/jlund/streisand">Streisand</a> to set it up. Streisand needs a server to set up from. Any of the major cloud providers or any webhost providing Ubuntu 16.04 server will do. I used <a href="https://www.vultr.com/">Vultr</a>.</p>

<p>Streisand runs on <a href="https://www.ansible.com/">Ansible</a>, which I&#8217;m familiar with. First, you need to <code>git clone</code> the project to your local machine. I updated the IP address under the <strong>inventory</strong> file of the Streisand project to my Vultr server. Next, run the script. It took about 20 minutes for it to complete.</p>

<p>Once completed, a folder of HTML documents is generated on the local machine. The documents outlines the steps to connect to the remote server using the various protocols. The instructions were clear, and even included links to the binaries. Each document is unique to the server. The certs, passwords are all unique to the server. Most importantly, it worked. I was able to access Google, and the various blocked sites from China.</p>

<p>I hope this helps. For the non-technically inclined, unfortunately I wasn&#8217;t able to find a company that provides OpenConnect commercially. Perhaps this would get better in future. I&#8217;m sure there is a market for such a service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everday XPath - Operators]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-operators/"/>
    <updated>2016-09-11T06:28:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-operators</id>
    <content type="html"><![CDATA[<p>This blog post is part of a series on XPath. The content comes from my ebook <a href="http://www.everydayxpath.com">EverydayXPath</a>. Part of the content from the book will be released to the public as blog posts. In this post, we explain what XPath does. We disect the components of an XPath expression. And why the context is the key to forming the expression.</p>

<!-- more -->


<h2>Operators</h2>

<p>Operators are special characters that has special meaning in a XPath expression.</p>

<ul>
<li><strong>Child</strong> <code>/</code>: Selects the children of the current context. When used at the beginning of the expression, it starts from the root node.</li>
<li><strong>Recursive descent</strong> <code>//</code>: Searches the document, descending from the current context. When used at the beginning of the expression, it searches the entire document from the root node.</li>
<li><strong>Dot</strong> <code>.</code>: Selects the current context. By default it takes the root node as the current context.</li>
<li><strong>Double dot</strong> <code>..</code>: Selects the parent of the current context.</li>
<li><strong>Wildcard</strong> <code>*</code>: Selecta all nodes from the current context.</li>
<li><strong>Attribute</strong> <code>@</code>: Selects the node with the attribute and returns the attribute.</li>
<li><strong>Attribute wildcard</strong> <code>@*</code>: Selects nodes with any attributes and returns the attributes.</li>
<li><strong>Round brackets</strong> <code>()</code>: Expressions within round brackets takes precedence in the evaluation order.</li>
<li><strong>Square brackets</strong> <code>[]</code>: Used both as a subscript operator and to encapsulate a filter expression.</li>
<li><strong>Addition</strong> <code>+</code>: Performs addition.</li>
<li><strong>Subtraction</strong> <code>-</code>: Performs subtraction.</li>
<li><strong>Division</strong> <code>div</code>: Performs division.</li>
<li><strong>Multiplication</strong> <code>*</code>: Performs multiplication.</li>
<li><strong>Modulo</strong> <code>mod</code>: Performs modulo</li>
</ul>


<p>For the following examples, we would use the below as the reference document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Child operator <code>/</code></h3>

<p>The child operator selects the children of the current context. When used at the beginning of the expression, it starts from the root node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the <code>table</code> node starting from the root.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the <code>td</code> nodes who are children of <code>tr</code> nodes who are children of the <code>table</code> node. Notice that it does not select the <code>td</code> nodes in the inner <code>table</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;3&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;4&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span> <span class="nt">&lt;5&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Recursive descent <code>//</code></h3>

<p>The recursive descent operator searches the document, descending from the current context. When used at the beginning of the expression, it searches the entire document from the root node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the <code>td</code> nodes. Notice that it selects all the <code>td</code> nodes regardless of their parents.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;3&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;4&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span> <span class="nt">&lt;5&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>&#39;
</span><span class='line'><span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;6&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;7&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td//td
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all <code>td</code> nodes descending from the context of the <code>td</code> node of the root <code>table</code>. Notice that the first level <code>td</code> nodes are not selected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dot operator <code>.</code></h3>

<p>The dot operator selects the current context. By default it takes the root node as the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td[.=&quot;Bravo&quot;]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the <code>td</code> node whose value is <code>Bravo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Double dot operator <code>..</code></h3>

<p>The double dot operator selects the parent of the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td/..
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the parent node of the <code>td</code> nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;4&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;5&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wildcard operator <code>*</code></h3>

<p>The wildcard operator selects all nodes from the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td/table/*/td
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all <code>td</code> nodes from the inner <code>table</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attribute operator <code>@</code></h3>

<p>The attribute operator selects the node with the attribute and returns the attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//table/@style
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the <code>table</code> with the <code>style</code> attribute and returns the <code>style</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>style=&quot;margin: 12px&quot;
</span></code></pre></td></tr></table></div></figure>


<h3>Attribute wildcard operator <code>@*</code></h3>

<p>The attribute wildcard operator selects nodes with any attributes and returns the attributes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//@*
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the attributes found in any of the nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class=&quot;active&quot; <span class="nt">&lt;1&gt;</span>
</span><span class='line'>style=&quot;margin: 12px&quot; <span class="nt">&lt;2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Round brackets operator <code>()</code></h3>

<p>Expressions within round brackets takes precedence in the evaluation order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(//@*)[1]
</span></code></pre></td></tr></table></div></figure>


<p>The expression within the round brackets is evaluated first, and the first result is returned by the subscript operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class=&quot;active&quot;
</span></code></pre></td></tr></table></div></figure>


<h3>Square brackets operator <code>[]</code></h3>

<p>Square brackets are either used as a subscript operator or to encapsulate a filter expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(//td)[2]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the second <code>td</code> node from the results of the expression encapsulated in the round brackets operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another example as a subscript operator</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr[2]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the second <code>tr</code> node which is a child of the <code>table</code> node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following example shows the square brackets operator encapsulating a filter expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(//td)[last()]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the last node from the results of the expression in the round brackets operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another example of encapsulating a filter expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td[table]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the <code>td</code> node which contains a <code>table</code> node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Arithmetic operators <code>+ - * div mod</code></h3>

<p>The arithmetic operators evaluates expressions to return numerical results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>count(//td) + count(//table)
</span></code></pre></td></tr></table></div></figure>


<p>The <code>count</code> function returns the number of nodes returned from evaluating the expression. There are 7 <code>td</code> nodes and 2 <code>table</code> nodes which when added, returns 9.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>9.0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everday XPath - Node Test]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-node-test/"/>
    <updated>2016-09-11T06:11:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-node-test</id>
    <content type="html"><![CDATA[<p>This blog post is part of a series on XPath. The content comes from my ebook <a href="http://www.everydayxpath.com">EverydayXPath</a>. Part of the content from the book will be released to the public as blog posts. In this post, we learn about the only mandatory part of the XPath expression: Node Test.</p>

<!-- more -->


<h2>Node Test</h2>

<p>The node test is used as a filter to select the nodes we want. It is the only mandatory part in a XPath expression. We break a node test into 3 types.</p>

<ul>
<li><p><strong>Name test</strong>: It makes use of the inherent properties of a node to select it. Properties such as the type of the node.</p></li>
<li><p><strong>Node type test</strong>: Nodes can be generalized as a comment node, a text node, a processing instruction node or a catchall node type. The node type tests helps to filter along these lines.</p></li>
<li><p><strong>Targeted processing instruction test</strong>: This test selects processing instruction nodes with a defined type.</p></li>
</ul>


<p>For the following examples, we would use the below as the reference document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;even&quot;</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;even&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Name Test</h2>

<p>The name test filter makes use of properties of the nodes.</p>

<h3>Asterisk <code>*</code></h3>

<p>The asterisk or the glob, selects everything.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td/*
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the nodes that come after the <code>td</code> nodes of the root level <code>table</code> node. It then selects the inner <code>table</code> as it came after the <code>td</code> nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>QName</h3>

<p>When we want to select something more specific, we use the <em>QName</em>. QName stands for qualified name and can be either a prefixed name or an unprefixed name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>QName = PrefixedName | UnprefixedName
</span></code></pre></td></tr></table></div></figure>


<p>A prefixed name is made up of 2 parts: a prefix and a localpart separated by a colon. The prefix is a name space prefix and is optional.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>PrefixedName = Prefix &#39;:&#39; LocalPart
</span></code></pre></td></tr></table></div></figure>


<p>The unprefixed name and local part resolves to become a <em>NCName</em> which stands for non-colonized name: name without colons.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>UnprefixedName = LocalPart
</span><span class='line'>Prefix = NCName
</span><span class='line'>LocalPart = NCName
</span></code></pre></td></tr></table></div></figure>


<p><code>td</code> in the following expression below is a <em>NCName</em>. It means to select elements of the <code>td</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td
</span></code></pre></td></tr></table></div></figure>


<p>The results returns a list of 7 <code>td</code> nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;3&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;4&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span> <span class="nt">&lt;5&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;6&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;7&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Node Type Test</h2>

<p>There are times when you need a broader selection than a <em>NCName</em> and narrower than a <em>glob</em>. In such cases, there are 4 kinds of node types test which you can make use of.</p>

<ul>
<li><strong>comment()</strong>: Selects comment nodes.</li>
<li><strong>node()</strong>: Selects all nodes irregardless of type.</li>
<li><strong>text()</strong>: Selects the text from the current context.</li>
<li><strong>processing-instruction()</strong>: Selects the processing instruction nodes.</li>
</ul>


<p>For the following examples, we would use the below as the reference document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;foo.jpg&quot;</span><span class="nt">&gt;&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;even&quot;</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;even&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- &lt;td&gt;Delta&lt;/td&gt; --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="c">&lt;!-- &lt;td&gt;Echo&lt;/td&gt; --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>comment()</h3>

<p>Selects comment nodes from the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//tr[@class=&quot;even&quot;]/comment()
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the comment nodes from the context of the <code>tr</code> node with a class with value <em>even</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- &lt;td&gt;Delta&lt;/td&gt; --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>node()</h3>

<p>Selects all nodes irregardless of type, It even includes comment and processing instruction nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//tr[@class=&quot;even&quot;]/node()
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the nodes from the context of the <code>tr</code> node with a class with value <em>even</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="c">&lt;!-- &lt;td&gt;Delta&lt;/td&gt; --&gt;</span> <span class="nt">&lt;2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compare this to the <em>glob</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//tr[@class=&quot;even&quot;]/*
</span></code></pre></td></tr></table></div></figure>


<p><em>node()</em> captures everything, even more than the <em>glob</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>text()</h3>

<p>Selects the text from the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td/text()
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the inner text from the nodes selected. Notice that it returns an empty string if the context does not contain any text.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&#39;Alpha&#39; <span class="nt">&lt;1&gt;</span>
</span><span class='line'>&#39;Bravo&#39; <span class="nt">&lt;2&gt;</span>
</span><span class='line'>&#39;Charlie&#39; <span class="nt">&lt;3&gt;</span>
</span><span class='line'>&#39;&#39; <span class="nt">&lt;4&gt;</span>
</span><span class='line'>&#39;Foxtrot&#39; <span class="nt">&lt;5&gt;</span>
</span><span class='line'>&#39;&#39; <span class="nt">&lt;7&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>processing-instruction()</h3>

<p>Selects the processing instruction nodes. Processing instruction nodes are usually found in XML documents. It usually carries meta information for applications. An example of a processing instruction node is below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;style.xsl&quot;?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It can be targeted. The example below selects only processing instructions with the target &#8220;xml-stylesheet&#8221;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>processing-instruction(&quot;xml-stylesheet&quot;)
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everday XPath - The Expression]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-the-expression/"/>
    <updated>2016-09-11T05:53:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-the-expression</id>
    <content type="html"><![CDATA[<p>This blog post is part of a series on XPath. The content comes from my ebook <a href="http://www.everydayxpath.com">EverydayXPath</a>. Part of the content from the book will be released to the public as blog posts. In this post, we explain what XPath does. We disect the components of an XPath expression. And why the context is the key to forming the expression.</p>

<!-- more -->


<h2>The Expression</h2>

<p>When we travel to a foreign country, we rely on directions to get to the place that we want. Similarly, an XPath expression is like us giving the computer directions to find a particular node in the document.</p>

<p>An XPath expression is made up of steps, evaluated from left to right. Each step moves closer to the target element. They are separated by the forward slash <code>/</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>step/step/step</span></code></pre></td></tr></table></div></figure>


<p>We define a step as a <em>location path</em>. A location path selects a set of nodes relative to the preceding step. When a location path starts with a forward slash, it starts from the root node.</p>

<p>A location path can be broken up into 3 distinct parts. An axis, a node test and a predicate. It follows the format below. Only the node test is required in an expression. The rest are optional.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>axis::node-test[predicate]</span></code></pre></td></tr></table></div></figure>


<p>The <strong>axis</strong> makes use of the relationship between the nodes selected to the context node to act as a filter. For example, the ancestor axis selects the ancestors of the current context. While the descendant axis selects the descendants of the current context. The axis is optional.</p>

<p>The <strong>node test</strong> can be thought of as a pattern used for matching the desired nodes. We make use of the properties of the node to form the pattern. For example, a valid node test would be <code>table</code> which means we want table nodes. The node test is required.</p>

<p>The <strong>predicate</strong> is a filter expression. It filters against the nodes selected in the axis and node test. It evaluates to return either a number or a Boolean value. If it is a number, it selects the node in that position. If it is a Boolean, it selects nodes that satisfies the predicate. The predicate is optional.</p>

<h2>Context</h2>

<p>Writing an XPath expression starts with knowing the context. Assuming there is a robot whose job is to fetch you things in the house. The robot understands XPath. I&#8217;m in my living room, sitting on the couch.</p>

<blockquote><p>From the living room, go to the second room, find the first shelve, bring me the first book.</p></blockquote>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./room[2]/shelve[1]/book[1]</span></code></pre></td></tr></table></div></figure>


<p>The living room was the context from which the expression started.</p>

<p>Assuming the root of the house starts from the door.</p>

<blockquote><p>From the door, find the first room, find the first shelve, find the first book</p></blockquote>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/door/room[1]/shelve/book[1]</span></code></pre></td></tr></table></div></figure>


<p>The context was from the root. That is like searching the document from the start.</p>

<p>Since I want a book, if I know the title, I can do this</p>

<blockquote><p>Find a book with the title &#8220;Infinite Jest&#8221;</p></blockquote>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//books[title="Infinite Jest"]</span></code></pre></td></tr></table></div></figure>


<p>The expression changes according to the context. The context sets the basis for the XPath expression. Think of how to choose your context - the expression will turn out differently.</p>

<p>Naturally, the next question is how should we choose the context? While they all work, there are differences in maintainability.</p>

<p>Consider these two factors:</p>

<ul>
<li>Does the page change often? Will your expression break when there are changes?</li>
<li>Do you understand what the expression means at first glance?</li>
</ul>


<p>Avoid using a context which has a high chance of changing. You don&#8217;t want your expression to break. When writing expressions, always prefer short to long, simple to complex, less syntax to more. Readability helps. Hopefully, these factors will clarify the approach you take when forming the XPath expression.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing an ebook]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/09/writing-an-ebook/"/>
    <updated>2016-09-09T06:13:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/09/writing-an-ebook</id>
    <content type="html"><![CDATA[<p>I spent the past 3 months writing an ebook: <a href="http://www.everydayxpath.com">EverydayXPath</a>. The idea came as I needed to write a <a href="http://www.seleniumhq.org/">Selenium</a> script. Naturally I needed to use <a href="https://en.wikipedia.org/wiki/XPath">XPath</a> for selecting nodes on the web page. As I was googling for solutions, documentation on XPath felt inadequate. I needed good examples and coherent explanations for the various operators. XPath and CSS are the two common query languages for querying XML/HTML documents. I felt there is a opportunity for a niche product. Let me share the setup I used for writing the ebook.</p>

<!-- more -->


<h2>Writing the content</h2>

<p>Writing an book is a lot of work. I spent an hour a day, about 3 months in all to complete it. The first part is research. Though I knew enough to write valid XPath expressions, I did not know it deep enough. I set out to read more about XPath. I read the <a href="https://www.w3.org/TR/xpath/">W3C specifications</a>. There was an <a href="http://shop.oreilly.com/product/9780596002916.do">O&#8217;Reilly book on XPath</a>  written more than 10 years ago. Apparently it didn&#8217;t sell well enough that O&#8217;Reilly <a href="http://commons.oreilly.com/wiki/index.php/XPath_and_XPointer">released the content</a> on its commons site. There are many online sites that documents XPath, though not well enough. I learned what I could.</p>

<p>I started by drafting the chapters I wanted. It is easier to start writing with a framework in mind. From then on, it is just a matter of showing up everyday and churning out the content. <a href="https://streaksapp.com/">Streaks</a> helped maintain my momentum. I wrote in plain text files on <a href="https://www.gnu.org/software/emacs/">Emacs</a>. I read about <a href="https://www.literatureandlatte.com/scrivener.php">Scrivener</a> but was never tempted as my fingers speaks Emacs. The text editor doesn&#8217;t matter as long as content gets written. At first the format of my text was <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>. After I learned more about formatting, I switched to <a href="http://asciidoctor.org/docs/asciidoc-writers-guide/">Asciidoc</a>. Asciidoc suits ebooks better.</p>

<h2>Formatting</h2>

<p>The ebook had to be formatted in the major formats: <a href="https://en.wikipedia.org/wiki/Comparison_of_e-book_formats">HTML, PDF, MOBI and EPUB</a>. There are several tool chains available. I wanted a tool chain that can be used on the command line. I found <a href="https://www.gitbook.com/">Gitbook</a> and <a href="https://www.softcover.io/">Softcover</a>. I also saw <a href="https://atlas.oreilly.com/">O&#8217;Reilly Atlas</a>. Apparently it is invite only.</p>

<p>It was a toss up between Gitbook and Softcover. I tried Gitbook first as its eco-system looked more mature. The Gitbook workflow fit what I was looking for. I didn&#8217;t need to try Softcover. Gitbook depends on <a href="https://calibre-ebook.com/">Calibre</a> for formatting the ebooks. Calibre worked well enough.</p>

<h2>Workflow</h2>

<p>I had a <a href="https://www.gnu.org/software/make/">Makefile</a>. <code>make serve</code> would call Gitbook&#8217;s app server which renders Asciidoc or Markdown into HTML. I&#8217;m able to view the rendered content immediately. When I make changes, it automatically updates. The feedback loop is fast.</p>

<p>When I needed to build the books, I would call <code>make build</code> which calls the individual Gitbook build commands.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>serve:
</span><span class='line'>  ../node_modules/.bin/gitbook serve
</span><span class='line'>
</span><span class='line'>pdf:
</span><span class='line'>  ../node_modules/.bin/gitbook pdf ./ ./build/everydayxpath.pdf
</span><span class='line'>
</span><span class='line'>epub:
</span><span class='line'>  ../node_modules/.bin/gitbook epub ./ ./build/everydayxpath.epub
</span><span class='line'>
</span><span class='line'>mobi:
</span><span class='line'>  ../node_modules/.bin/gitbook mobi ./ ./build/everydayxpath.mobi
</span><span class='line'>
</span><span class='line'>build: pdf epub mobi
</span><span class='line'>  echo "built pdf, epub, mobi"
</span><span class='line'>
</span><span class='line'>.PHONY: serve</span></code></pre></td></tr></table></div></figure>


<p>That was all I needed.</p>

<h2>Website and payments</h2>

<p>The <a href="http://www.everydayxpath.com">EverydayXPath</a> website is a static HTML site hosted for free on <a href="https://pages.github.com/">Github Pages</a>. The website was written by me, the design was not. I bought a <a href="https://getbootstrap.com/">Bootstrap</a> theme from <a href="https://wrapbootstrap.com/">Wrapbootstrap</a>. The theme itself is a bunch of static HTML files. I was able to modify from it and get a professional looking website done in very short time, which is about 5-7 hours. I could have written one from scratch, but I would never be able to finish it in 5-7 hours.</p>

<p>When developing the website, I used <a href="https://www.npmjs.com/package/http-server">http-server</a>, a <a href="https://nodejs.org/en/">Node.js</a> package. It is a light web server which can render my website. I didn&#8217;t want to install <a href="https://www.nginx.com/">Nginx</a> or <a href="https://httpd.apache.org/">Apache</a> for rendering a one page website. That is overkill. http-server suited my needs perfectly.</p>

<p>For delivery of the digital product and payments, I chose <a href="https://gumroad.com/">Gumroad</a>. Gumroad doesn&#8217;t charge a monthly subscription, which suits me as I didn&#8217;t know how the ebook would sell. They charge a commission for every sale. If there is consistent volume, Gumroad offers a <a href="https://gumroad.com/features/pricing">subscription</a> model that has lower commission rates. The <strong>buy</strong> link on my website leads to Gumroad, where the payment takes place. Gumroad also handles the sending of the ebook to my customers.</p>

<h2>Marketing plan</h2>

<p>I know that writing the ebook is perhaps only 20% of the work. The real work is marketing. Hence, I&#8217;m putting up all the content from my ebook in a series of blog posts every week. My intention is to give would be readers a taste of the content. Hopefully I can convert them. The blog is an avenue for feedback. I also intend to measure all the marketing initiatives and publish the conclusions here. The world needs more data points on marketing technical ebooks. For a start, I&#8217;m going to concentrate on organic marketing techniques. Techniques that doesn&#8217;t require any money. I&#8217;m not ruling out paid marketing. So dear reader, if you&#8217;re interested in following this journey, do stay in touch by subscribing to this blog. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A firing]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/06/05/a-firing/"/>
    <updated>2016-06-05T16:37:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/06/05/a-firing</id>
    <content type="html"><![CDATA[<p>I was hooked by the documentary series: <a href="https://en.wikipedia.org/wiki/Chef%27s_Table">Chef&#8217;s table</a>. Each episode is about a famous chef. What hooked me was how human each of them was. They are not famous by default. Everyone of them had their struggles. Each of their journey to the zenith was hard. Perhaps it is cultural. We are taught to portray ourselves as successful, taught to hide our own imperfections. If <strong>Chef&#8217;s table</strong> is angled to show how good the chef was, how talented they are, I wonder, would the viewer relate personally to the chef? It is because they are imperfect and everyone is, that they connect.</p>

<p>Likewise, I am hardly perfect. I&#8217;d like to share a story of one of my failures. I&#8217;m seeing some of the people around me making the same mistakes. In my naive thinking, my stories might prevent the reader from falling in the same pothole. We should learn to celebrate failures. What failure is worse than being fired?</p>

<!-- more -->


<h2>Being fired</h2>

<p>It is taboo to say that you were fired. Being fired hints of incompetence. It was my second stint in web development. That was many years ago when I just started working. I was brought in as a consultant. The company did not have offices and everybody worked remotely. I was tasked to build a CRUD app with a good friend who did the user interface. We had weekly meet ups with the boss at Starbucks, where we showed the boss our progress and obtained feedback.</p>

<p>It was smooth in the beginning. At that time I had my own side projects. I was working on my side projects and doing consulting at the same time. I didn&#8217;t spend as much time as I should on consulting work as I felt I can make it up later. As a result, the consulting work did not move as fast as expected. I thought, as long as it gets done in the end, it should be OK.</p>

<p>The boss met me alone one day. His feedback was I wasn&#8217;t taking the deadlines seriously enough. During meetings, sometimes I would give frivolous answers to serious questions. And my deadlines kept slipping. I need to take the work more seriously. In a small company like his, he cannot afford to keep people who cannot perform consistently. I listened.</p>

<p>I was asked to develop a feature that allows the user to send Facebook messages to their Facebook contact list. Then, I was new to Facebook API. What we were trying to do is not common. There were a few things I weren&#8217;t sure. There was another developer within the company who built a Facebook app. I started asking the developer questions on the intricacies of Facebook API.</p>

<p>A couple of weeks later, the boss asked to meet me alone again. I knew it was bad news. The reason is I was brought in as the expert, not that developer. I should be the one digging deep. He felt that I wasn&#8217;t performing as well as he expected. And taking up his other resources at the same time. I had to go.</p>

<h2>Conclusion</h2>

<p>It struck deeply. The lesson I took away is I have to be professional in my work. When it is time to work, be serious and make the effort. Be professional in every interation you have with others. People are constantly evaluating you. In small companies, there is no room for poor performers as resources are tight. The bar for performance gets higher as you get older. I&#8217;ve had the misfortune of letting go of people whom made the same mistakes as I did. Don&#8217;t let that happen to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How does FreedomVPN work]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/05/29/how-does-freedomvpn-work/"/>
    <updated>2016-05-29T05:54:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/05/29/how-does-freedomvpn-work</id>
    <content type="html"><![CDATA[<p>I just watched the Champion&#8217;s League Final streamed live on my laptop. I watched it on <a href="http://www.pptv.com/">PPTV</a> in Singapore. This is made possible by FreedomVPN(Which amazingly, does not have a landing page of its own where I can link to). Recently, I switched my ISP(Internet Service Provider) to <a href="http://www.viewqwest.com/">Viewqwest</a>. This far, so good. Their product FreedomVPN, has opened the door to enjoying Internet TV from most of the popular content sites of the world. To many, it is like voodoo. Let me try to explain in broad strokes how they did it. Disclaimer: these are my conjectures and has not been validated with Viewqwest.</p>

<!-- more -->


<h2>Just watch it</h2>

<p>We didn&#8217;t realise we had Freedom VPN at the start. How we discover it was amusing. I realised that we suddenly had more titles to choose from Netflix. We thought the Singapore catalogue has been beefed up. Only after discovering those new titles can only be seen when we are at home, we then realised it was Freedom VPN.</p>

<p>There is no need to configure anything. Just watch it. It works across your smart phones, media players and the web browser. It is indeed convenient. It quickly won us over. We now access titles available from the US catalogue of Netflix. We can view BBC, the Chinese media sites and so many more.</p>

<p>With the new content that is now available to my family, we ended our cable TV subscription. It is obvious that media content delivered over the Internet is going to be the norm. My children will never experience catering their own schedules around the TV&#8217;s programme schedule, or the frustration of being restricted to watching it on the TV.</p>

<h2>When you press &#8220;Sherlock&#8221;</h2>

<p>I had described what the user experience is like. Let me lay out the requirements.</p>

<ul>
<li>No configuration needed</li>
<li>Connects to multiple content providers, each serving different countries</li>
<li>Works on all devices</li>
</ul>


<p><a href="http://www.imdb.com/title/tt1475582/">Sherlock</a> is a brilliant TV show that is not available in the Singapore Netflix catalogue but is, on the US one. When I select <strong>Sherlock</strong>, what really happens?</p>

<p>My web browser asks Netflix for <strong>Sherlock</strong>. The request has a problem. Where is Netflix? The expression <strong>www.netflix.com</strong> does not say where it is. It needs an address, an IP address. To translate <strong>www.netflix.com</strong> to an IP address, it asks a <a href="https://en.wikipedia.org/wiki/Domain_Name_System">DNS</a> server. When you&#8217;re on FreedomVPN, you are asking Viewqwest&#8217;s DNS server.</p>

<p>On my laptop which is served by Viewqwest,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nslookup www.netflix.com
</span><span class='line'>
</span><span class='line'>Non-authoritative answer:
</span><span class='line'>Name:   www.netflix.com
</span><span class='line'>Address: some.ip.address
</span><span class='line'>Name:   www.netflix.com
</span><span class='line'>Address: some.ip.address
</span><span class='line'>Name:   www.netflix.com
</span><span class='line'>Address: some.ip.address</span></code></pre></td></tr></table></div></figure>


<p>I can&#8217;t divulge what the IP addresses are, but I can tell you where they point at: somewhere from Viewqwest&#8217;s office, in Singapore.</p>

<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/singapore_netflix_lookup.png" title="Where Netflix is from FreedomVPN" ></p>

<p>On a non-Viewqwest network,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Non-authoritative answer:
</span><span class='line'>www.netflix.com canonical name = www.geo.netflix.com.
</span><span class='line'>www.geo.netflix.com     canonical name = www.us-west-2.prodaa.netflix.com.
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.34.178
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.37.191
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.40.137
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.4.148
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.15.237
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.22.153
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.23.124
</span><span class='line'>Name:   www.us-west-2.prodaa.netflix.com
</span><span class='line'>Address: 54.214.28.210</span></code></pre></td></tr></table></div></figure>


<p>It is pointing unmistakably to Netflix servers. What does this mean?</p>

<blockquote><p>Masquerading: figurative sense of &#8220;false outward show&#8221; is from 1670s.</p></blockquote>


<p>Requests are inherently gullible. They are led to believe that Netflix is really at Viewwqwest&#8217;s offices. Off they went. Does anyone really believe that the files of <strong>Sherlock</strong> are kept at Viewqwest&#8217;s office? It isn&#8217;t. Now, our request needs to be satisfied with <strong>Sherlock</strong>. Where do we get <strong>Sherlock</strong>? From Netflix obviously.</p>

<p>Why would Netflix give it to the request? Remember, the request came from Singapore. <strong>Sherlock</strong> is <em>not</em> available for Singapore viewers. That is why we got to tell Netflix that the request did not come from Singapore, but from the US.</p>

<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/netflix-access-activity.png" title="Netflix activity" ></p>

<p>Look at my screenshot. This came from my activity logs in Netflix. I watched Netflix from US without me physically in the US. Where do the IP addresses point to?</p>

<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/viewqwest-us-ip.png" title="Viewqwest US IPs" ></p>

<p>Coming back to our request, what happens is our original request is routed to Viewqwest offices in the US. It then <em>pretends</em> that the source is from the US, sends to Netflix, gets <strong>Sherlock</strong>, routes back to the Singapore office, and then finally back to the end user, me, happily watching Sherlock duel with Moriarty. FreedomVPN listens actively for requests to their list of supported content websites. It then performs this form of masquerading to geo-unblock content for you. This is FreedomVPN.</p>

<h2>Cat and Mouse</h2>

<p>With Netflix clamping down on proxies, Viewqwest through Freedom VPN is the only vendor that I know of, that is able to circumvent content geo-blocking. They are treading a thin line.</p>

<p>Does it infringe terms of use? I don&#8217;t know. Content providers won&#8217;t be happy knowing that their content can be accessed in areas where it is not supposed to. Knowing is one thing, <strong>enforcing</strong> is another. Is it worth Netflix&#8217;s time to spend time and resources to go after FreedomVPN? Maybe not, since Viewqwest subscribers are not many enough to warrant spending the energy. I&#8217;m sure they have better things to do. As long as FreedomVPN continues to be a niche player, it should continue to stay under the radar. Perhaps that is why it never got its own landing page.</p>

<p>I see some Viewqwest customers complain that FreedomVPN is not stable. It will never be. Accept that this is a cat and mouse game. This solution is a workaround, and will never work cleanly unless geo-blocking is abolished. But for the convenience of watching <strong>Sherlock</strong> with one click, I&#8217;m wiling to accept that good enough is <em>good enough</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up a remote VPN using Sophos UTM]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/04/10/how-to-set-up-a-remote-vpn-using-sophos-utm/"/>
    <updated>2016-04-10T06:49:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/04/10/how-to-set-up-a-remote-vpn-using-sophos-utm</id>
    <content type="html"><![CDATA[<p>My office has a Sophos UTM. It acts as a firewall for the office network. We also use it as a VPN server. It allows us to access the machines in the office network. More importantly, it allows remote users to access the servers. Our servers have access restricted to a white listed list of IP addresses. This way, we only open up the white list to the office network. This allows our people to work from anywhere. We don&#8217;t have to keep updating the white list of IP addresses. When I tried setting it up, I could not find articles documenting how to do it. Hopefully it will point you in the right direction.</p>

<!-- more -->


<h2>Setting up the Remote VPN</h2>

<p>To set it up, I referred to the manual from Sophos. Their <a href="https://www.sophos.com/en-us/support/knowledgebase/119209.aspx">knowledge base</a> contains the administrative guide. Download the administrative guide for your version of UTM.</p>

<p>The relevant chapter is <strong>Remote Access > SSL</strong>. There also plenty of articles and videos on the web on how to set that up. I won&#8217;t repeat them so as not to bore the reader.</p>

<h2>Masquerading traffic from the office</h2>

<p>My aim is when I log into the VPN from a remote location, my traffic should masquerade as coming from the office. To the outside world, my requests comes from the office network&#8217;s IP address. To do that, I need to add a Masquerade rule. Go to <strong>Network Protection > NAT</strong>, create a new Masquerading rule by clicking on the button <strong>Create Masquerading Rule</strong>.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/sophos-utm-create-new-masquerading-rule.png" title="Sophos UTM Create New Masquerading Rule" ></p>

<p>Select the network definition which represents the remote SSL users(you would have defined them when setting up the remove VPN). Select <strong>WAN</strong> as your interface, as you would like the traffic to go out. Click <strong>Save</strong>. Enable the rule by turning on the rule in the toggle button. Your rule should look like the screenshot below. You&#8217;re done. Hope this helps.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/sophos-utm-masquerading-rule.png" title="Sophos UTM Masquerading Rule" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons learned when working with a remote team]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/04/01/lessons-learned-when-working-with-a-remote-team/"/>
    <updated>2016-04-01T06:42:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/04/01/lessons-learned-when-working-with-a-remote-team</id>
    <content type="html"><![CDATA[<p>I have both worked and managed remotely. I would like to share what works when managing a remote engineering team. Remote working is different from outsourcing. I would consider a remote team part of the company.</p>

<!-- more -->


<h2>Remote vs Local</h2>

<p>As a former remote worker, I like working remotely. I understand the draw of working remotely. Less distractions. Flexible time. Work life balance. Access to larger pool of candidates. There are also advantages to working together in an office. There is no better form of communication than speaking in person.</p>

<p>Both forms of working have their strengths and weaknesses. Use whichever that fits your situation.</p>

<h2>Hire experienced workers</h2>

<p>In a perfect world, everybody would like to hire experienced workers. For remote work, I&#8217;d see it as critical. The candidate should have the skills to perform the work needed. Not learn on the job. Why so? Learning is handicapped when a person is remote. He or she will not be able to learn as effectively because communication is degraded. Relying on instant messaging, emails or phone calls is not as effective. It takes up more of both the mentor&#8217;s time and the worker&#8217;s time.</p>

<h2>Define clear tasks</h2>

<p>In a perfect world you would like to know in advance the work needed to be done. That doesn&#8217;t happen in the real world. For remote workers, I&#8217;d entrust tasks which have been done before. Not open-ended projects. Why so? Because you need to be fair to the remote worker. Deny it or not, there is a mistrust of workers you don&#8217;t see at the desk. Is he working or watching Youtube at home? It helps immensely when you assign a task that you know how to do it. You would know how long it should take. If it takes too long, you know it is time to come in. If it is faster, congratulations, you have someone contributing effectively. Another factor is how independent the work is. The more independent, the better. It cuts down the need for communication. Communication is always the bottleneck for remote work.</p>

<h2>Communication is a necessity</h2>

<p>Communication should happen regularly at defined times. It is up to the team&#8217;s preference. I feel that there should happen at least once every 2 days or so. I find that most developers I know, don&#8217;t have the inclination to update their progress regularly without prompting. It should be the manager&#8217;s responsibility to ask for it.</p>

<p>Remote working goes against many culture norms especially in Asia. If the management is not open to new ideas, it may be an uphill cause. Company culture matters when deciding if you want to do it. In conclusion, if the work is well defined and the worker have experience doing it, no harm going remote. If not, better not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prefer lifting to destructuring in Scala]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/03/13/prefer-lifting-to-destructuring-in-scala/"/>
    <updated>2016-03-13T15:56:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/03/13/prefer-lifting-to-destructuring-in-scala</id>
    <content type="html"><![CDATA[<p>This is one of the few things which I discovered along the way as I was learning Scala. Always prefer lifting a function than destructuring.</p>

<!-- more -->


<p>For example, I have a function which returns the capital given the two letter country code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">countryCapital</span><span class="o">(</span><span class="n">countryCode</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function returns an <code>Option[String]</code> type. If the capital exists, it returns the capital as a <code>String</code> contained in the <code>Option</code> monad. If not, it returns a <code>None</code>.</p>

<p>I want to upper case the results returned. This was what I was doing in my early days.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">capital</span> <span class="k">=</span> <span class="n">countryCapital</span><span class="o">(</span><span class="n">countryCode</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">upcasedCapital</span> <span class="k">=</span> <span class="n">capital</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">toUpperCase</span>
</span><span class='line'>   <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I realised lifting the <code>Option</code> type is a more idiomatic way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">capital</span> <span class="k">=</span> <span class="n">countryCapital</span><span class="o">(</span><span class="n">countryCode</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">upcasedCapital</span> <span class="k">=</span> <span class="n">capital</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">c</span> <span class="k">=&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">toUpperCase</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is not necessary to destructure the type only to put it back again. Look how short it is, and clear its intention is. It did exactly the same things the earlier code snippet did.</p>

<p>When you see a lot of destructuring using pattern matching in a Scala code, it is almost always a code smell. Always prefer lifting over destructuring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the tyranny of billing]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/01/12/the-tyranny-of-billing/"/>
    <updated>2016-01-12T03:45:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/01/12/the-tyranny-of-billing</id>
    <content type="html"><![CDATA[<p>Billing is a critical function of any business. It is more than just collection of money. What better way than to tell a story.</p>

<!-- more -->


<p>We use the product of a fictitious company, ABC Widgets. The product is critical to our business. If the product fails to run properly, it causes a cascading effect to the company. We are happy with the product. It solves our problems. The price is reasonable. ABC Widgets bills us using the pre-paid model. In short, pay before you use. No payment, the service is cut. That is fair. We did not disagree.</p>

<p>Things were fine for months. One day, we received complaints from our customers that something was wrong. We investigated. It turned out that ABC Widget&#8217;s service stopped running. We reached their support. Our pre-paid account ran out of money. And our business critical service was cut. Our account was usually charged automatically when credits run low. This time it failed to charge.</p>

<p>We topped up our accounts manually. It did charge. Why wasn&#8217;t we notified? ABC Widgets replied they did email us. Twice. Sent automatically to our placeholder email: admin@so-and-so.com. They even pasted the email contents. It is our fault. We did not pay. They warned us. Not once, but twice. So, they were morally right to cut off our business critical service.</p>

<p>We were unhappy. But things has been going well this far. Besides, it did look like our fault. We let things past. A few months later, we received complaints from our customers. The account ran out of credits again. Our service was terminated. We are very unhappy. How can our accounts fail to top up again? We demand to know why. They replied it happens from time to time. And they apologized. We changed our notification email to point to a real person this time. We need to be actively monitoring our emails in case it happened again.</p>

<p>A sharp reader will see that the point of failure was the auto-charging of the accounts. It failed which led to the series of unfortunate events. Correct. So, it is a technical problem. Wrong. It is not simply a technical problem. It is a failure to understand the needs of the customer. This is how customers are lost.</p>

<p>The same incident happened for the third time. This time, we did not even receive the notification email. We decided to switch vendors. Our trust in them was lost. ABC Widgets lost a customer not because the product was no good, but because of they failed to understand their needs.</p>

<p>When you sell a business critical service, it has to run. In the case of ABC Widgets, the product is running fine. However their billing did not cater to the needs of their customers. You should never lightly cut the service of a customer especially when it is business critical. Repeat that. You should never <strong>lightly</strong> cut the service when it is business critical. How much effort did ABC Widget take to build a stellar product? A lot. How much effort did ABC Widgets take to reach their customers when there are problems in billing? 2 automated emails. Is that the best they can do? They don&#8217;t understand that it is critical, and it cannot be cut off like that.</p>

<p>If I were them, I would have customer service call the customer asking in person if they would like to cut the service. One phone call is enough. Is that a lot of effort? A switch to post-paid model would solve it as well. We would have continued with ABC Widgets. Please don&#8217;t subject your customers to the tyranny of your billing system. They would be grateful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to deploy a standalone server app]]></title>
    <link href="http://liangzan.github.com/blog/blog/2015/12/27/how-to-deploy-a-standalone-server-app/"/>
    <updated>2015-12-27T16:34:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2015/12/27/how-to-deploy-a-standalone-server-app</id>
    <content type="html"><![CDATA[<p>This post shares my experiences deploying a standalone application on a remote Linux server. By standalone application, I mean that the application is packaged as a single file. It could be a jar file or an executable packaged from Java/Scala/C/Haskell/etc. In my case, it was a jar file. My server is Ubuntu 14.04. My automation tool is <a href="http://www.ansible.com/">Ansible</a> and a dash of shell scripts. The process is very much influenced by <a href="http://capistranorb.com/">Capistrano</a>, a tool that is very popular for deploying Ruby web applications. There are three aims. One, I want to deploy in one step. Two, I want to version my deployment. Three, it should cater for easy rolling back.</p>

<!-- more -->


<h2>Deploying in one step</h2>

<p>I want to run one command to deploy my application on a remote server. It would have to be a script that can run a series of commands on a remote server. There are plenty of tools available. I chose Ansible. I like Ansible as it is easy to understand. It is like C, close enough to the metal, but gives a light enough abstraction to make it productive.</p>

<p>What the script does is, it transfers the file over(assuming you built it locally). A symbolic link to the new file is created. And then the application is started.</p>

<p>Here is the Ansible script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="c1"># connector deployment</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">deploys the application</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ubuntu</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">timestamp</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">copies the jar file over</span>
</span><span class='line'>      <span class="l-Scalar-Plain">copy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=../build/app.jar dest=/home/ubuntu/app-.jar</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unlink the current app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">path=/home/ubuntu/app.jar state=absent</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">link to the newly deployed app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">path=/home/ubuntu/app.jar src=/home/ubuntu/app-.jar state=link</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">stops running app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>      <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=app state=stopped</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">starts the app</span>
</span><span class='line'>      <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>      <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=app state=started</span>
</span><span class='line'>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">send notification message via slack</span>
</span><span class='line'>      <span class="l-Scalar-Plain">local_action</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">module</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">slack</span>
</span><span class='line'>        <span class="l-Scalar-Plain">token</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;your slack token&gt;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">msg</span><span class="p-Indicator">:</span> <span class="s">&quot;app</span><span class="nv"> </span><span class="s">completed</span><span class="nv"> </span><span class="s">deployment.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Versioning your deployments</h2>

<p>I want a way to version my deployments. Versioning gives you the option to roll back. There are 2 mechanism which I used. The symbolic link and the timestamp. I stole the ideas unashamedly from Capistrano.</p>

<p><a href="https://en.wikipedia.org/wiki/Symbolic_link">Symbolic links</a> is used to point to the desired version of the app to run. This allows you to run whichever version of the app. Timestamp tells you when this file is deployed. I find it good enough for differentiating.</p>

<p>The relevant commands are all found in the Ansible script above. The <code>timestamp</code> variable captures the time of the deployment. We then append the timestamp to the newly deployed file. The symbolic linking are done using Ansible.</p>

<p>As you deploy more often, you need to clear the old files which are unused. For that, I wrote a shell script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># leaves 5 copies of the standalone app</span>
</span><span class='line'><span class="nv">total_files</span><span class="o">=</span><span class="k">$(</span>find -name <span class="s1">&#39;*.jar&#39;</span> -type f -print0 | xargs -0 ls -t | wc -l<span class="k">)</span>
</span><span class='line'><span class="nv">file_num_to_remove</span><span class="o">=</span><span class="sb">`</span>expr <span class="nv">$total_files</span> - 5<span class="sb">`</span>
</span><span class='line'>find -name <span class="s1">&#39;*.jar&#39;</span> -type f -print0 | xargs -0 ls -t | tail -n <span class="nv">$file_num_to_remove</span> | xargs rm
</span></code></pre></td></tr></table></div></figure>


<p>It first finds all the jar files in the current directory. Next it sorts them by date modified with the most recent first. We want to keep the last five deployments. So it finds how many files it should remove by subtracting the total by five. Once we know how many files to remove, we can find them using <code>tail</code> and remove them by passing the file name into <code>xargs</code>. 5 is an arbitrary number that you can change.</p>

<p>After deployment, the application is deployed as an <a href="http://upstart.ubuntu.com/">Upstart</a> service and monitored via <a href="https://www.librato.com/">Librato</a>.</p>

<h2>Room for improvement</h2>

<p>I see a few ways it can be improved.</p>

<p>The versioning makes use of timestamp. It can be richer. If there is semantic tagging, we could also use that in addition to timestamps. We will be able to tell which version this file contains.</p>

<p>The transfer time over the network is the bottleneck of the process. If you have a build server like <a href="https://jenkins-ci.org/">Jenkins</a>, it would be faster to deploy from it.</p>

<p>I do hope this is helpful to whoever who reads this. Do share your thoughts on how this can be improved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The randomness idea filter]]></title>
    <link href="http://liangzan.github.com/blog/blog/2015/12/19/the-randomness-idea-filter/"/>
    <updated>2015-12-19T06:38:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2015/12/19/the-randomness-idea-filter</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://farm3.staticflickr.com/2808/10546083363_0d4bfb56cf.jpg" title="Ikea Lamp. By John Twohig" ></p>

<p>I use this filter to decide whether a product or feature is worth pursuing. I call it the randomness idea filter. How badly is this product or feature affected by randomness?</p>

<!-- more -->


<h2>Works vs somewhat works</h2>

<p>Take the lamp for example. It has one switch. Flick it, and it fills the room with light. It works. It works well and it works all the time. Observe, it has one input(that is the switch) and one expected output.</p>

<p>Now, let&#8217;s take the other extreme: Siri.</p>

<p>My one year old: <em>dah blu bum</em></p>

<p>Siri: Calling Uncle Tom now.</p>

<p>Not to say that Siri does not work. It works, some of the time. It works if you speak clearly, with a clear intention like call someone plus a multitude of other conditions. Under limited kinds of inputs, Siri will work well. Like the lamp.</p>

<p>The more variety the input has, the harder it is to get the outcome right.</p>

<h2>Is it random or not</h2>

<p>Even if there are lots of different input, as long as you can predict those input, you can be reasonably sure you can get the result right. The tricky part is, is your input predictable?</p>

<p>For example, your product does database migration from MySQL to PostgresSQL. That is a hard problem to solve. There are lots of cases to cater for. But they are predictable. There are only that many data types and that many ways it can change to. With effort, it is possible to cater for more than 95% of the cases.</p>

<p>Siri can&#8217;t. Even for a universal language like English, people speak it in so many tongues. Worse, spoken languages keep evolving. The inputs are random. How much effort is needed to cover all the bases? Such products are not going to be expected to work very well.</p>

<p>Unless, your users don&#8217;t expect a straight result. Like a Google search. It is OK to give a somewhat good result. But for Siri, it is not OK to call the wrong person.</p>

<p>When there is randomness in the input and the expected result is a straight yes no result, throw away the idea. There are many other better things you can work on. When thinking if I should pursue an idea, I always do this check. I hope it helps you too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entering the logistics industry]]></title>
    <link href="http://liangzan.github.com/blog/blog/2015/12/11/entering-the-logistics-industry/"/>
    <updated>2015-12-11T16:49:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2015/12/11/entering-the-logistics-industry</id>
    <content type="html"><![CDATA[<p>Early this year, I joined a logistics company. I&#8217;ve been working in technology for the whole of my professional life. This was a welcomed change. I was eager to see how different a conventional industry, such as Logistics, is like. The company is <a href="https:///www.courex.com.sg">Courex</a>. It does ecommerce logistics in Singapore.</p>

<!-- more -->


<p>Logistics is an old industry. It is huge. It is a trillion dollar industry. The number of publications on logistics is close to hundreds. Every region has its own publications. Publications is a good barometer as they mean readership. If you&#8217;re interested to read, I can recommend <a href="http://www.joc.com/">Journal of Commerce</a>. There are many different types of logistics. Fundamentally, logistics solves the problem of getting a thing from one place to another.</p>

<p>Logistics is a service business. It is also a capital and labour intensive business. The margins are low. Often in single digits. Why? Because logistics is a <a href="https://en.wikipedia.org/wiki/Commoditization">commodity</a>. There isn&#8217;t much difference from one service from the next. The result is the same. Your thing gets delivered from one point to another. Or gets stored at a place. The difference is consistency of service. A good provider delivers at a high consistency. When the result is the same, you can only compete on price. That is why you have low margins.</p>

<p>When the price is the same, you compete on relationships. I had a chat with my friend who works in the chemicals industry. It is the same. They sell the same products and can only compete on price. It is possible for the sales person to jump off with your customers to start his own company, selling the same products. It doesn&#8217;t affect the customer. They get the same result. That is usually unthinkable for a technology product. Even something as simple as online chat, there are multiple variants. No sales person can jump off with the customers as it is non-trivial to replicate a technology product.</p>

<p>Which is why there is little transparency in the logistics industry. Holding on to these information(ie, customer&#8217;s contacts, shipping contacts) is their only barrier to entry. Low margins with high capital expenditure leaves in little room for innovation. It makes it difficult for new entrants to come in. I think the same applies for other conventional industries.</p>

<p>It is easier for a service to differentiate when the subject is a human. It can become an experience which can be delightful or frustrating, depending on how good you are. When the subject is an object, what room is there for differentiation? A parcel cannot experience the more gentler handling of your workers. Logistics companies end up competing on consistency and efficiency. Which is why eventually, it will consolidate. Economies of scale allows the company to compete on price.</p>

<p>Strictly speaking, you do not need technology to fulfil a logistics service. It can be done on pen and paper. Technology&#8217;s role in logistics is to help maintain consistency and improve efficiency. It helps to enforce people follow processes. Every step in the process is recorded. If a step is not followed, the system sounds out. That is how consistency is maintained. A lot of work in logistics is repetitive and boring. Humans are not good at performing repetitive tasks. Machines are.</p>

<p>It is a breath of fresh air to get out of the echo chamber of technology. We&#8217;re often building technology solutions for technology problems. I got to see how technology can amplify what a worker can do. It make a worker more productive. So why isn&#8217;t technology more widely adopted in the industry? It is a human problem. There is a learning curve for people. I&#8217;ve witnessed one company who refuse to use a modern inventory management system. They opted to use plain spreadsheets. Why? Because they don&#8217;t want to learn to use the product, despite the advantages it brings. People in the conventional industries are definitely not the early adopters when it comes to technology. Human problems are much harder to solve than technical problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to configure WebDAV using Apache on Ubuntu]]></title>
    <link href="http://liangzan.github.com/blog/blog/2014/09/04/how-to-configure-webdav-using-apache-on-ubuntu/"/>
    <updated>2014-09-04T23:18:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2014/09/04/how-to-configure-webdav-using-apache-on-ubuntu</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/WebDAV">WebDAV</a> is an extension of the HTTP protocol that allows users to manage files on servers. There are many ways to manage files on a remote server. WebDAV has several benefits over other solutions such as <a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol">FTP</a> or <a href="https://en.wikipedia.org/wiki/Samba_(software">Samba</a>). In this article, we will go through how to configure your Apache server on Ubuntu 14.04 to allow native WebDAV access from Windows, Mac and Linux with authentication.</p>

<!-- more -->


<h2>Why WebDAV?</h2>

<p>WebDAV offers several advantages.</p>

<ul>
<li><p>Native integration on all major OSes(Windows, Mac, Linux). There is no need to install third party software to use WebDAV.</p></li>
<li><p>Supports partial transfers.</p></li>
<li><p>More choices for authentication. Being on HTTP means <a href="https://en.wikipedia.org/wiki/NT_LAN_Manager">NTLM</a>, <a href="https://en.wikipedia.org/wiki/Kerberos_(protocol">Kerberos</a>), <a href="https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol">LDAP</a>, etc are possible.</p></li>
</ul>


<p>Depending on your situation, WebDAV may be the best solution for your needs.</p>

<h2>Why Apache?</h2>

<p>There are many web servers around that supports WebDAV on Linux. However, Apache has the most compliant implementation of the WebDAV protocol out there. At the time in writing, WebDAV on <a href="http://nginx.org/">Nginx</a> and <a href="http://www.lighttpd.net/">Lighttpd</a> work but only partially.</p>

<h2>Install Apache</h2>

<p>Let us get <a href="https://httpd.apache.org/">Apache</a> installed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install apache2</span></code></pre></td></tr></table></div></figure>


<p>The Apache web server should be installed and running.</p>

<h2>Setting up WebDAV</h2>

<p>There are 3 steps to set up WebDAV. We designate a location, enable the necessary modules and configure it.</p>

<h3>Step 1: Preparing the directories</h3>

<p>We need to designate a folder for serving WebDAV. We are creating a new directory in <code>/var/www</code> for that. You will also need to change the owner to <code>www-data</code>(or whichever your Apache user is) in order to allow Apache to write to it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir /var/www/webdav
</span><span class='line'>sudo chown www-data:www-data /var/www/</span></code></pre></td></tr></table></div></figure>


<h3>Step 2: Enabling modules</h3>

<p>Next we enable the modules using <a href="http://man.he.net/man8/a2enmod">a2enmod</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2enmod dav
</span><span class='line'>sudo a2enmod dav_fs</span></code></pre></td></tr></table></div></figure>


<p>The Apache modules are found under <code>/etc/apache2/modules-available</code>. This creates a symbolic link from <code>/etc/apache2/modules-available</code> to <code>/etc/apache2/modules-enabled</code>.</p>

<h3>Configuration</h3>

<p>We open the configuration file at <code>/etc/apache2/sites-available/000-default.conf</code> using your favorite text editor. Add the following configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DavLockDB /var/www/DavLock
</span><span class='line'>
</span><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    Alias /webdav /var/www/webdav
</span><span class='line'>
</span><span class='line'>    &lt;Directory /var/www/webdav&gt;
</span><span class='line'>        DAV On
</span><span class='line'>    &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://httpd.apache.org/docs/2.4/mod/mod_dav_fs.html">DavLockDB</a> directive designates the name of the DAV Lock database. It should be a path to a file. The file does not need to be created. The directory should be writeable by the Apache server.</p>

<p>The <a href="https://httpd.apache.org/docs/2.4/mod/mod_alias.html">Alias</a> directive maps requests to <code>http://your.server/webdav</code> to the <code>/var/www/webdav</code> folder.</p>

<p>The <a href="https://httpd.apache.org/docs/current/mod/core.html#directory">Directory</a> directive tells Apache to enable WebDAV for the <code>/var/www/webdav</code> folder. You can find out more about <a href="https://httpd.apache.org/docs/2.4/mod/mod_dav.html">mod_dav</a> from the Apache docs.</p>

<p>If you restart the Apache server, you will have a working WebDAV server without authentication.</p>

<p>Restart the Apache server like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>The WebDAV server should be found at <strong>http://&lt;your.server.com>/webdav</strong>. Try logging in without any credentials.</p>

<h2>Adding authentication</h2>

<p>A WebDAV server without authentication is not secure. In this section we&#8217;ll add authentication to your WebDAV server. There are many authentication schemes available. We are only going to touch on the 2 simplest schemes: Basic and Digest authentication.</p>

<h3>Which to use? Basic or Digest authentication?</h3>

<p>Take a look at this table which illustrates the compatibility of the various authentication schemes on different operating systems. Note that if you are serving HTTPS, we are assuming your ssl cert is valid(not self-signed).</p>

<p><img src="http://i.imgur.com/Q01EN3F.png" alt="WebDAV compatibility" /></p>

<p>If you are using <strong>HTTP</strong>, use <a href="https://en.wikipedia.org/wiki/Digest_access_authentication">Digest authentication</a> as it will work on all operating systems. If you are using <strong>HTTPS</strong>, you have the option of using <a href="https://en.wikipedia.org/wiki/Basic_access_authentication">Basic authentication</a>.</p>

<p>We&#8217;re going to cover the <strong>Digest</strong> authentication version since it works on all the operating systems without the need for a SSL cert.</p>

<h3>Digest authentication</h3>

<p>Let us generate the file(called <strong>users.password</strong>) that stores the password for the users. In Digest authentication, there is the <strong>realm</strong> field which acts as a namespace for the users. We will use <strong>webdav</strong> as our <strong>realm</strong>. Our first user will be called <strong>alex</strong>.</p>

<p>To generate the digest file, we have to install the dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install apache2-utils</span></code></pre></td></tr></table></div></figure>


<p>After that, we generate the file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo htdigest -c /etc/apache2/users.password webdav alex</span></code></pre></td></tr></table></div></figure>


<p>There should be a password prompt for the password of <strong>alex</strong>.</p>

<p>For subsequent addition of users, you should remove the <strong>c</strong> flag. Another example adding a user called <strong>bob</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo htdigest /etc/apache2/users.password webdav bob</span></code></pre></td></tr></table></div></figure>


<p>We also need to allow Apache to read it. So we change the owner of the file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chown www-data:www-data /etc/apache2/users.password</span></code></pre></td></tr></table></div></figure>


<p>After the password file is created, we should make changes to the configuration at <code>/etc/apache2/sites-available/000-default.conf</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DavLockDB /var/www/DavLock
</span><span class='line'>
</span><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    Alias /webdav /var/www/webdav
</span><span class='line'>
</span><span class='line'>    &lt;Directory /var/www/webdav&gt;
</span><span class='line'>        DAV On
</span><span class='line'>        AuthType Digest
</span><span class='line'>        AuthName "webdav"
</span><span class='line'>        AuthUserFile /etc/apache2/users.password
</span><span class='line'>  Require valid-user
</span><span class='line'>    &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://httpd.apache.org/docs/current/mod/mod_authn_core.html">mod_authn</a> module contains the definitions for the authentication directives. In essence, we instruct Apache that for the <code>/var/www/webdav</code> directory, there should be authentication using the <strong>Digest</strong> scheme. The realm should be called <strong>webdav</strong>. Find the password from the file at <strong>/etc/apache2/users.password</strong>. Only valid users who authenticate themselves is able to acess that directory.</p>

<p>Finally, enable the digest module and restart the server for the settings to take effect.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2enmod auth_digest
</span><span class='line'>sudo service apache2 restart</span></code></pre></td></tr></table></div></figure>


<h2>Testing it</h2>

<p>We&#8217;ll demonstrate how to access your WebDAV server from the native file browsers of Mac, Windows and Linux(Ubuntu).</p>

<h3>Mac</h3>

<p>On Mac, open <strong>Finder</strong>. On the menu bar, find <strong>Go</strong> and select the option <strong>Connect to Server</strong>.</p>

<p><img src="http://i.imgur.com/q6rsU9q.png" alt="WebDAV Mac Step 1" /></p>

<p>Enter the server address. It should be <strong>http://&lt;your.server>/webdav</strong>. Press <strong>Connect</strong>.</p>

<p><img src="http://i.imgur.com/h4mFZoK.png" alt="WebDAV Mac Step 2" /></p>

<p>You will be prompted for a username and pssword. Enter them and press <strong>Connect</strong>.</p>

<p><img src="http://i.imgur.com/BkhcR7I.png" alt="WebDAV Mac Step 3" /></p>

<p>Once you have connected, the directory should appear in <strong>Finder</strong>.</p>

<p><img src="http://i.imgur.com/HcuBGmq.png" alt="WebDAV Mac Step 4" /></p>

<h3>Windows</h3>

<p>On Windows, open <strong>File Explorer</strong>. On the left sidebar, you should find the <strong>Network</strong> icon.</p>

<p><img src="http://i.imgur.com/KhKCetD.png" alt="WebDAV Windows Step 1" /></p>

<p>Right click on the <strong>Network</strong> icon. It should show the context menu with the option <strong>Map network drive</strong>. Click on that.</p>

<p><img src="http://i.imgur.com/KYLEwSv.png" alt="WebDAV Windows Step 2" /></p>

<p>Enter the server address in the folder field. It should be <strong>http://&lt;your.server>/webdav</strong>. Select the <strong>Connect using different credentials</strong> if your login is different. Press <strong>Finish</strong>.</p>

<p><img src="http://i.imgur.com/PbYhFXr.png" alt="WebDAV Windows Step 3" /></p>

<p>You will be prompted for a username and password. Enter them and press <strong>OK</strong>.</p>

<p><img src="http://i.imgur.com/d57Cul7.png" alt="WebDAV Windows Step 4" /></p>

<p>Once you have connected, it should appear as a network drive on the left sidebar of your <strong>File Explorer</strong>.</p>

<p><img src="http://i.imgur.com/CTPOwvI.png" alt="WebDAV Windows Step 5" /></p>

<h3>Linux(Ubuntu)</h3>

<p>We are using Ubuntu 14.04 as our Linux desktop operating system. On Ubuntu, open <strong>Files</strong>. THere is a <strong>Connect to Server</strong> option on the left sidebar. Click on that.</p>

<p><img src="http://i.imgur.com/XqbJm4t.png" alt="WebDAV Linux Step 1" /></p>

<p>Enter the server address. It should be <strong>dav://&lt;your.server>/webdav</strong>. Press <strong>Connect</strong>.</p>

<p><img src="http://i.imgur.com/M3VuEE5.png" alt="WebDAV Linux Step 2" /></p>

<p>You will be prompted for a username and password. Enter them and press <strong>Connect</strong>.</p>

<p><img src="http://i.imgur.com/Sa5037A.png" alt="WebDAV Linux Step 3" /></p>

<p>Once you have connected, the directory should appear under the <strong>Network</strong> listing.</p>

<p><img src="http://i.imgur.com/FQtteVI.png" alt="WebDAV Linux Step 4" /></p>

<h2>Conclusion</h2>

<p>In this article, we have gone through how to set up a WebDAV server using Apache on Ubuntu 14.04. We have also discussed how to configure Digest authentication to secure the server. Lastly, we have shown you how to connect to the WebDAV server from all 3 major operating systems using their native file browsers.</p>
]]></content>
  </entry>
  
</feed>
