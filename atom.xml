<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Liang Zan - Blog]]></title>
  <link href="http://liangzan.github.com/blog/atom.xml" rel="self"/>
  <link href="http://liangzan.github.com/blog/"/>
  <updated>2018-08-12T16:18:35+08:00</updated>
  <id>http://liangzan.github.com/blog/</id>
  <author>
    <name><![CDATA[Wong Liang Zan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Launch phase at EF]]></title>
    <link href="http://liangzan.github.com/blog/blog/2018/07/28/launch-phase-at-ef/"/>
    <updated>2018-07-28T08:59:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2018/07/28/launch-phase-at-ef</id>
    <content type="html"><![CDATA[<p>This is part three of my experience going through <a href="https://www.joinef.com/">Entrepreneur First</a>. Conventional accelerators follow a process where they accept formed teams, spend 3 months preparing them for the Investor Day, following which the accelerator helps them with fund raising. EF don&#8217;t usually accept formed teams. Individuals join the program before they have an idea, form a team, validate an idea and get selected to join the second phase.</p>

<p>EFSG3, EF&#8217;s third batch in Singapore had over 100 joining the program. After the first phase, 23 teams comprising of 45 founders were selected to present on Investor Day. That&#8217;s a passing rate of less than 45%.</p>

<!-- more -->


<h2>How are teams selected for the second phase</h2>

<p>Some context, EF&#8217;s program comprises of 2 phases: Form and Launch, both 3 months long. Form is where individuals form teams. At the end of Form, each team goes through a panel. Those who pass, gets investment from EF and goes through Launch, where it ends with the Investor day. There is no official metric for getting through Form, though I&#8217;d argue there is one - paying customers in a large market. A panel made up of EF&#8217;s management and the venture partners screens the teams. It is modelled after pitching investors. Teams are judged against similar yardsticks. How much customer traction is there? Is there a working prototype? How big is the market? Does the profile of the team fit the business they are trying to build? Where is the defensibility?</p>

<p>Obviously, it is subjective. The panel is trying to guess what can happen in the future, from what little the team has done in 3 months, and from what limited experience or knowledge they may have in that industry. At the 3 month point, the expectation is that the team should have validated the idea. Having a working prototype is good, but if there&#8217;s nobody who wants to buy, that is wasted time. My advice is to focus on customer validation. There should be evidence of paying customers. The market size is important. The business must have an addressable market size of at least $10 billion. Remember, they are selecting startups that are suitable for Venture capital and Venture capital needs big winners to return the money to their limited partners. If the market size isn&#8217;t big, it won&#8217;t produce a big enough win.</p>

<p>It&#8217;s not the end of the world for teams that don&#8217;t get through. Some try again in the next cohort. Some join another accelerator. Some look for investment elsewhere. Some realise that starting a business is not for them, and go back to the job market.</p>

<h2>Preparing to meet the sharks</h2>

<p>Launch is structured like an investor deck. Every week, the teams works through a topic the investor deck would address; such as how to write the vision and the mission, how to calculate the market size, the go to market strategy, and so on. EF conducts workshops in small groups where everyone offers feedback for one another. It helps to clarify your thoughts and catch your blind spots. I realised how useful they are when its time for fundraising. Investors ask those similar questions, and wants the similar materials. Peer pressure also keeps everyone on their toes. Teams continue to have weekly check ins with the EF team, where we receive feedback and nudged to get more traction. If you have traction, fund raising will be easy. We are told not to get distracted about funding until after Investor Day.</p>

<h2>Investor Day</h2>

<p>Investor day is where EF gathers the top investors from the region, sits them in a room and make all of them listen to 3 minute pitches from all the teams. <a href="https://www.youtube.com/watch?v=4AcRGxGB25g">Here</a> is my teams&#8217;s pitch, and some <a href="https://www.youtube.com/watch?v=2YkDbnGr6Sk">behind the scene cuts</a>. We spend the prior 2 weeks preparing for the pitches. Most teams would have gone through 15-20 revisions for their pitches, and practiced at least 50 times or so before an audience. EF organises intensive practice sessions for small groups and for individual teams during those 2 weeks. After that much practice, we all became pretty polished on the actual day. After the pitching, investors would come around to our booths and have a chat with us.</p>

<h1>Post Investor Day</h1>

<p>Post-investor day is where the teams officially start fund-raising. EF is a great help again. They provide an updated investor database with feedback on investors from previous batches. Those were invaluable. There is an A-list of reputable investors who had recently led seed rounds, followed by the others which they aren&#8217;t familiar with. We were told what sort of questions to expect from which investors, what they tend to look for, the particular industries they invest in, and their investment bit-sizes. They will also fix the meetings, make the necessary warm introductions, and get feedback from them, allowing us to fine-tune our pitching. Realistically the whole process would take about 6 months. The hard reality is not all the teams will get institutional funding. Though compared to other accelerators, EF teams has a higher chance of getting seed funding and at higher valuations. Fund raising is another emotional roller coaster that I&#8217;d write about when its over.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on React with Redux]]></title>
    <link href="http://liangzan.github.com/blog/blog/2018/06/01/thoughts-on-react-with-redux/"/>
    <updated>2018-06-01T17:25:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2018/06/01/thoughts-on-react-with-redux</id>
    <content type="html"><![CDATA[<p>I have been writing <a href="https://reactjs.org/">React</a> and <a href="https://redux.js.org/">Redux</a> for the past months. React and Redux are not the first Javascript frameworks I&#8217;ve learnt; nor is it likely to be the last. We want <a href="https://blog.liangzan.net/blog/2018/01/12/things-i-would-do-at-a-new-startup/">something proven</a> and something that has a thriving eco-system surrounding it. At this moment(2018), we see 2 options - React or <a href="https://angularjs.org/">Angular</a>. We decided that React with the potential to support mobile apps would be the sensible decision. React coupled with Redux gives us the structure for a modern Javascript application. Well, nothing is perfect. Let&#8217;s visit some of those aspects where I felt it ticked and where it didn&#8217;t for React with Redux.</p>

<!-- more -->


<h2>What ticks</h2>

<p>State changes in Redux follows a <a href="https://redux.js.org/basics/data-flow">unidirectional flow</a>. It is easier to reason about state when changes are standardised. The benefit becomes apparant when there are more than 20 components. State is found where they ought to be. Coupled with the Redux and React Chrome extensions, debugging is efficient. New hires who know Redux will be productive immediately. That is a hallmark of good design. Good design is intuitive. Having conventions gives productivity gains. In projects where there is no convention for how state flows, wasting time finding where the state is, is inevitable. Redux has achieved its original goal.</p>

<p>It is obvious that Redux is heavily influenced by <a href="https://www.haskell.org/">Haskell</a>. Side effects are kept compartmentalised in actions; similar to the IO monad. The idea of pure functions is borrowed from functional programming. Actions are similar to a Haskell Type. It&#8217;s heartening to see Redux applying proven ideas from functional programming. The same techniques will serve to keep complexity at bay as the application grows.</p>

<h2>What didn&#8217;t tick</h2>

<p>There are caveats though. The benefits comes when developers follow <em>the Redux way</em> religiously. Redux doesn&#8217;t prevent you from mucking things up. You can add a pubsub library or a data binding library; Redux won&#8217;t complain. Staying disciplined and following the Redux way is an exercise in how well ran your team is. There are times when it felt more natural to use pubsub to handle state. In a small to medium sized code base with small teams of 1 to 3 engineers, I&#8217;d argue that it makes sense to derive the flow of the state according to what the application does, rather than forcibly fit it to a standard unidirectional flow. For a large codebase with a large team, keeping it standard prevents the application from getting too complex. It is easier for everyone to understand the codebase, helps in debugging and makes it faster to add features.</p>

<p>Another caveat is Redux assumes state is a key-value structure. Often we&#8217;d have a list of options in a dropdown where the user selects different options. There are no helpers for handling state in lists. We need to manually manage state changes within the lists, which I thought a mature framework like Redux would have it covered.</p>

<p>Another common grievance - <a href="https://en.wikipedia.org/wiki/Boilerplate_code">boilerplate</a>. There are lots of boiler plate to write. We have to write the components, the containers, the actions, and the reducers for the most basic of functionalities. I thought this is a design choice. Redux could choose to generate those boilerplate(like <a href="https://rubyonrails.org/">Rails</a>), or let developers wire these parts on their own. To generate the boilerplate, Redux needs to make assumptions. For every action, which reducer should handle it? Should Redux generate a corresponding reducer for every action? In cases where you want multiple reducers to handle the same action, how do you provide an abstraction for that? How would the <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> look? Should Redux make such decisions for you? It quickly becomes apparant that abstracting away the boiler plate reduces the flexibility. That&#8217;s why the having boilerplate is a design trade-off. You write more code but you have the flexibility to wire the components to do what you want.</p>

<p>Almost like the <a href="https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs">Maslow&#8217;s hierarchy of needs</a>, every library has its purpose. At the base level, the library has to first work. At the next level, the library would need to work well with others. At the highest level, you&#8217;d ask if there is a philosophy guiding its design. A library is an opinion on how to solve a problem. Redux is one library that not only works, it is one that has a strong principles guiding it. It believed in being minimalist, in convention over configuration, in keeping side effects in control, in that you know best and in simplicity. I&#8217;m glad to have spent time learning <em>yet another</em> Javascript framework, and I hope I&#8217;ve convinced you too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team formation at EF]]></title>
    <link href="http://liangzan.github.com/blog/blog/2018/04/02/team-formation-at-ef/"/>
    <updated>2018-04-02T17:19:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2018/04/02/team-formation-at-ef</id>
    <content type="html"><![CDATA[<p>This is part two of my experiences going through <a href="https://www.joinef.com/">Entrepreneur First</a>. This is also where EF is different from other accelerators - team forming. From my earlier post, EF divides the cohort into 3 groups. The technical edges, the product edges, the domain edges, and not gently, people from different edges are nudged to team up. Did that happen?</p>

<!-- more -->


<h2>Patterns</h2>

<p>These are my general observations as I have no access to data. The first observation is people with similar interests tend to team up. For example, those interested in blockchain want to work together. Another example, the quantum physicists in my cohort want to work together as they can understand each other.</p>

<p>The second observation is people with complementary skills tend to team up. Typically there is one person with a strong idea, and he or she finds another person who has the skills to implement it. The domain edges form teams like that. For example, we have a domain edge in sports teaming up with an augmented reality expert to build a AR solution for sports teams. My team is one. It is a domain expert in the finance space who needed someone with deep engineering skills to build infrastructure for the emerging crypto space.</p>

<p>The third observation is people who like each other tend to team up. There is still a need to find a good business case to justify the team. These cases are fewer in number as they often have problems finding a business model around their skills. Typically the technical edges(from academia) like working with each other due to their similar backgrounds. Similar examples includes founders who came from the same country.</p>

<h2>Breaking up</h2>

<p>Breaking up is an essential part of the process. Form a team fast, break up fast - that is the advice. EF tries their best to put the stigma away - by cheering whenever a team breaks up. We are congratulated as though we have left a bad relationship. No one sets out to break up on a whim. Most are careful before committing to working together. But still, it does happens. I&#8217;ve been through one, and it is painful like any form of failure.</p>

<p>Why do teams break up? When they are not making progress, they break up. Progress is loosely defined as having received validation that there is a genuine problem or making head ways towards developing new technologies. When teams are progressing slowly, EF nudges the team to break up. Breaking up is entirely the team&#8217;s choice. There are teams who have deep faith in their work and don&#8217;t want to break up. Towards Judgement Day(which is the investment panel), these teams tends to break up. As time passes, as the team talk to more customers, the invalidation becomes clear. Seeing there are no customers, there is no reason to chase a lost cause. Inevitably they break up. At that point of breakup, it can be too late to validate another idea as there are only those weeks before Judgement Day. So EF always advise us to break up quickly.</p>

<p>Break ups happen when founders are not aligned. A team came together to work on an idea that both founders are keen on. Due to customer feedback, the form of the idea changes. When it becomes something that the founder is not interested in, and if that is something they cannot accept working on, the team breaks up.</p>

<p>EF nudges teams to break up when the founders have poor fit to the skills required to build the business. Obviously if the founders don&#8217;t have the skills to build the business, they get nudged to break up. If the founders have a super set of skills, they get nudged to break up too. For example, an idea demands only software skills, whereas the founder has both hardware and software skills, EF encourage the team to break up. The rationale is this founder can work on another idea which can leverage the founder&#8217;s skills fully. That team will be stronger as there aren&#8217;t others with that unique set of skills who wants to start a company at this moment. What happens this creates sets of founders with strong skill alignment to the problem they are solving.</p>

<p>There are also people who cannot find a co-founder. Sometimes they are deeply attached to an idea, and sadly they are unable to convince another to join their cause. Another group are those who are not committed. They continue with their existing work and hope to build a business on their spare time. Starting a business is hard. Those who don&#8217;t commit have difficulty finding others to work with them. There&#8217;re those who fail to find a viable business model. If the business case is weak, they fail to convince others to join them. Lastly, people who are hard to work with, don&#8217;t form teams and drop out.</p>

<p>True to EF&#8217;s advice, breaking up does help form strong teams. It creates balanced teams going after validated ideas. When I look at the teams, it is as though they were tailor made to solve that problem. A founder has to find a co-founder, with a specific set of complementary skills, quit what they are doing at the same time to start a company. What is the probability of that happening in the wild? That is scary. I think that is an effective way to create startups. Time will show us if this model performs better. Amongst the top teams in the cohort, half of those are from broken up teams, including mine. I&#8217;ll share about what happens after during the validation phase in a separate post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on dApp development]]></title>
    <link href="http://liangzan.github.com/blog/blog/2018/03/22/thoughts-on-dapp-development/"/>
    <updated>2018-03-22T17:07:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2018/03/22/thoughts-on-dapp-development</id>
    <content type="html"><![CDATA[<p>I&#8217;ve recently got into <a href="https://blockgeeks.com/guides/dapps/">dApp</a> development. Having programmed for a while, here&#8217;re some thoughts on building dApps on <a href="https://www.ethereum.org/">Ethereum</a>.</p>

<!-- more -->


<h2>Smart contracts are powerful</h2>

<p>Interacting with <a href="https://blockgeeks.com/guides/smart-contracts/">Smart Contracts</a> feels like interacting with an instance of an object. It feels familiar yet odd at the same time. The familiar bit comes from the interaction. You can call functions on it, you can store value on it, it is like regular programming. The weird bit is this is happening in <strong>public</strong>. Every transaction can be held to scrutiny and there is no argument whether something happened or not. That is powerful.</p>

<p>Smart contracts is a novel angle of encapsulating logic and data. Immediately I can see that it solves the payment problem for the couriers. The customer can put out a smart contract, put ether in it and wait for couriers to participate. Place delivery jobs in a variable, let couriers can bid publicly via transactions, and pay them by the contract after they perform the delivery successfully. There would be no basis for disputes. Today, such logic is contained in monolithic applications controlled by different logistics companies, and they don&#8217;t inter-operate well. I can imagine a future where developers will primarily write smart contracts, and leave the rest to the blockchain infrastructure.</p>

<h2>dApps development is not hard</h2>

<p>I&#8217;ve read about the shortage of blockchain developers. This led me to assume that dApp development is hard. Frankly, I don&#8217;t find its learning curve steeper than a new programming language or a new Javascript framework. In fact I find learning <a href="https://www.scala-lang.org/">Scala</a> or <a href="https://reactjs.org/">React</a>/<a href="https://redux.js.org">Redux</a> harder. It&#8217;s suffering from growing pains where documentation and tooling support are lagging behind. I also find that you need a basic understanding of how blockchains work. Otherwise the borrowed metaphors such as wallets, addresses, transactions would be confusing. On the whole, things do work, albeit with some rough edges.</p>

<p>For example, <a href="http://truffleframework.com/ganache/">Ganache</a> would crash sometimes. For me, that happens once every other day; annoying but livable. I was old enough to have used <a href="https://en.wikipedia.org/wiki/Windows_98">Windows 98</a>; that crashed every 2-3 hours. No doubt in 2018 we should demand higher standards. Another example - <a href="http://truffleframework.com/">Truffle</a>. Again documentation cannot catch up. I wanted to deploy contracts using Truffle and I found no documentation. In the end, I had to dig through the tests of <a href="https://github.com/trufflesuite/truffle-deployer">truffle-deployer</a> to learn how to apply it.</p>

<p>Don&#8217;t get me started on <a href="https://solidity.readthedocs.io/en/v0.4.21/">Solidity</a>. I was trying to do something basic - transferring funds to an address. I thought this <em>ought</em> to be a solved problem since transactions are what Ethereum is meant for. Instead I found an intuitively named function called <code>call</code> used for that purpose. Flabbergasted, I checked the documentation, where I found two functions named <code>transfer</code> and <code>send</code> written for that purpose. Why isn&#8217;t people using that? Could programmers are trying to be clever? When the source code is often the only source of documentation, this leaves me feeling apprehensive. Luckily after digging deeper, I realised that <code>send</code> fails <em>silently</em> when the recipient runs out of gas, hardly something uncommon. If I&#8217;d like to interact with a contract, how do I know what functions are there? Sadly there is often no documentation; there is <em>only</em> Solidity code. The onus is on the developer to understand what the contract does by reading the code. Sounds like Haskell. Another annoyance is Solidity errors are often not meaningful. I was in the dark as to what happened when the contract crashed. After much searching, I realised I have to use the <a href="http://truffleframework.com/docs/getting_started/debugging">debugger</a>. The debugger worked, thankfully. The worst bit is the bug came from calling a non-existent constructor. How did a wrongly named constructor pass the compiler? One last thing - Solidity doesn&#8217;t have syntax highlighting on <em>Github</em>. Programming with the blockchain is like programming in the 80s - not for the faint of heart.</p>

<p>Blockchain is like the Internet in the 90s. I do see its potential. Its effect would be similar to what containers did for shipping. This time the impact would reach everywhere. Contrary to the norm, I don&#8217;t find the learning curve for Blockchain development steep. It reminds me of the time when mobile app development was expensive as developers were scarce. Prices came down when more developers learns the craft and enter the pool. It&#8217;s exactly the same now for blockchain development. Given time, things will improve. If you&#8217;re still on the fence, don&#8217;t hesitate anymore, it is time to get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joining EF in their third batch]]></title>
    <link href="http://liangzan.github.com/blog/blog/2018/03/14/joining-ef-in-their-third-batch/"/>
    <updated>2018-03-14T17:10:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2018/03/14/joining-ef-in-their-third-batch</id>
    <content type="html"><![CDATA[<p>I&#8217;m now with an accelerator called <a href="https://www.joinef.com/">Entrepreneur First</a>, most call it EF for short. I was accepted in their third batch in Singapore. That was sometime this year January. I&#8217;ve wanted to start my own company, having worked at many startups for many years. When opportunity knocked, I took it.</p>

<!-- more -->


<p>Accelerators have existed for a long time and there are many of them. What made EF different was, you apply as an individual before you have an idea or a co-founder. It goes against conventional wisdom that there must be a team or there should be traction. Thinking that way isn&#8217;t wrong - they reduce risks. What EF does is they convince good people who has the capability and desire to start companies, get them together in one room, let them form teams organically, conquer the world, and return their capital; ideally more than what EF has given. Once the teams are formed, EF operates like most other accelerators, the standard mentorship, office space, demo day and investor networks.</p>

<h2>How do you get accepted?</h2>

<p>EF is fabled to be <strong>hard</strong> to get in. I don&#8217;t have the statistics off my head. I suspect it is largely based on what you have done. Those who just got out of school or those barely worked for less than 5 years would accumulate less body of work to be convincing. For my case, I received a cold email which piqued my interest. I checked out their <a href="https://www.joinef.com/">website</a> and found their model interesting. Help me find a co-founder - plus one. Seeing their funders are brand name VC firms like Greylock - plus one. Had big exits(Magic Pony); the model works - plus one. Focus on creating deep tech companies; I like that - plus one. Reading what the cohort companies are doing, realising that they are solving challenging technical problems - plus one. I can&#8217;t find signs of scamminess. A coffee, an interview, an application and a few weeks after, I&#8217;m part of EF&#8217;s third batch in Singapore.</p>

<h2>What does the cohort look like?</h2>

<p>There is a methodology to forming the cohort. EF divides cohort members into 3 types. The first type are the Technical edges[T] - specialists in an area, typically those with Phds. The second type are the Product edges[P] - those who can build a product, typically the engineers. The third type are the Domain edges[D] - those who spent a <em>long</em> time in an industry, coming with deep knowledge on the inner workings and numerous contacts. Each type roughly makes up one-third of the cohort.</p>

<p>Why is it divided into these types? EF not so gently nudges everyone to form a team of two as two is found to be the optimal founding team size. The two making the team are <em>encouraged</em> to be of different edges. The endorsed combinations are DT, DP, PT, TT. It makes sense to combine different edges where each bring different strengths and don&#8217;t step on each other&#8217;s toes. A DT and DP combination is where the Domain edge knows an industry inside out, allowing the team to get to product-market fit quickly, while the Product/Technical edge builds the product. In a PT combination, usually the Product edge fulfils the outward facing role and the Technical edge concentrates on the product. TT combination is the special case like Magic Pony, where 2 technical founders create a cutting edge technology.</p>

<p>The quality and diversity of the cohort is <em>amazing</em>. There are people holding doctorate degrees from various fields - quantum physics to computer science to materials to robotics to mathematics. Some even holding multiple degrees. There are entrepreneurs who ran companies of various sizes, CEOs, CTOs, robotics engineers, hardware/software engineers, musicians, artists, Heads of departments at MNCs, dentists, architects, speech therapists, ex-Googlers, ex-Facebook, ex-Netflix. There are many industries represented - Finance, Marketing, TV, Logistics, Medical, Oil &amp; Gas, Food, Retail, etc. However, most are first-time founders. Most aren&#8217;t veterans either; the median age is in the early thirties.</p>

<h2>What does the team forming phase feels like?</h2>

<p>The team forming phase is a lot like dating. It is an emotional rollercoaster, where there are high highs and low lows. Finding a co-founder is a large helping of serendipity, a dash of skill. Let me address that in another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I would do at a new startup]]></title>
    <link href="http://liangzan.github.com/blog/blog/2018/01/12/things-i-would-do-at-a-new-startup/"/>
    <updated>2018-01-12T16:08:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2018/01/12/things-i-would-do-at-a-new-startup</id>
    <content type="html"><![CDATA[<p>With the benefit of spending years at the trenches, watching decisions and their eventual impact, subconsciously I&#8217;ve formed my opinion on what I would do if I were to start building a new product.</p>

<!-- more -->


<h2>Using the New And Shiny</h2>

<p>That is for me tells me that the decision maker belongs to one of the <a href="https://en.wikipedia.org/wiki/Cargo_cult_programming">cargo-cult</a>. I&#8217;ve been through this stage. Why not the New And Shiny? Since it is new, few would have used it. Fewer using it means the eco-system of libraries is not as mature, and you are less likely to find solutions to your problems on StackOverflow. It means the hiring pool is smaller, with people coming in to learn rather than being productive at the start. It means nobody knows where the New And Shiny&#8217;s warts are, so unfortunately you will be the one who will find those warts in <strong>production</strong>. woken up by a phone call at 3am on a Sunday morning, realising the server has crashed, and nobody knows why. Warts are found through the hard way, not discovered through simple programs written on blog posts. All these small things slows you down, a literal death by a thousand cuts to a fledgling company.</p>

<p>Your job as a decision maker is to deliver the product, working, on time and on budget. It is not the time to be dabbling on new technologies to add to your resume, especially when there is limited time. If you haven&#8217;t written production code using it for more than a year, you don&#8217;t know it. Use something proven, use something you know. Your customers don&#8217;t care what powers it, and your customers are the ones you should be caring about, not impressing other programmers at meetups. Most New and Shiny are another way of achieving the same thing. A new Javascript framework is just another take on how to manipulate HTML. Maybe it is faster, or more elegant, to your customers it is the same - HTML. I&#8217;m guilty of this, and I recognise it especially in younger programmers. Control yourself and do the right thing - pick the boring, stable and working technologies that you worked with before.</p>

<h2>Throwing away working legacy code</h2>

<p>I&#8217;ve been guilty of throwing away perfectly working code, on several occasions, using excuses that it is poorly written, performing badly, or any jargony reason to pull one over business people. It is one of those tempting decisions to make when you are given a brownfield project. It is more exciting to start in a New And Shiny technology than to work on the old problem.</p>

<p>For the programmer, there are many reasons to do that. First, you get a chance to learn a New And Shiny technology, add it to your resume, and to demonstrate you have the brains to pick up the New And Shiny technology which is so difficult to learn, which proves that you are one of the elite. Second, you don&#8217;t have to wade through the humongous code base, littered with undocumented special cases, and did I say no tests? The alternative is to keep the codebase, which means reading <em>a lot of</em> code. Reading code is boring, painful, and much harder than writing your own, preventing the conception of what could haven been an elegant architecture from you. Third, it is much more impressive to be the person who wrote X, rather than to be the person who maintained X.</p>

<p>There is every reason for the programmer to want to write new stuff. Not for the poor business guy. The customers are expecting this list of old bugs to be fixed and these long-asked-for features to be built next month. Sadly, those aren&#8217;t coming. The programmer is throwing away <em>working</em> code and writing new ones which does HALF of what the <em>working</em> code did. That won&#8217;t be ready anytime soon. Woe on the business guy who has to placate the impatient customer. It is times like this that the customer feels they are not loved, and there should be better solutions out there, which they promptly switches upon finding something better. Business guys, don&#8217;t fall for this, the programmers are fooling you.</p>

<p>Control yourself(myself included), do not throw away working code - do the right thing which is to refactor the code, add tests and documentation.</p>

<h2>Processes are like habits</h2>

<p>An idea that I picked up from the tech echo-chambers is that processes are evil. They belong to the big bureaucracies, who can&#8217;t innovate. Only when I witnessed how the lack of processes harmed a growing company, that I realised these blog posts are written by people who&#8217;d never scaled a company before. I have to remind myself to be careful of what I read. Processes are like habits, good habits that helps the company stay aligned. They exists because they work at scale. They help the company stay on track as they add more employees, and keep chaos sane as more customers come. Things like proper documentation, proper commit messages, a process to release, regular progress updates, helps the company to stay aligned. Again, when to introduce processes depends. I&#8217;d lean towards introducing them early to cultivate the habits early. But not too much that it feels strangling. People should not be afraid to question processes. We have a tendency to accept processes as sacred rules - they are not. They are decided in the earlier days when the company was facing problems A, but now it can be a different set of problems, and those processes don&#8217;t work in the same context. Obviously you have to change them. Use processes to help your team stay aligned, not to hinder.</p>

<h2>Embrace technical debt</h2>

<p>We are taught from young that debts in any form are to be abhorred. Debts are for irresponsible people, people who can&#8217;t manage their finances, like gamblers, spendthrifts. We associate technical debt in the same way, thinking we should avoid them like plague. Contrary to that thinking, at the early stages, it is alright to tolerate technical debt.</p>

<p>At the early stage of a company, the biggest problem is product-market fit. In other words, is the thing you&#8217;re building solving a real world problem? Iterations should be fast. You should not be agonising over how scalable the code is, or whether code coverage is at 100%. Those things don&#8217;t matter if nobody wants the thing you&#8217;re building. I&#8217;ve seen this time and again. The founders come up with an idea, fall in love with it, thinking they know best, they build it using the state of the art, so proud of what they&#8217;ve built, not realising nobody wants to pay when they start selling it. All that elegant design, all those tests, are a waste of time, in the early stage that is. Only when you have the confidence that customers want what you&#8217;re building, then it is time to invest time to do quality work.</p>

<h2>Remote working at the start</h2>

<p>I was a believer in remote working. Now I&#8217;m a half-believer. It doesn&#8217;t work at the early stages, when the team culture is still forming. You simply don&#8217;t form bonds remotely. It doesn&#8217;t work for inexperienced engineers where you need teach. It doesn&#8217;t work when the time zones are more than 2 hours apart. Any time difference slows decisions and hamper communication. It doesn&#8217;t work when you&#8217;re at the early stage of building the product, when the team needs to make decisions fast and communicate the common vision. Having remote team members at that stage slows things down. At what point can you consider remote working? When you feel that you&#8217;ve reached product-market fit. When you have processes that ensures quality work, and good communication. When everybody, especially the decision makers, believe in remote work.</p>

<p>These are my opinions. Experiences forms opinions. Nobody will experience the same set of problems - they are unique to you. Advice usually comes in the form of this is what I did when I had this problem, I made this mistake, and this is what I would do if I can do it again. What works in my context, may not work in your context. Always take advice with a pinch of healthy skepticism. But when you have encountered a similar context, and knowing that others have made this mistake, it&#8217;d be foolish to repeat it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is the probability of my child entering Nanyang Primary or Ai Tong]]></title>
    <link href="http://liangzan.github.com/blog/blog/2017/07/19/what-is-the-probability-of-my-child-entering-nanyang-primary-or-ai-tong/"/>
    <updated>2017-07-19T12:30:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2017/07/19/what-is-the-probability-of-my-child-entering-nanyang-primary-or-ai-tong</id>
    <content type="html"><![CDATA[<p>Like most parents in Singapore, we leave no chance to getting to the best schools for our children. My wife wants to move closer to Nanyang Primary to increase our chance of getting a place. I did not want to do that. Our chances are high enough that it doesn&#8217;t warrant such extremes. I realised I needed to prove my point.</p>

<!-- more -->


<h2>How does primary school registration work?</h2>

<p>For the uninitiated, primary school registration is broken up into phases - similar to a priority queue, where the earlier phases get the places first. Phase 1 is for siblings of current students. Phase 2A is for the alumni. Phase 2B is for parent volunteers, community leaders, anybody related to the school. Finally, Phase 2C is for the public. When there are more applicants than places, citizens are prioritised over foreigners, followed by those living near the school. <a href="https://www.moe.gov.sg/admissions/primary-one-registration/phases">Details</a> on the official website</p>

<p>I&#8217;m lucky. I have two options. As an alumni of Nanyang Primary, I qualify for Phase 2A. As I live near Ai Tong School, I have a chance in Phase 2C. Both schools are wife-approved. What is the probability of my child getting into either schools?</p>

<h2>Probability of getting into Nanyang Primary</h2>

<p>The probability is dependent on 2 things: number of applicants and the number of places. The number of places depends on the number of applicants from Phase 1. How many will apply for Phase 1 in 2018?</p>

<h3>Finding the number of places for Phase 2A</h3>

<p>If you didn&#8217;t know already, the <a href="http://www.tylervigen.com/spurious-correlations">number of people who drowned by falling into a pool correlates to the films Nicholas Cage appeared in</a>. We ought to treat correlation results with care. However, it makes sense that the birth rate <em>should</em> correlate to the number of applicants. I took the <a href="http://www.tablebuilder.singstat.gov.sg/publicfacing/createDataTable.action?refId=3733">birth data</a> from the published government statistics. The <a href="http://nyps.moe.edu.sg/admission/p1-enrolment-data">enrolment statistics</a> and <a href="http://nyps.moe.edu.sg/admission/balloting-statistics">balloting statistics</a> for Nanyang Primary are published as well.</p>

<table class="table-values">
  <thead>
    <tr>
      <th>Year</th>
      <th>Residents Births</th>
      <th>Phase 1 applicants</th>
    </tr>
  </thead>
  <tbody>
    <tr><td>2016</td><td>35,129</td><td>196</td></td>
    <tr><td>2015</td><td>36,925</td><td>205</td></td>
    <tr><td>2014</td><td>37,277</td><td>191</td></td>
    <tr><td>2013</td><td>37,074</td><td>195</td></td>
    <tr><td>2012</td><td>36,272</td><td>187</td></td>
    <tr><td>2011</td><td>35,528</td><td>199</td></td>
    <tr><td>2010</td><td>35,135</td><td>179</td></td>
    <tr><td>2009</td><td>35,474</td><td>176</td></td>
    <tr><td>2008</td><td>38,555</td><td>180</td></td>
    <tr><td>2007</td><td>39,281</td><td>180</td></td>
  </tbody>
</table>


<p>The above is a table of data tabulating the number of resident births and Phase 1 applicants to Nanyang Primary. The <a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient">correlation coefficient</a> between the applicants and births is below.</p>

<table class="table-values">
  <thead>
    <tr>
      <th>Correlation Coefficient</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
   <tr>
     <td>Phase 1 vs Births</td>
     <td>-0.053323383</td>
   </tr>
  </tbody>
</table>


<p>The number of applicants is negatively correlated to the birth rate. Which means when there are more births, there are less applicants. It doesn&#8217;t make sense. Let&#8217;s look at the scatter plot.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/nyps_phase1_vs_births.png" title="Nanyang Primary Phase 1 applicants vs Births" ></p>

<p>Applicants in 2018 will come from births in 2012 which is <strong>38,641</strong>. To be conservative, I selected the three points on the top left, drew a line through them to interpolate the number of applicants for 2018. It is <strong>215</strong>. Since the number of places at Nanyang is <strong>390</strong>, that leaves</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>390 - 215 = 175</span></code></pre></td></tr></table></div></figure>


<p><strong>175</strong> places. There is a <a href="http://www.todayonline.com/singapore/moe-40-spaces-reserved-every-primary-school-phase-2b-2c-applicants">law introduced in 2014</a> that there must be at least 40 places kept for Phase 2B and 2C. In the worst case scenario, that leaves</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>175 - 40 = 135</span></code></pre></td></tr></table></div></figure>


<p><strong>135</strong> places for Phase 2A. We now know the number of places on offer. Let us find the number of applicants next.</p>

<h2>Finding the number of applicants for Phase 2A</h2>

<p>Likewise, I believe that the number of applicants for Phase 2A <em>should</em> correlate to the number of births.</p>

<table class="table-values">
  <thead>
    <tr>
      <th>Year</th>
      <th>Residents Births</th>
      <th>Phase 2A1 applicants</th>
      <th>Phase 2A2 applicants</th>
      <th>Aggregated Phase 2A applicants</th>
    </tr>
  </thead>
  <tbody>
    <tr><td>2016</td><td>35,129</td><td>105</td><td>19</td><td>124</td></tr>
    <tr><td>2015</td><td>36,925</td><td>70</td><td>42</td><td>112</td></tr>
    <tr><td>2014</td><td>37,277</td><td>67</td><td>61</td><td>128</td></tr>
    <tr><td>2013</td><td>37,074</td><td>67</td><td>63</td><td>130</td></tr>
    <tr><td>2012</td><td>36,272</td><td>54</td><td>75</td><td>129</td></tr>
    <tr><td>2011</td><td>35,528</td><td>43</td><td>75</td><td>118</td></tr>
    <tr><td>2010</td><td>35,135</td><td>41</td><td>84</td><td>125</td></tr>
    <tr><td>2009</td><td>35,474</td><td>38</td><td>67</td><td>105</td></tr>
    <tr><td>2008</td><td>38,555</td><td>39</td><td>57</td><td>96</td></tr>
    <tr><td>2007</td><td>39,281</td><td>21</td><td>60</td><td>81</td></tr>
  </tbody>
</table>


<p>Likewise, we tabulate the number of resident to Phase 2A applicants. The correlation coefficient between the applicants and births is below.</p>

<table class="table-values">
  <thead>
    <tr>
      <th>Correlation Coefficient</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
<tr><td>Phase 2A1 vs Births</td><td>-0.405010861</td></tr>
<tr><td>Phase 2A2 vs Births</td><td>-0.056426767</td></tr>
<tr><td>Aggregated Phase 2A vs Births</td><td>-0.650995037</td></tr>
  </tbody>
</table>


<p>Again we see negative correlation, which does not make sense. It is likely to be skewed by the data from 2007-2008. Let&#8217;s use the scatter plot instead.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/nyps_phase2a_vs_births.png" title="Nanyang Primary Phase 2A applicants vs Births" ></p>

<p>Ignoring the 2 data points from 2007-2008(at bottom right), I draw a line through to interpolate the number of applicants for Phase 2A. I arrived at <strong>145</strong> applicants.</p>

<p>With this figure, we can calculate the probability of my child getting a place in Nanyang Primary in Phase 2A.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Probability = (Number of places) / (Number of applicants in Phase 2A)
</span><span class='line'> = 135 / 145
</span><span class='line'> = 0.931034483</span></code></pre></td></tr></table></div></figure>


<p>My daughter has a <strong>93.1%</strong> chance of getting into Nanyang Primary. That&#8217;s reassuring.</p>

<h2>Backup plan: Ai Tong</h2>

<p>In the <strong>6.9%</strong> chance that my daughter won&#8217;t get into Nanyang Primary, what is the probability of her entering Ai Tong? That is dependent on the number of applicants to the number of places. Since the ruling in 2014 ensures that there are at least 20 places for Phase 2C, let us assume the worst and use <strong>20</strong> for the number of places available.</p>

<h2>Finding the number of applicants for Phase 2C</h2>

<p>Consistent with what we did previously, the number of Phase 2C applicants <em>should</em> correlate to the number of births.</p>

<table class="table-values">
  <thead>
    <tr>
      <th>Year</th>
      <th>Resident Births</th>
      <th>Phase 2C applicants</th>
      <th>Places</th>
      <th>TUR</th>
      <th>APP</th>
      <th>Probability</th>
    </tr>
  </thead>
  <tbody>
    <tr><td>2016</td><td>35,129</td><td>49.83</td><td>33</td><td>0.9</td><td>1.51</td><td>0.662251656</td></tr>
    <tr><td>2015</td><td>36,925</td><td>46.2</td><td>23.1</td><td>0.93</td><td>2</td><td>0.5</td></tr>
    <tr><td>2014</td><td>37,277</td><td>44.55</td><td>29.7</td><td>0.91</td><td>1.5</td><td>0.666666667</td></tr>
    <tr><td>2013</td><td>37,074</td><td>35.838</td><td>6.6</td><td>0.98</td><td>5.43</td><td>0.184162063</td></tr>
    <tr><td>2012</td><td>36,272</td><td>58.212</td><td>23.1</td><td>0.93</td><td>2.52</td><td>0.396825397</td></tr>
    <tr><td>2011</td><td>35,528</td><td>67.32</td><td>19.8</td><td>0.94</td><td>3.4</td><td>0.294117647</td></tr>
    <tr><td>2010</td><td>35,135</td><td>67.32</td><td>39.6</td><td>0.88</td><td>1.7</td><td>0.588235294</td></tr>
    <tr><td>2009</td><td>35,474</td><td>65.835</td><td>49.5</td><td>0.85</td><td>1.33</td><td>0.751879699</td></tr>
    <tr><td>2008</td><td>38,555</td><td>64.548</td><td>39.6</td><td>0.88</td><td>1.63</td><td>0.613496933</td></tr>
    <tr><td>2007</td><td>39,281</td><td>66.33</td><td>49.5</td><td>0.85</td><td>1.34</td><td>0.746268657</td></tr>
    <tr><td>2006</td><td>36,272</td><td>79.596</td><td>29.7</td><td>0.91</td><td>2.68</td><td>0.373134328</td></tr>
  </tbody>
</table>


<p>There is data published on <a href="https://www.kiasuparents.com/kiasu/article/bishan/">Kiasu Parents</a>. The figures are in percentages. I had to infer the places from the percentages. <strong>TUR</strong> stands for cumulative take up rate, which is the percentage of the places that were taken by Phase 2C. <strong>APP</strong> is the ratio of applicants to the places available. As we are assuming the worst, we are not using that to estimate the number of places.</p>

<table class="table-values">
  <thead
    <tr><th>Correlation coefficient</th><th>Value</th></tr>
  </thead>
  <tbody>
    <tr><td>Phase 2C vs Births</td><td>-0.090778097</td></tr>
    <tr><td>Phase 2C vs Places</td><td>0.554622244</td></tr>
  </tbody>
</table>


<p>If we correlate births to the number of applicants, it returns a negative value which does not make sense. If we correlate number of applicants to the places available, it returns a positive correlation of around <strong>0.55</strong>. Parents could be making their decision to apply based on the number of places available.</p>

<p><img src="https://s3.amazonaws.com/static.liangzan.net/blog/aitong_places_vs_phas2c.png" title="Ai Tong Phase 2C applicants vs Places" ></p>

<p>Using the scatter plot, I drew a line to interpolate the number of applicants given <strong>20</strong> places. It is <strong>42</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Probability = (Number of places) / (Number of applicants in Phase 2C)
</span><span class='line'> = 20 / 42
</span><span class='line'> = 0.476190476</span></code></pre></td></tr></table></div></figure>


<p>We conclude that my daughter has a <strong>47.6%</strong> chance of getting into Ai Tong at Phase 2C.</p>

<h2>Bringing everything together</h2>

<p>I have both the probabilities for getting a place in Nanyang Primary and Ai Tong. What I want to know is the probability of getting into either.</p>

<p>Let us first define our terms.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A is the probability that we get a place in Nanyang
</span><span class='line'>B is the probability that we get a place in Ai Tong
</span><span class='line'>C is the probability that we get a place in Ai Tong, given we failed to get a place in Nanyang
</span><span class='line'>D is the probability that we failed to get a place in Nanyang</span></code></pre></td></tr></table></div></figure>


<p>To help the reader, I&#8217;ve copied out some probability equations.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P(A|B) = P(A n B) / P(B) # conditional probability
</span><span class='line'>P(A n B) = P(A) * P(B|A) # when both A and B occurs
</span><span class='line'>P(A n B) = P(A) * P(B)   # for independent events
</span><span class='line'>P(A n B) = 0             # for mutually exclusive events
</span><span class='line'>P(A u B) = P(A) + P(B) - P(A n B)</span></code></pre></td></tr></table></div></figure>


<p>We want the result of the probabilities of A and C together. Since A anc C are mutually exclusive, <code>P(A n C)</code> is 0. The final result would be the addition of both probabilities.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P(A u C) = P(A) + P(C) - P(A n C)
</span><span class='line'>         = P(A) + P(C) - 0
</span><span class='line'>         = P(A) + P(C)</span></code></pre></td></tr></table></div></figure>


<p>We already know <code>P(A) = 0.931</code>. So we need to find <code>P(C)</code>. Let us define <code>P(C)</code> as a conditional probability, since we want the probability of getting into Ai Tong, given that we failed to get a place in Nanyang.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P(C) = P(B|D)
</span><span class='line'>     = P(B n D) / P(D)</span></code></pre></td></tr></table></div></figure>


<p>Does getting a place in Nanyang affect the probability of getting a place in Ai Tong? The number of places don&#8217;t change as it is set by law. The number of applicants will still be the same as people applying do not care about my result. They are mutually exclusive. Therefore,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P(B n D) = 0</span></code></pre></td></tr></table></div></figure>


<p>Which means</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P(C) = P(B|D)
</span><span class='line'>     = P(B n D) / P(D)
</span><span class='line'>     = 0</span></code></pre></td></tr></table></div></figure>


<p>That is obviously wrong. Did we do something wrong? Let&#8217;s redefine C as the probability that we get a place in Ai Tong, and we failed to get a place in Nanyang.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P(C) = P(B n D)
</span><span class='line'>     = P(B) * P(D)</span></code></pre></td></tr></table></div></figure>


<p>We plug the result back to our first equation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>P(A u C) = P(A) + P(C)
</span><span class='line'>         = P(A) + (P(B) * P(D))
</span><span class='line'>         = 0.931 + (0.476 * 0.069)
</span><span class='line'>         = 0.963844</span></code></pre></td></tr></table></div></figure>


<p>It means that my daughter has an increased chance of <strong>96.3%</strong> of getting into Nanyang or Ai Tong. That&#8217;s reassuring.</p>

<p>With that figure, I can tell my wife not to worry. With this simple episode, you can see the usefulness of Math in helping to make decisions. Intuition can be <a href="https://en.wikipedia.org/wiki/Birthday_problem">misleading</a>. We must demand rigour in thinking when making decisions that has big impact.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why am I doing a Math degree]]></title>
    <link href="http://liangzan.github.com/blog/blog/2017/07/03/why-am-i-doing-a-math-degree/"/>
    <updated>2017-07-03T05:48:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2017/07/03/why-am-i-doing-a-math-degree</id>
    <content type="html"><![CDATA[<p>I am applying to do a Math degree in my mid-thirties, knowing how much work that is, mindful of my work and family commitments, and not forgetting the cost. I&#8217;ve got an <a href="https://www.ece.nus.edu.sg/home/education/ee.html">Electrical Engineering</a> degree. It&#8217;s common to do a graduate degree, though a more conventional route would be to do a MBA or a Masters in Computer Science/Data science. Yet I chosen a Bachelor&#8217;s in Math.</p>

<!-- more -->


<h2>Why Math?</h2>

<p>The longer you spend in the technology industry, the more you realise that everything boils down to Math. It may not appear so on the surface. In day to day work, a working developer rarely touches Math. You don&#8217;t need Math if you&#8217;re building <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> apps, calling <a href="https://en.wikipedia.org/wiki/Application_programming_interface">APIs</a> or munging the data and presenting them. But as you reach scale, that is when you encounter problems that needs Math.</p>

<p>Take for example, you&#8217;re building <a href="https://www.ubereats.com">Uber Eats</a>. Your promise to the customer is to deliver what she ordered within an hour. Easy. We match the order to the driver who is nearest to the restaurant. That&#8217;s fine for 1 order, what happens when there&#8217;re 10 orders to the same restaurant with only 2 drivers? Let&#8217;s split the orders by the number of drivers which is 5 each, then deliver them in order by proximity. Problem solved. What happens when there&#8217;re 100 orders with a pool of 5 drivers to the same restaurant? Worse, the same restaurant has 3 branches, each capable of serving the orders. How are you going to match order to driver such that you can satisfy them within an hour? That is <a href="https://en.wikipedia.org/wiki/Vehicle_routing_problem">route optimisation</a> which boils down to combinatorial optimisation - Math.</p>

<p>At a certain point, I wasn&#8217;t satisfied with coming out with algorithms that <em>feels intuitively logical</em>. How do you know that this is correct? Some would say tests. For the Uber Eats example, we can decide on an algorithm that divides the orders equally amongst the drivers by proximity. It <em>feels</em> logical, but is it truly correct? Testing can verify that the implementation works. But tests won&#8217;t show you how to craft the algorithm correctly. Math does.</p>

<p>Math is at the heart of many fields. <a href="https://en.wikipedia.org/wiki/Data_science">Data science</a> is <a href="https://en.wikipedia.org/wiki/Statistics">statistics</a>, <a href="https://en.wikipedia.org/wiki/Linear_algebra">linear algebra</a>, <a href="https://en.wikipedia.org/wiki/Probability">probability</a> and <a href="https://en.wikipedia.org/wiki/Calculus">calculus</a>. <a href="https://en.wikipedia.org/wiki/Cryptocurrency">Cryto-currencies</a> is <a href="https://en.wikipedia.org/wiki/Number_theory">number theory</a>, probability and <a href="https://en.wikipedia.org/wiki/Finite_field">finite fields</a>. Facebook, Google and LinkedIn are built on <a href="https://en.wikipedia.org/wiki/Graph_theory">graph theory</a>. Not just in technology, Math touches many industries. Those figures in the insurance you bought were calculated by an <a href="https://en.wikipedia.org/wiki/Actuary">Actuary</a> who is using Probability. <a href="https://en.wikipedia.org/wiki/Economist">Economists</a> uses Statistics to help formulate policies. Physicists use Math to model phenomenon and to make predictions. There&#8217;s a ceiling to the scale of problems you can solve without using Math. We should demand rigour when formulating solutions and not be contented with what may appear to work on the surface.</p>

<h2>Learning for working adults is broken</h2>

<p>Education as a product is broken for working adults. For a part time Masters at a local university, you need to spend 3 evenings(1900-2230) and one full day on Saturday(0900-1700). That&#8217;s not accounting for time spent on studying, travelling and assignments. How much time does that leave for my family? That would be the end of my social life for those years. I inquired about doing less credits by stretching out the course.</p>

<blockquote><p>Sorry, you cannot do that.</p></blockquote>


<p>Paying a five figure sum for a course where I have to fit my schedule around yours is something I don&#8217;t comprehend. I suspect it was to fit in with their full-time programmes, to streamline costs. Implicitly it shows that part time students are less important. Sorry, but this product is not for me.</p>

<p>The thought of getting another degree was put away. Until one day, my colleague <a href="http://www.machinesung.com/">Kenny</a> mentioned he was going to do a degree. He was working full time and have a family. He managed to find a distance course that allows him time with his family, not so expensive that he has to downgrade his lifestyle, accredited, and offers Math. Initially I thought it was one of <a href="https://www.udacity.com">Udacity</a> or <a href="https://www.coursera.org/">Coursera</a>. It wasn&#8217;t. It was a proper university in the UK, one that only does distance learning - <a href="http://www.openuniversity.edu/">Open University</a>. That piqued my interest.</p>

<p>There&#8217;re lots of options for further education. Why not Udacity or Coursera? I wanted something structured, not a series of unrelated short courses. <a href="https://en.wikipedia.org/wiki/Massive_open_online_course">MOOCs</a> are out. How about a MBA? No, I don&#8217;t believe you can learn how to run a business in a school. Reading about them in case studies is not real. That is unless you want to build your network. Again, networking is not exclusive to MBA programmes. MBAs are out. What about a Masters in Computer Science? There is a good <a href="http://www.cc.gatech.edu/academics/degree-programs/masters/computer-science/admissionreqs">Masters programme</a> in Georgia Institute of Technology which can be completed via distance learning. I took a look at the courses. A third of them won&#8217;t be useful as I won&#8217;t be working in those fields, a third of them are things I already know, the last third is what&#8217;s worth learning. Computer science is out. How about Finance? I saw how useful accounting knowledge was to understanding the health of a business, and how it helps in making decisions. Between Math and Finance, Math felt the more useful and the more applicable. Math is also timeless. With a background in Math, topics in Finance should not be a problem.</p>

<p>There are other courses that offers Math, but none that focuses exclusively on distance learning students like the Open University. Material and classes are online and can be taken at your own pace. The course can be extended for up to 16 years. The course fees are half of what it costs for the similar in the US. Plus it is accredited in UK and Europe. The <a href="http://www.openuniversity.edu/courses/find/mathematics-and-statistics">modules</a> look applicable and interesting. The Open University is distance learning done right.</p>

<p>I&#8217;m going to enjoy the process of learning. This blog post shares the mental process that I went through when researching for further education. Hopefully it helps you. Everybody has 24 hours a day. It is how you make use of time that decides where you&#8217;re going.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using more than a hundred stored procedures in production]]></title>
    <link href="http://liangzan.github.com/blog/blog/2017/04/23/using-more-than-a-hundred-stored-procedures-in-production/"/>
    <updated>2017-04-23T06:50:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2017/04/23/using-more-than-a-hundred-stored-procedures-in-production</id>
    <content type="html"><![CDATA[<p>At my present company <a href="https://www.storeviva.com/">Courex</a>, we make heavy use of stored procedures, triggers and functions to run our production applications for over 2 years. At present, we have 258 stored procedures, 107 functions and triggers. Few companies use this many stored procedures. Would we recommend it? Yes.</p>

<!-- more -->


<p>Life started as a conventional PHP-MySQL web application built by an outsourced team. Obviously with outsourced teams hired on a shoestring budget, it was plagued with performance issues and bugs.</p>

<h2>Good: Abstraction</h2>

<p>The PHP code was taking input from a form, constructing SQL queries, running them, finally rendering the results. There were a series of different queries to run. This pattern repeated in most parts of the application. Thus the idea of using stored procedures was mooted. What stored procedures did was it abstracted over the series of queries as one procedure call, simplifying the code.</p>

<p>In the past the code did this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="k">FROM</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="k">c</span> <span class="k">FROM</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">foo</span> <span class="k">SET</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="k">WHERE</span> <span class="n">baz</span> <span class="o">=</span> <span class="n">boo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we do this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CALL</span> <span class="n">update_foo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>They are no different from functions. All the usual engineering best practices apply. For example, we are able to name the stored procedure. Now we can use a meaningful name called <code>create_delivery</code> and it does what we expect - insert a delivery row. Instead of updating the same query repeated across 10 files, we update the one stored procedure. That&#8217;s a maintenance win.</p>

<h2>Good: Code reuse</h2>

<p>We have code bases in different programming languages, but 1 database. All code bases have access to those same functions and procedures on the database. We have procedures that converts types, procedures that does validations, triggers that updates time stamps. All that comes free as long as you can make a MySQL query.</p>

<p>In fact, we implemented our message queue purely in stored procedures. All our applications were able to <em>just</em> use it without much fanfare since it is just a sql query.</p>

<h2>Good: Well understood</h2>

<p>SQL along with Javascript are basic skills that we came to expect from every developer. From our experience, introducing them to our team and learning to use them is a non-issue. Jumping in to maintain them is also trivial. That&#8217;s a win.</p>

<h2>Good: No extra dependencies, stability and performance</h2>

<p>The best thing is there are no extra dependencies. I&#8217;ve came to appreciate projects with less moving parts. The less dependencies there are, the easier it is to setup and maintain.</p>

<p>MySQL also does not introduce major versions with breaking changes every few years. Using a mature relational database, we enjoy a level of stability and performance we don&#8217;t usually experience from other software. We enjoy the peace of mind it brings.</p>

<p>Of course there is a flip side.</p>

<h2>Bad: SQL has its warts</h2>

<p>SQL is not a good language for writing complex logic. Its warts slows down development time. Take error messages for example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SQL</span> <span class="n">Error</span> <span class="p">(</span><span class="mi">1064</span><span class="p">):</span> <span class="n">You</span> <span class="n">have</span> <span class="n">an</span> <span class="n">error</span> <span class="k">in</span> <span class="n">your</span> <span class="k">SQL</span> <span class="n">syntax</span><span class="p">;</span> <span class="k">check</span> <span class="n">the</span> <span class="n">manual</span> <span class="n">that</span> <span class="n">corresponds</span> <span class="k">to</span> <span class="n">your</span> <span class="n">MySQL</span> <span class="n">server</span> <span class="k">version</span> <span class="k">for</span> <span class="n">the</span> <span class="k">right</span> <span class="n">syntax</span> <span class="k">to</span> <span class="n">use</span> <span class="n">near</span> <span class="s1">&#39;foo&#39;</span> <span class="k">at</span> <span class="n">line</span> <span class="mi">1</span> <span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>We frequently encounter error messages that does not help. Non-helpful error messages slow down development.</p>

<p>Which brings me to our next point - readability. SQL is hardly readable when queries gets long. Being free-format led to a Cambrian explosion of indentation styles in the wild. I do not relish debugging a three hundred line query with non-helpful error messages.</p>

<p>I firmly belong to the camp where the more restrictive the language is, the easier it is to write correct code. SQL, without the strict mode, is too forgiving.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="ss">&quot;1&quot;</span> <span class="o">+</span> <span class="ss">&quot;1&quot;</span> <span class="o">//</span> <span class="k">returns</span> <span class="mi">2</span>
</span><span class='line'><span class="k">SELECT</span> <span class="mi">1</span> <span class="o">+</span> <span class="ss">&quot;1&quot;</span>   <span class="o">//</span> <span class="k">returns</span> <span class="mi">2</span>
</span><span class='line'><span class="k">SELECT</span> <span class="ss">&quot;a&quot;</span> <span class="o">+</span> <span class="ss">&quot;a&quot;</span> <span class="o">//</span> <span class="k">returns</span> <span class="mi">0</span>
</span><span class='line'><span class="k">SELECT</span> <span class="mi">1</span> <span class="o">+</span> <span class="k">NULL</span>  <span class="o">//</span> <span class="k">returns</span> <span class="n">NUL</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even when expressions does not make sense, it returns something. It should not be type casting automatically, worse, not even showing a warning, giving a false sense of security. This can lead to dangerous bugs. Imagine the query is trying to add a sum of money to a bank account, and somehow one of the parameter is <code>NULL</code> or an alphabet, nothing will get added. As SQL deals directly with data, the impact of mistakes gets magnified.</p>

<h2>Bad: It needs powerful hardware</h2>

<p>As we use hundreds of stored procedures and functions, it is highly demanding on resources. Our database server has to be powerful. We&#8217;re forced to use dedicated hardware. In fact we tried using AWS RDS&#8217;s <code>db.m4.4xlarge</code> which is a 16-core 64GB RAM virtual machine with the max IOPS allocated. It didn&#8217;t work. We encountered table locks every few hours. We&#8217;ve tried various ways to tune it, but the locks did not go away. Mysteriously, once we were on dedicated hardware, it went away. Granted there could be ways to solve it on RDS(we aren&#8217;t professional DBAs), but it showed us that we need to invest on powerful servers for this approach to work.</p>

<p>There is obviously the problem of vendor lock in. SQL is not portable between the different databases. But isn&#8217;t that the same for your <code>&lt;insert your language&gt;</code> code base? To me this is a non-issue. I&#8217;ve also heard cases against stored procedures because of deployment or versioning. I&#8217;m not even sure they are problems to begin with. Treat stored procedures like normal code. Use a version control system. There is a tool <a href="https://flywaydb.org/">Flyway</a> which helps. Things you expect in modern deployment such as versioning, rolling back are all taken care of by Flyway.</p>

<p>Why wasn&#8217;t stored procedures more popular? I suspect it is because it is not <em>new</em> and not <em>marketed</em> much if at all. Most times, it is a short chapter on a SQL book. There are always shiny new things to adopt. Stored procedures does not have the <em>cool</em> factor. But it is <a href="http://mcfunley.com/choose-boring-technology">stable, boring and it works</a>. I got to thank my colleague <a href="https://github.com/prenaux">Pierre</a> who instigated this move. Hopefully more people would come to appreciate this feature of relational databases that almost no one talks about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communication skills > Technical skills]]></title>
    <link href="http://liangzan.github.com/blog/blog/2017/02/19/communication-skills-%3E-technical-skills/"/>
    <updated>2017-02-19T11:38:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2017/02/19/communication-skills->-technical-skills</id>
    <content type="html"><![CDATA[<p>Speaking or writing, is something I thought was basic, something anyone with a basic education can do. I felt that I was done with honing my language skills after I&#8217;ve left school. If the school thinks it was good enough to graduate, it was good enough.</p>

<!-- more -->


<p>Early in my career, I was more interested in building my technical skills. Companies would ask if you knew X language, mastered the Y framework or wrote apps that did Z. Those skills were measurable. Either you wrote something with it or you didn&#8217;t. It is much harder to measure communication skills.</p>

<p>Communication is the act of transferring information to another person. There are large variance in effectiveness. Imagine you have this fantastic idea of <strong>Uber for Sailing boats</strong> in absolute clarity in your head. You want to pitch this idea to a group of tourists, hoping they would try sailing. Communication is like drawing a mental picture of what you see in another person&#8217;s head. A skillful communicator would paint something like this in anothers mind:</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Rembrandt_Christ_in_the_Storm_on_the_Lake_of_Galilee.jpg/482px-Rembrandt_Christ_in_the_Storm_on_the_Lake_of_Galilee.jpg" title="Rembrandt's Church in the store on the lake of Galilee" ></p>

<p>While an average one may only let the tourists think of this:</p>

<p><img class="right" src="https://s3.amazonaws.com/static.liangzan.net/blog/6407942619_fe539a1580_m.jpg"></p>

<p>Your writing bridges the gap to your thoughts. The better you are, the more details they see, the easier they can understand you.</p>

<p>The technical world is awash with difficult concepts that needs better explanations. Take for example the <code>RAM</code>, how do you explain that to a five year old? I had difficulty understanding it when I was in my teens. My teachers calls it the <code>memory</code>. The word <code>memory</code> had connotations with storing information, which I naturally associated with our own memory. So what was the difference between the hard disks and the memory? Both store information correct? Why have two in a computer? This lingering question was never cleared up until after I wrote my first programs years later. The ability to pare down a foreign concept to something digestible is invaluable.</p>

<h2>Brevity in code and in documentation</h2>

<p>There are bad technical writing everywhere. The biggest problem is they are often too brief. Preference for brevity in code has diffused into documentation. Let&#8217;s take a look at how the official Scala docs attempts to explain <a href="http://docs.scala-lang.org/tutorials/tour/currying.html">currying</a>:</p>

<blockquote><p>Methods may define multiple parameter lists. When a method is called with a fewer number of parameter lists, then this will yield a function taking the missing parameter lists as its arguments.</p></blockquote>


<p>The definition is correct. The example demonstrates its usage. But do you <em>understand</em> when to use currying? Code should be brief as you are writing for the computer. But documentation are written for humans. Authors should strive to explain not only the how, but also why and when to use it. More horrors to come.</p>

<h2>Jargon-filled wishy washy</h2>

<p>From <a href="https://www.thoughtworks.com/radar">thoughtworks radar</a>:</p>

<blockquote><p>The microservices style of architecture highlights rising abstractions in the developer world because of containerization and the emphasis on low coupling, offering a high level of operational isolation. Developers can think of a container as a self-contained process and the PaaS as the common deployment target, using the microservices architecture as the common style. Decoupling the architecture allows the same for teams, cutting down on coordination cost among silos. Its attractiveness to both developers and DevOps has made this the de facto standard for new development in organizations.</p></blockquote>


<p>Do you know what the author is trying to say? Let me attempt to simplify it.</p>

<blockquote><p>Containers and Microservice complements each other naturally, yielding advantages. Low-coupling helps your infrastructure become more resilient. In the event of failure, the failure is isolated and does not bring down the entire infratructure. Being isolated allows teams to work independently, cutting down wasted time coordinating deployments. Its advantages has made it the standard for new projects in companies.</p></blockquote>


<p>Start with the topic sentence and cut down on the jargon. Your readers will thank you for it. I learned that from <em>Style</em>. Similar to <a href="https://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758">good user interfaces</a>, clear writing don&#8217;t make the user think.</p>

<h2>The mythical self-documenting code</h2>

<p>Every developer I met likes to write APIs but hates to write documentation. They will spend herculean effort, meticulously designing an intuitive RESTFUL API that scales, but they will put in the least amount of effort necessary to write documentation for it. Even resorting to <a href="http://swagger.io/">auto-generating documentation</a>. They would claim their API is so well designed, the endpoints and parameters so well named, that it is self-documented.</p>

<p>Have you heard of Haskell?</p>

<p>I was looking for a XML library. I found one and wanted to learn how to use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fromContent</span> <span class="ow">::</span> <span class="kt">Content</span> <span class="ow">-&gt;</span> <span class="kt">Cursor</span> <span class="kt">Source</span>
</span><span class='line'>
</span><span class='line'><span class="kt">A</span> <span class="n">cursor</span> <span class="n">for</span> <span class="n">the</span> <span class="n">given</span> <span class="n">content</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes I&#8217;m lucky - there is one sentence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fromTag</span> <span class="ow">::</span> <span class="kt">Tag</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">Content</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Element</span> <span class="kt">Source</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most times I get a type signature.</p>

<p>Haskellers would often argue that the signature is good enough. Do you believe that, or do you think it is just excuses made to hide their disdain for writing documentation? Granted, this malady is widespread across all communities, but Haskell is in a plague that is.</p>

<p>Inevitably when emails start appearing asking what does that endpoint do, what does that parameter mean, you will realise that the time spent answering those emails could be better spent writing documentation in the first place. Perhaps it is because that employers look first for technical skills, and second on how well you communicate, that communication became a second citizen.</p>

<h2>Becoming the 10x multiplier</h2>

<p>If you are good at communication, you naturally become a 10x multiplier of others. It is more valuable than being <a href="http://antirez.com/news/112">the mythical 10x engineer</a>. It is a skill that should be valued, which sadly I don&#8217;t see. Things like onboarding new engineers to a new codebase, technical support overheads, all these go away with someone in your team who is a good teacher and patient enough to write. It is not hard to understand why as communication skill is impossible to quantify. Engineers when given a choice to work on their side projects or writing, would gravitate towards coding. It is what brings them to this profession. That is why we must insist that good engineers must not only build well, they must also communicate well.</p>

<p>How do you be better? Like every skill, you practice. Writing and speaking are but conduits to your thoughts. <a href="https://www.goodreads.com/">Read</a> voraciously, read widely, and think for yourself if what they say is correct. For writing, I recommend <a href="https://www.amazon.com/Style-Basics-Clarity-Grace-5th/dp/0321953304">Style: The Basics of Clarity and Grace </a> by Joseph Williams. This book distils the process of writing well into easy to understand steps. Compared to <a href="https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548">On Writing Well</a>, <em>Style</em> is better. The easy way is to dish out rule-of-thumbs, but he did not. There is a widely held misconception that passive voice is bad. In the right context, the sentence flows better with the passive voice. <em>Style</em> shows you that. You should read both books nonetheless.</p>

<p>I usually write on Emacs, and there are tools which I use and would recommend. I use <a href="https://www.gnu.org/software/ispell/ispell.html">ispell</a> to check my spelling. I use the <a href="https://github.com/bnbeckwith/writegood-mode">writegood mode</a> to catch passive voices and weasel words. There are readability tests like <a href="https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests">Flesch-Kincaid</a> included in writegood mode which scores your writing. I also use <a href="http://www.thesaurus.com/">thesaurus.com</a> to find the exact words for conveying my thoughts.</p>

<p>To hone your speaking skills, practice. Find a <a href="https://www.toastmasters.org/">Toastmasters</a> chapter nearby, attend it and seek chances to speak. Toastmasters have impromptu sessions where you are given a topic to speak on the spot. Those are great exercises for thinking on your feet. In less than 10 sessions, you will lose the fear of public speaking. What is most valuable is you get feedback from others after every session.</p>

<p>There is this verse from <a href="https://en.wikipedia.org/wiki/Tao_Te_Ching">Tao Te Ching</a>:</p>

<blockquote><p>知不知，尚矣；不知知，病也</p></blockquote>


<p>Which means there are knowledge you know you don&#8217;t know(like I know I don&#8217;t know nuclear physics), and knowledge you don&#8217;t know you don&#8217;t know(like that missing breakthrough for robotics, if it exists). We should strive to know what we don&#8217;t know, because it makes you aware of how little you know, and so you will find the reason to keep learning. I certainly hope I have planted enough seeds of doubt in your mind, enough to question if your communication skills is <em>good enough</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being an early employee at startup that exited]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/12/30/being-an-early-employee-at-startup-that-exited/"/>
    <updated>2016-12-30T20:22:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/12/30/being-an-early-employee-at-startup-that-exited</id>
    <content type="html"><![CDATA[<p>I am one of the early employees at Dropsuite, previously known as Dropmysite. Today, I was informed that <a href="https://www.google.com/finance?q=ASX%3ADSE&amp;ei=YOl6WPjdJ8XEuATl-YHwCA">Dropsuite</a> has IPOed in the Australian Stock Exchange. Technically, it is a <a href="https://en.wikipedia.org/wiki/Reverse_takeover">reverse IPO</a>. The whole process took one year. The Australian Stock Exchange, or Australian investors, is known to welcome technology companies, which is why local technology companies choose to list there. Another local example is <a href="http://mig.me/home">mig.me</a>.</p>

<p>It&#8217;s rare to have worked in a startup that exited. Rarer still, in Singapore. I&#8217;ve worked with 6 startups where only 2 of them exited. One(Dropsuite) IPOed, the other(Courex) got acquired. The rest closed down when the money ran out. If you are considering making a move to a startup, you can use my experience as a data point.</p>

<!-- more -->


<h2>Financially, is it worth the move?</h2>

<p>Most startups will offer below market salary and make it up using stock options. Stock options gives you the right to buy X number of stock of the company at X price at X time. Usually you only receive stock options after you&#8217;ve worked after a year or more. Every month, you continue to receive options, until the your allotment runs out. As an early employee, you share in the ownership of the company via owning the options. You partake in shaping the future of the company.</p>

<p>I was one of the early employees. I wasn&#8217;t senior management, but I was in Engineering as one of the lead engineers, leading one of the key products: Dropmyemail. There were about 10 people when I joined. At that time, we were still using a shared office, and the CEO was one table across me.</p>

<p>My options are only a few month&#8217;s worth of salary at the current price. Considering I earned a good chunk of the option pool, this shows that unless you are one of the founders or the investors, you won&#8217;t get rich through stock options.</p>

<h2>Is it worth it at all?</h2>

<p>It depends on which stage you are at your career. If you are young, and weighing between a startup or a corporation, go with the startup. You will learn how to make do with less resources, learn how other functions of the business worked, more importantly learn how to get things done. That experience is priceless and will prove an asset in your later years. If you are not young anymore, either start a company as a founder, or join as the senior management. Otherwise the opportunity cost does not justify the move.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running an ecommerce logistics business is hard]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/12/24/running-an-ecommerce-logistics-business-is-hard/"/>
    <updated>2016-12-24T06:05:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/12/24/running-an-ecommerce-logistics-business-is-hard</id>
    <content type="html"><![CDATA[<p>I came into the logistics industry knowing nothing about it. Along the way I&#8217;ve witnessed competitors going bust(Zyllem), new entrants, competitors switching from logistics to technology(Anchanto), and more. It is a hyper competitive industry. I hope to offer an insider view of the industry, to show why it is so challenging, which hopefully will discourage new entrants, in turn making my job easier.</p>

<!-- more -->


<h2>Challenge 1: Consistency</h2>

<p>It is not how well you do yesterday, but how well you do every day that matters. Consistency is what separates the wheat from the chaff. All logistics companies can perform one delivery successfully on a single day. But to do it at scale, to do it consistently everyday, over a sustained period of time, is very difficult. Customers are paying precisely for that - reliability.</p>

<p>In technology, your product or service is delivered over a controlled environment. For machines, consistency is a natural state. You can change software at will, or expect results to always be the same, barring the same inputs. Not logistics. Where do you find a willing and able person to deliver a parcel? Finding one is trivial, how do you find people for one thousand, ten thousand, one hundred thousand parcels? How do you ensure that the person would deliver the parcel punctually? How do you know the person will perform the deliveries? What happens when the delivery person don&#8217;t turn up? Can you imagine your database server telling you one morning that he don&#8217;t feel like working that day? There are many human variables that can ruin a delivery. Many uncontrollable. As long as last mile deliveries are done by people, there will be that element of uncertainty.</p>

<p>Logistics needs people to perform repetitive tasks consistently over a sustained period. People are not machines. It is a constant battle to make people perform like machines. Eventually it wears you out mentally. That is why companies give up, and transit from a logistics company to a technology company, providing software for other logistics companies.</p>

<h2>Challenge 2: Coping with surges</h2>

<p>Singles day on November 11 is a online shopping day created out of nothing by Alibaba. On that day, we saw sales double or triple. Then there is Black Friday, double twelve, etc. Such is the might of marketing, that they can conjure record breaking sales on any day they choose. Digitally there is no problem coping - just order more servers. Machines don&#8217;t sleep, don&#8217;t complain of overtime and they don&#8217;t quit.</p>

<p>Assuming the sellers stocked up properly, how do you get the product into the hands of the buyer? How do you double your capacity just for that one day? Wait, this is a one day phenomenon and after that all the capacity we built up is going to be thrown away? Worse, do you believe sellers will pay more for delivery during surges? No. They will also insist that delivery standards remain as fast as usual. Because for consumers, it is common to cancel if they don&#8217;t receive their parcels within 2-3 days. When sales are lost due to cancellations, it is logical to shift the blame to the logistics company who cannot fulfill their orders in time. That is why Alibaba invested so heavily in logistics.</p>

<p>Let&#8217;s simplify the problem. Delivering at its current state(before self-driving cars that is), depends on finding three things: a willing person, a transport, or better - a willing person with his own transport.</p>

<h2>Challenge 3: Finance</h2>

<p>Let&#8217;s look at the problem of transport. Scaling transportation assets is simple - buy more vehicles. You buy enough to cope during the high season. Don&#8217;t forget, those vehicle assets are going to be idling during the low season. Depreciation will be glaring at you on your balance sheet. Alright, since it is short term, let&#8217;s rent. Unfortunately, short term rental are more expensive. Costs associated with fixed fleets can spiral out of control very easily. Do you have the money to be in the game? Don&#8217;t forget the margin for logistics is razor thin. Do you even make money after all these investments?</p>

<h2>Challenge 4: People</h2>

<p>Next, the problem of people. Where do you find the people to drive those vehicles? Let&#8217;s put up job ads. To cope with surges, we have to ramp up way before it comes. In practice, you build up your pool of inactive drivers, and call them up during surges. People can be found. The problem with people is not in finding them, but managing them. There are numerous people problems. People not showing up, which creates urgent reschedules. People stealing money collected. People stealing parcels. People being lazy, and not finishing their load. Worse, if they are driving company vehicles, there are even more problems. You have to foot for their petrol when they use the vehicle for personal use(of course they won&#8217;t admit). When there are accidents, you have to pay for fixing the damage. When there are traffic violations, you pay the fines. They won&#8217;t go away. As long as people are part of the equation, you have to deal with such problems. Are you sure you want to deal with such problems every day?</p>

<h2>Challenge 4: Competition</h2>

<p>Last mile delivery is something that anybody can perform. It is a commodity with little differentiation. There are perfect substitutes everywhere. There will always be the price pressure downwards. Margins are razor thin. It is a hyper competitive industry. Are you sure you want to enter this market, given much better alternatives available?</p>

<p>Of course I&#8217;m simplifying the picture. Even for a simple service like delivering, there are differentiators. Certain customers will want finer tracking as their parcels are high value items. If you have invested in technology, you win. Certain customers prefer API integration when creating orders and updating of tracking statuses. If you invested to build the technology, you win. Or if you can perform the delivery faster, at the same price, you win.</p>

<p>It is not impossible to build a thriving ecommerce logistics business, but it is difficult. From the outside, it looks antiquated, inefficient, and ripe for a rethink of the current obsolete ways. That is true 2-3 years ago. Now the landscape is different. New entrants with technology focus came, and has brought the state of logistics to a different level. It has advanced. The market should be consolidating in the next couple of years. I hope I have done my part in dispelling any thought of entering the logistics industry. There are numerous ways to make money, please don&#8217;t choose logistics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should you learn more programming languages?]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/11/13/should-you-learn-more-programming-languages/"/>
    <updated>2016-11-13T15:49:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/11/13/should-you-learn-more-programming-languages</id>
    <content type="html"><![CDATA[<p>In the book <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?ie=UTF8&amp;qid=1479025939&amp;sr=8-1&amp;keywords=pragmatic+programmer">Pragmatic Programmers</a>, the authors made a sensible recommendation: learn a new programming language every year. Each new programming language is a new perspective of solving problems. Adding more under your toolbox helps you gain different perspectives. It sharpens your technical judgment. But is it the best use of your time?</p>

<!-- more -->


<p>Our time is limited. We can only learn a limited amount of things. I feel that we should not be learning any new programming language every year. It is far better to learn a programming language from a different family every year. The more different they are, the better. One should aim to master an object-oriented language such as Java or C#, a dynamic scripting language such as Python, Javascript or Ruby, and a functional language, like Haskell, Scala or F#. You can&#8217;t go wrong with C or Golang either.</p>

<p>Once you have mastered the few common families, adding more and more languages marginally adds to your technical capabilities. Knowing one more way of reading a CSV file does not add much value to you.  On the contrary, I feel that one should master other areas in computer science once you have those languages in your toolbox. Areas like machine learning, computer vision and security. These multiplies your capabilities. Machine learning allows you to solve non-linear problems. Security gives a mindset of how to break things; helping you to build your product correctly from the start.</p>

<p>Definitely, learning is good. There are a lot of things I want to learn. Knowing that we only have limited time, means that we have to say no more often than not. My opinion is one should not invest time in learning more programming languages once you have mastered a few from different paradigm families. Instead, one should venture into other areas of computer science. Do share if you think otherwise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deliberate Constraints]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/10/16/deliberate-constraints/"/>
    <updated>2016-10-16T15:36:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/10/16/deliberate-constraints</id>
    <content type="html"><![CDATA[<p>Two weeks ago, we removed the television in the house. The television, one of the staple appliance in every family where planners assumed that it was present in every house. It was the center of the living room. My children was spending too much time on the television for their parent&#8217;s liking. It has been 2 weeks. In the past during meal times, I see two zombies with eyes transfixed on the television; now they play with each other. Does having more <em>things</em>, means we lead a better quality of life?</p>

<!-- more -->


<p>My current <a href="https://www.courex.com.sg/">employer</a> is a bootstrapped company. It has never seen copious amounts of money. Therefore every decision was made with sustainability in mind. Rule number 1: Don&#8217;t lose money. Without money, the company was forced to do things differently.</p>

<p>To give the reader some context, one of the things we do is <a href="https://en.wikipedia.org/wiki/Last_mile_(transportation">last mile delivery</a>. We used to own a fleet of vehicles and hired full time drivers. Surely that must work because that was what everyone did - We thought. It didn&#8217;t. Owning a vehicle and having full time drivers on payroll was expensive. We didn&#8217;t have the money. We never had enough capacity to cater for the high season, and had vehicles idling during low season. We were forced to switch to the <a href="https://en.wikipedia.org/wiki/Crowdsourcing">crowd sourced</a> model. If we had the money, we would have bought more vehicles. We often wonder, was having no money the thing that saved us?</p>

<p><a href="https://en.wikipedia.org/wiki/Brunei">Brunei</a>, a small country, but blessed with plentiful oil resources. There is no income tax, free education and cushy jobs awaiting in the government. Hard work is optional. When oil prices began to tumble, <a href="http://www.economist.com/news/asia/21661040-autocratic-sultanate-turns-more-devout-oil-money-declines-all-pray-and-no-work">Brunei&#8217;s GDP contracted</a>. Her oil resources are estimated to last for another 24 years. More than half of her economy is linked to oil. When the oil tap dries, I wonder what would happen. Not far away from Brunei, lies another small <a href="https://en.wikipedia.org/wiki/Singapore">country</a>, cursed with no natural resources. When they went independent, even they themselves thought they couldn&#8217;t make it. Having no resources made them do things differently. I&#8217;m sure Brunei must have thought: was the oil a blessing or a curse?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaching the great firewall of china]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/20/breaching-the-great-firewall-of-china/"/>
    <updated>2016-09-20T06:15:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/20/breaching-the-great-firewall-of-china</id>
    <content type="html"><![CDATA[<p>It has been some time since I stepped into China. The great firewall has since advanced. This is a short guide to how to breach the <a href="https://en.wikipedia.org/wiki/Great_Firewall">great firewall</a> meant for the technically inclined. This guide is accurate as of 2016.</p>

<!-- more -->


<h2>Use OpenConnect</h2>

<p>In short, <a href="http://www.infradead.org/ocserv/index.html">OpenConnect</a> works. I&#8217;ve tried OpenVPN and ShadowSocks. Only OpenConnect works.</p>

<p>I used an open source project, <a href="https://github.com/jlund/streisand">Streisand</a> to set it up. Streisand needs a server to set up from. Any of the major cloud providers or any webhost providing Ubuntu 16.04 server will do. I used <a href="https://www.vultr.com/">Vultr</a>.</p>

<p>Streisand runs on <a href="https://www.ansible.com/">Ansible</a>, which I&#8217;m familiar with. First, you need to <code>git clone</code> the project to your local machine. I updated the IP address under the <strong>inventory</strong> file of the Streisand project to my Vultr server. Next, run the script. It took about 20 minutes for it to complete.</p>

<p>Once completed, a folder of HTML documents is generated on the local machine. The documents outlines the steps to connect to the remote server using the various protocols. The instructions were clear, and even included links to the binaries. Each document is unique to the server. The certs, passwords are all unique to the server. Most importantly, it worked. I was able to access Google, and the various blocked sites from China.</p>

<p>I hope this helps. For the non-technically inclined, unfortunately I wasn&#8217;t able to find a company that provides OpenConnect commercially. Perhaps this would get better in future. I&#8217;m sure there is a market for such a service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everday XPath - Operators]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-operators/"/>
    <updated>2016-09-11T06:28:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-operators</id>
    <content type="html"><![CDATA[<p>This blog post is part of a series on XPath. The content comes from my ebook <a href="http://www.everydayxpath.com">EverydayXPath</a>. Part of the content from the book will be released to the public as blog posts. In this post, we explain what XPath does. We disect the components of an XPath expression. And why the context is the key to forming the expression.</p>

<!-- more -->


<h2>Operators</h2>

<p>Operators are special characters that has special meaning in a XPath expression.</p>

<ul>
<li><strong>Child</strong> <code>/</code>: Selects the children of the current context. When used at the beginning of the expression, it starts from the root node.</li>
<li><strong>Recursive descent</strong> <code>//</code>: Searches the document, descending from the current context. When used at the beginning of the expression, it searches the entire document from the root node.</li>
<li><strong>Dot</strong> <code>.</code>: Selects the current context. By default it takes the root node as the current context.</li>
<li><strong>Double dot</strong> <code>..</code>: Selects the parent of the current context.</li>
<li><strong>Wildcard</strong> <code>*</code>: Selecta all nodes from the current context.</li>
<li><strong>Attribute</strong> <code>@</code>: Selects the node with the attribute and returns the attribute.</li>
<li><strong>Attribute wildcard</strong> <code>@*</code>: Selects nodes with any attributes and returns the attributes.</li>
<li><strong>Round brackets</strong> <code>()</code>: Expressions within round brackets takes precedence in the evaluation order.</li>
<li><strong>Square brackets</strong> <code>[]</code>: Used both as a subscript operator and to encapsulate a filter expression.</li>
<li><strong>Addition</strong> <code>+</code>: Performs addition.</li>
<li><strong>Subtraction</strong> <code>-</code>: Performs subtraction.</li>
<li><strong>Division</strong> <code>div</code>: Performs division.</li>
<li><strong>Multiplication</strong> <code>*</code>: Performs multiplication.</li>
<li><strong>Modulo</strong> <code>mod</code>: Performs modulo</li>
</ul>


<p>For the following examples, we would use the below as the reference document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Child operator <code>/</code></h3>

<p>The child operator selects the children of the current context. When used at the beginning of the expression, it starts from the root node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the <code>table</code> node starting from the root.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the <code>td</code> nodes who are children of <code>tr</code> nodes who are children of the <code>table</code> node. Notice that it does not select the <code>td</code> nodes in the inner <code>table</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;3&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;4&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span> <span class="nt">&lt;5&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Recursive descent <code>//</code></h3>

<p>The recursive descent operator searches the document, descending from the current context. When used at the beginning of the expression, it searches the entire document from the root node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the <code>td</code> nodes. Notice that it selects all the <code>td</code> nodes regardless of their parents.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;3&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;4&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span> <span class="nt">&lt;5&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>&#39;
</span><span class='line'><span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;6&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;7&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td//td
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all <code>td</code> nodes descending from the context of the <code>td</code> node of the root <code>table</code>. Notice that the first level <code>td</code> nodes are not selected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dot operator <code>.</code></h3>

<p>The dot operator selects the current context. By default it takes the root node as the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td[.=&quot;Bravo&quot;]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the <code>td</code> node whose value is <code>Bravo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Double dot operator <code>..</code></h3>

<p>The double dot operator selects the parent of the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td/..
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the parent node of the <code>td</code> nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;4&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;tr&gt;</span> <span class="nt">&lt;5&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wildcard operator <code>*</code></h3>

<p>The wildcard operator selects all nodes from the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td/table/*/td
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all <code>td</code> nodes from the inner <code>table</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attribute operator <code>@</code></h3>

<p>The attribute operator selects the node with the attribute and returns the attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//table/@style
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the <code>table</code> with the <code>style</code> attribute and returns the <code>style</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>style=&quot;margin: 12px&quot;
</span></code></pre></td></tr></table></div></figure>


<h3>Attribute wildcard operator <code>@*</code></h3>

<p>The attribute wildcard operator selects nodes with any attributes and returns the attributes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//@*
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the attributes found in any of the nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class=&quot;active&quot; <span class="nt">&lt;1&gt;</span>
</span><span class='line'>style=&quot;margin: 12px&quot; <span class="nt">&lt;2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Round brackets operator <code>()</code></h3>

<p>Expressions within round brackets takes precedence in the evaluation order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(//@*)[1]
</span></code></pre></td></tr></table></div></figure>


<p>The expression within the round brackets is evaluated first, and the first result is returned by the subscript operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class=&quot;active&quot;
</span></code></pre></td></tr></table></div></figure>


<h3>Square brackets operator <code>[]</code></h3>

<p>Square brackets are either used as a subscript operator or to encapsulate a filter expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(//td)[2]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the second <code>td</code> node from the results of the expression encapsulated in the round brackets operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another example as a subscript operator</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr[2]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the second <code>tr</code> node which is a child of the <code>table</code> node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;/tr&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following example shows the square brackets operator encapsulating a filter expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>(//td)[last()]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the last node from the results of the expression in the round brackets operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another example of encapsulating a filter expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td[table]
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the <code>td</code> node which contains a <code>table</code> node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Arithmetic operators <code>+ - * div mod</code></h3>

<p>The arithmetic operators evaluates expressions to return numerical results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>count(//td) + count(//table)
</span></code></pre></td></tr></table></div></figure>


<p>The <code>count</code> function returns the number of nodes returned from evaluating the expression. There are 7 <code>td</code> nodes and 2 <code>table</code> nodes which when added, returns 9.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>9.0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everday XPath - Node Test]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-node-test/"/>
    <updated>2016-09-11T06:11:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-node-test</id>
    <content type="html"><![CDATA[<p>This blog post is part of a series on XPath. The content comes from my ebook <a href="http://www.everydayxpath.com">EverydayXPath</a>. Part of the content from the book will be released to the public as blog posts. In this post, we learn about the only mandatory part of the XPath expression: Node Test.</p>

<!-- more -->


<h2>Node Test</h2>

<p>The node test is used as a filter to select the nodes we want. It is the only mandatory part in a XPath expression. We break a node test into 3 types.</p>

<ul>
<li><p><strong>Name test</strong>: It makes use of the inherent properties of a node to select it. Properties such as the type of the node.</p></li>
<li><p><strong>Node type test</strong>: Nodes can be generalized as a comment node, a text node, a processing instruction node or a catchall node type. The node type tests helps to filter along these lines.</p></li>
<li><p><strong>Targeted processing instruction test</strong>: This test selects processing instruction nodes with a defined type.</p></li>
</ul>


<p>For the following examples, we would use the below as the reference document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;even&quot;</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;even&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Name Test</h2>

<p>The name test filter makes use of properties of the nodes.</p>

<h3>Asterisk <code>*</code></h3>

<p>The asterisk or the glob, selects everything.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>/table/tr/td/*
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the nodes that come after the <code>td</code> nodes of the root level <code>table</code> node. It then selects the inner <code>table</code> as it came after the <code>td</code> nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>QName</h3>

<p>When we want to select something more specific, we use the <em>QName</em>. QName stands for qualified name and can be either a prefixed name or an unprefixed name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>QName = PrefixedName | UnprefixedName
</span></code></pre></td></tr></table></div></figure>


<p>A prefixed name is made up of 2 parts: a prefix and a localpart separated by a colon. The prefix is a name space prefix and is optional.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>PrefixedName = Prefix &#39;:&#39; LocalPart
</span></code></pre></td></tr></table></div></figure>


<p>The unprefixed name and local part resolves to become a <em>NCName</em> which stands for non-colonized name: name without colons.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>UnprefixedName = LocalPart
</span><span class='line'>Prefix = NCName
</span><span class='line'>LocalPart = NCName
</span></code></pre></td></tr></table></div></figure>


<p><code>td</code> in the following expression below is a <em>NCName</em>. It means to select elements of the <code>td</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td
</span></code></pre></td></tr></table></div></figure>


<p>The results returns a list of 7 <code>td</code> nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;2&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;3&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Delta<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;4&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span> <span class="nt">&lt;5&gt;</span>
</span><span class='line'>  <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Echo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;6&gt;</span>
</span><span class='line'><span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;7&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Node Type Test</h2>

<p>There are times when you need a broader selection than a <em>NCName</em> and narrower than a <em>glob</em>. In such cases, there are 4 kinds of node types test which you can make use of.</p>

<ul>
<li><strong>comment()</strong>: Selects comment nodes.</li>
<li><strong>node()</strong>: Selects all nodes irregardless of type.</li>
<li><strong>text()</strong>: Selects the text from the current context.</li>
<li><strong>processing-instruction()</strong>: Selects the processing instruction nodes.</li>
</ul>


<p>For the following examples, we would use the below as the reference document.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Alpha<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;foo.jpg&quot;</span><span class="nt">&gt;&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;even&quot;</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>Charlie<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;even&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- &lt;td&gt;Delta&lt;/td&gt; --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;odd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">style=</span><span class="s">&quot;margin: 12px&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="c">&lt;!-- &lt;td&gt;Echo&lt;/td&gt; --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>Foxtrot<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>comment()</h3>

<p>Selects comment nodes from the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//tr[@class=&quot;even&quot;]/comment()
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the comment nodes from the context of the <code>tr</code> node with a class with value <em>even</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- &lt;td&gt;Delta&lt;/td&gt; --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>node()</h3>

<p>Selects all nodes irregardless of type, It even includes comment and processing instruction nodes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//tr[@class=&quot;even&quot;]/node()
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects all the nodes from the context of the <code>tr</code> node with a class with value <em>even</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span> <span class="nt">&lt;1&gt;</span>
</span><span class='line'><span class="c">&lt;!-- &lt;td&gt;Delta&lt;/td&gt; --&gt;</span> <span class="nt">&lt;2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compare this to the <em>glob</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//tr[@class=&quot;even&quot;]/*
</span></code></pre></td></tr></table></div></figure>


<p><em>node()</em> captures everything, even more than the <em>glob</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;td&gt;</span>Bravo<span class="nt">&lt;/td&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>text()</h3>

<p>Selects the text from the current context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>//td/text()
</span></code></pre></td></tr></table></div></figure>


<p>This expression selects the inner text from the nodes selected. Notice that it returns an empty string if the context does not contain any text.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&#39;Alpha&#39; <span class="nt">&lt;1&gt;</span>
</span><span class='line'>&#39;Bravo&#39; <span class="nt">&lt;2&gt;</span>
</span><span class='line'>&#39;Charlie&#39; <span class="nt">&lt;3&gt;</span>
</span><span class='line'>&#39;&#39; <span class="nt">&lt;4&gt;</span>
</span><span class='line'>&#39;Foxtrot&#39; <span class="nt">&lt;5&gt;</span>
</span><span class='line'>&#39;&#39; <span class="nt">&lt;7&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>processing-instruction()</h3>

<p>Selects the processing instruction nodes. Processing instruction nodes are usually found in XML documents. It usually carries meta information for applications. An example of a processing instruction node is below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;style.xsl&quot;?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It can be targeted. The example below selects only processing instructions with the target &#8220;xml-stylesheet&#8221;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>processing-instruction(&quot;xml-stylesheet&quot;)
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everday XPath - The Expression]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-the-expression/"/>
    <updated>2016-09-11T05:53:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/11/everday-xpath-the-expression</id>
    <content type="html"><![CDATA[<p>This blog post is part of a series on XPath. The content comes from my ebook <a href="http://www.everydayxpath.com">EverydayXPath</a>. Part of the content from the book will be released to the public as blog posts. In this post, we explain what XPath does. We disect the components of an XPath expression. And why the context is the key to forming the expression.</p>

<!-- more -->


<h2>The Expression</h2>

<p>When we travel to a foreign country, we rely on directions to get to the place that we want. Similarly, an XPath expression is like us giving the computer directions to find a particular node in the document.</p>

<p>An XPath expression is made up of steps, evaluated from left to right. Each step moves closer to the target element. They are separated by the forward slash <code>/</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>step/step/step</span></code></pre></td></tr></table></div></figure>


<p>We define a step as a <em>location path</em>. A location path selects a set of nodes relative to the preceding step. When a location path starts with a forward slash, it starts from the root node.</p>

<p>A location path can be broken up into 3 distinct parts. An axis, a node test and a predicate. It follows the format below. Only the node test is required in an expression. The rest are optional.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>axis::node-test[predicate]</span></code></pre></td></tr></table></div></figure>


<p>The <strong>axis</strong> makes use of the relationship between the nodes selected to the context node to act as a filter. For example, the ancestor axis selects the ancestors of the current context. While the descendant axis selects the descendants of the current context. The axis is optional.</p>

<p>The <strong>node test</strong> can be thought of as a pattern used for matching the desired nodes. We make use of the properties of the node to form the pattern. For example, a valid node test would be <code>table</code> which means we want table nodes. The node test is required.</p>

<p>The <strong>predicate</strong> is a filter expression. It filters against the nodes selected in the axis and node test. It evaluates to return either a number or a Boolean value. If it is a number, it selects the node in that position. If it is a Boolean, it selects nodes that satisfies the predicate. The predicate is optional.</p>

<h2>Context</h2>

<p>Writing an XPath expression starts with knowing the context. Assuming there is a robot whose job is to fetch you things in the house. The robot understands XPath. I&#8217;m in my living room, sitting on the couch.</p>

<blockquote><p>From the living room, go to the second room, find the first shelve, bring me the first book.</p></blockquote>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./room[2]/shelve[1]/book[1]</span></code></pre></td></tr></table></div></figure>


<p>The living room was the context from which the expression started.</p>

<p>Assuming the root of the house starts from the door.</p>

<blockquote><p>From the door, find the first room, find the first shelve, find the first book</p></blockquote>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/door/room[1]/shelve/book[1]</span></code></pre></td></tr></table></div></figure>


<p>The context was from the root. That is like searching the document from the start.</p>

<p>Since I want a book, if I know the title, I can do this</p>

<blockquote><p>Find a book with the title &#8220;Infinite Jest&#8221;</p></blockquote>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//books[title="Infinite Jest"]</span></code></pre></td></tr></table></div></figure>


<p>The expression changes according to the context. The context sets the basis for the XPath expression. Think of how to choose your context - the expression will turn out differently.</p>

<p>Naturally, the next question is how should we choose the context? While they all work, there are differences in maintainability.</p>

<p>Consider these two factors:</p>

<ul>
<li>Does the page change often? Will your expression break when there are changes?</li>
<li>Do you understand what the expression means at first glance?</li>
</ul>


<p>Avoid using a context which has a high chance of changing. You don&#8217;t want your expression to break. When writing expressions, always prefer short to long, simple to complex, less syntax to more. Readability helps. Hopefully, these factors will clarify the approach you take when forming the XPath expression.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing an ebook]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/09/09/writing-an-ebook/"/>
    <updated>2016-09-09T06:13:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/09/09/writing-an-ebook</id>
    <content type="html"><![CDATA[<p>I spent the past 3 months writing an ebook: <a href="http://www.everydayxpath.com">EverydayXPath</a>. The idea came as I needed to write a <a href="http://www.seleniumhq.org/">Selenium</a> script. Naturally I needed to use <a href="https://en.wikipedia.org/wiki/XPath">XPath</a> for selecting nodes on the web page. As I was googling for solutions, documentation on XPath felt inadequate. I needed good examples and coherent explanations for the various operators. XPath and CSS are the two common query languages for querying XML/HTML documents. I felt there is a opportunity for a niche product. Let me share the setup I used for writing the ebook.</p>

<!-- more -->


<h2>Writing the content</h2>

<p>Writing an book is a lot of work. I spent an hour a day, about 3 months in all to complete it. The first part is research. Though I knew enough to write valid XPath expressions, I did not know it deep enough. I set out to read more about XPath. I read the <a href="https://www.w3.org/TR/xpath/">W3C specifications</a>. There was an <a href="http://shop.oreilly.com/product/9780596002916.do">O&#8217;Reilly book on XPath</a>  written more than 10 years ago. Apparently it didn&#8217;t sell well enough that O&#8217;Reilly <a href="http://commons.oreilly.com/wiki/index.php/XPath_and_XPointer">released the content</a> on its commons site. There are many online sites that documents XPath, though not well enough. I learned what I could.</p>

<p>I started by drafting the chapters I wanted. It is easier to start writing with a framework in mind. From then on, it is just a matter of showing up everyday and churning out the content. <a href="https://streaksapp.com/">Streaks</a> helped maintain my momentum. I wrote in plain text files on <a href="https://www.gnu.org/software/emacs/">Emacs</a>. I read about <a href="https://www.literatureandlatte.com/scrivener.php">Scrivener</a> but was never tempted as my fingers speaks Emacs. The text editor doesn&#8217;t matter as long as content gets written. At first the format of my text was <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>. After I learned more about formatting, I switched to <a href="http://asciidoctor.org/docs/asciidoc-writers-guide/">Asciidoc</a>. Asciidoc suits ebooks better.</p>

<h2>Formatting</h2>

<p>The ebook had to be formatted in the major formats: <a href="https://en.wikipedia.org/wiki/Comparison_of_e-book_formats">HTML, PDF, MOBI and EPUB</a>. There are several tool chains available. I wanted a tool chain that can be used on the command line. I found <a href="https://www.gitbook.com/">Gitbook</a> and <a href="https://www.softcover.io/">Softcover</a>. I also saw <a href="https://atlas.oreilly.com/">O&#8217;Reilly Atlas</a>. Apparently it is invite only.</p>

<p>It was a toss up between Gitbook and Softcover. I tried Gitbook first as its eco-system looked more mature. The Gitbook workflow fit what I was looking for. I didn&#8217;t need to try Softcover. Gitbook depends on <a href="https://calibre-ebook.com/">Calibre</a> for formatting the ebooks. Calibre worked well enough.</p>

<h2>Workflow</h2>

<p>I had a <a href="https://www.gnu.org/software/make/">Makefile</a>. <code>make serve</code> would call Gitbook&#8217;s app server which renders Asciidoc or Markdown into HTML. I&#8217;m able to view the rendered content immediately. When I make changes, it automatically updates. The feedback loop is fast.</p>

<p>When I needed to build the books, I would call <code>make build</code> which calls the individual Gitbook build commands.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>serve:
</span><span class='line'>  ../node_modules/.bin/gitbook serve
</span><span class='line'>
</span><span class='line'>pdf:
</span><span class='line'>  ../node_modules/.bin/gitbook pdf ./ ./build/everydayxpath.pdf
</span><span class='line'>
</span><span class='line'>epub:
</span><span class='line'>  ../node_modules/.bin/gitbook epub ./ ./build/everydayxpath.epub
</span><span class='line'>
</span><span class='line'>mobi:
</span><span class='line'>  ../node_modules/.bin/gitbook mobi ./ ./build/everydayxpath.mobi
</span><span class='line'>
</span><span class='line'>build: pdf epub mobi
</span><span class='line'>  echo "built pdf, epub, mobi"
</span><span class='line'>
</span><span class='line'>.PHONY: serve</span></code></pre></td></tr></table></div></figure>


<p>That was all I needed.</p>

<h2>Website and payments</h2>

<p>The <a href="http://www.everydayxpath.com">EverydayXPath</a> website is a static HTML site hosted for free on <a href="https://pages.github.com/">Github Pages</a>. The website was written by me, the design was not. I bought a <a href="https://getbootstrap.com/">Bootstrap</a> theme from <a href="https://wrapbootstrap.com/">Wrapbootstrap</a>. The theme itself is a bunch of static HTML files. I was able to modify from it and get a professional looking website done in very short time, which is about 5-7 hours. I could have written one from scratch, but I would never be able to finish it in 5-7 hours.</p>

<p>When developing the website, I used <a href="https://www.npmjs.com/package/http-server">http-server</a>, a <a href="https://nodejs.org/en/">Node.js</a> package. It is a light web server which can render my website. I didn&#8217;t want to install <a href="https://www.nginx.com/">Nginx</a> or <a href="https://httpd.apache.org/">Apache</a> for rendering a one page website. That is overkill. http-server suited my needs perfectly.</p>

<p>For delivery of the digital product and payments, I chose <a href="https://gumroad.com/">Gumroad</a>. Gumroad doesn&#8217;t charge a monthly subscription, which suits me as I didn&#8217;t know how the ebook would sell. They charge a commission for every sale. If there is consistent volume, Gumroad offers a <a href="https://gumroad.com/features/pricing">subscription</a> model that has lower commission rates. The <strong>buy</strong> link on my website leads to Gumroad, where the payment takes place. Gumroad also handles the sending of the ebook to my customers.</p>

<h2>Marketing plan</h2>

<p>I know that writing the ebook is perhaps only 20% of the work. The real work is marketing. Hence, I&#8217;m putting up all the content from my ebook in a series of blog posts every week. My intention is to give would be readers a taste of the content. Hopefully I can convert them. The blog is an avenue for feedback. I also intend to measure all the marketing initiatives and publish the conclusions here. The world needs more data points on marketing technical ebooks. For a start, I&#8217;m going to concentrate on organic marketing techniques. Techniques that doesn&#8217;t require any money. I&#8217;m not ruling out paid marketing. So dear reader, if you&#8217;re interested in following this journey, do stay in touch by subscribing to this blog. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A firing]]></title>
    <link href="http://liangzan.github.com/blog/blog/2016/06/05/a-firing/"/>
    <updated>2016-06-05T16:37:00+08:00</updated>
    <id>http://liangzan.github.com/blog/blog/2016/06/05/a-firing</id>
    <content type="html"><![CDATA[<p>I was hooked by the documentary series: <a href="https://en.wikipedia.org/wiki/Chef%27s_Table">Chef&#8217;s table</a>. Each episode is about a famous chef. What hooked me was how human each of them was. They are not famous by default. Everyone of them had their struggles. Each of their journey to the zenith was hard. Perhaps it is cultural. We are taught to portray ourselves as successful, taught to hide our own imperfections. If <strong>Chef&#8217;s table</strong> is angled to show how good the chef was, how talented they are, I wonder, would the viewer relate personally to the chef? It is because they are imperfect and everyone is, that they connect.</p>

<p>Likewise, I am hardly perfect. I&#8217;d like to share a story of one of my failures. I&#8217;m seeing some of the people around me making the same mistakes. In my naive thinking, my stories might prevent the reader from falling in the same pothole. We should learn to celebrate failures. What failure is worse than being fired?</p>

<!-- more -->


<h2>Being fired</h2>

<p>It is taboo to say that you were fired. Being fired hints of incompetence. It was my second stint in web development. That was many years ago when I just started working. I was brought in as a consultant. The company did not have offices and everybody worked remotely. I was tasked to build a CRUD app with a good friend who did the user interface. We had weekly meet ups with the boss at Starbucks, where we showed the boss our progress and obtained feedback.</p>

<p>It was smooth in the beginning. At that time I had my own side projects. I was working on my side projects and doing consulting at the same time. I didn&#8217;t spend as much time as I should on consulting work as I felt I can make it up later. As a result, the consulting work did not move as fast as expected. I thought, as long as it gets done in the end, it should be OK.</p>

<p>The boss met me alone one day. His feedback was I wasn&#8217;t taking the deadlines seriously enough. During meetings, sometimes I would give frivolous answers to serious questions. And my deadlines kept slipping. I need to take the work more seriously. In a small company like his, he cannot afford to keep people who cannot perform consistently. I listened.</p>

<p>I was asked to develop a feature that allows the user to send Facebook messages to their Facebook contact list. Then, I was new to Facebook API. What we were trying to do is not common. There were a few things I weren&#8217;t sure. There was another developer within the company who built a Facebook app. I started asking the developer questions on the intricacies of Facebook API.</p>

<p>A couple of weeks later, the boss asked to meet me alone again. I knew it was bad news. The reason is I was brought in as the expert, not that developer. I should be the one digging deep. He felt that I wasn&#8217;t performing as well as he expected. And taking up his other resources at the same time. I had to go.</p>

<h2>Conclusion</h2>

<p>It struck deeply. The lesson I took away is I have to be professional in my work. When it is time to work, be serious and make the effort. Be professional in every interation you have with others. People are constantly evaluating you. In small companies, there is no room for poor performers as resources are tight. The bar for performance gets higher as you get older. I&#8217;ve had the misfortune of letting go of people whom made the same mistakes as I did. Don&#8217;t let that happen to you.</p>
]]></content>
  </entry>
  
</feed>
